var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.474,1,2.788]],["body/guards/AccessTokenGuard.html",[0,3.103,1,3.498,2,2.64,3,0.149,4,0.093,5,0.093,6,5.704,7,4.756,8,3.166,9,0.217,10,4.099,11,3.455,12,0.244,13,0.99,14,1.44,15,5.161,16,1.414,17,5.151,18,1.382,19,2.865,20,5.957,21,5.161,22,4.756,23,0.545,24,3.623,25,1.229,26,0.013,27,1.009,28,0.426,29,0.91,30,4.073,31,4.433,32,3.623,33,1.338,34,5.151,35,1.011,36,4.07,37,1.325,38,2.559,39,2.052,40,2.265,41,4.501,42,2.803,43,4.501,44,5.151,45,3.863,46,3.623,47,5.151,48,4.073,49,0.958,50,3.103,51,0.254,52,3.113,53,0.327,54,3.823,55,0.425,56,1.726,57,2.311,58,2.64,59,2.46,60,3.623,61,2.865,62,3.166,63,0.105,64,0.069,65,2.46,66,1.214,67,1.126,68,3.498,69,1.882,70,2.865,71,3.623,72,3.623,73,1.96,74,3.166,75,3.166,76,2.311,77,3.623,78,1.764,79,1.361,80,3.623,81,1.283,82,2.183,83,5.161,84,2.46,85,3.623,86,0.928,87,3.623,88,3.623,89,3.166,90,3.623,91,3.166,92,5.151,93,5.151,94,3.753,95,4.501,96,4.501,97,5.151,98,5.151,99,5.151,100,1.283,101,5.151,102,3.623,103,3.623,104,2.865,105,1.726,106,3.623,107,0.958,108,3.623,109,0.007,110,0.007]],["title/interfaces/ActiveUserData.html",[111,2.788,112,1.805]],["body/interfaces/ActiveUserData.html",[3,0.164,4,0.146,5,0.146,9,0.34,12,0.383,26,0.012,28,0.532,35,1.22,49,1.514,63,0.164,83,4.498,109,0.01,110,0.01,111,4.715,112,3.053,113,4.498,114,2.955,115,4.971,116,4.971,117,2.085,118,2.883,119,3.579,120,6.171,121,2.11,122,2.019]],["title/controllers/AppController.html",[123,1.738,124,2.992]],["body/controllers/AppController.html",[3,0.16,4,0.142,5,0.142,9,0.331,12,0.372,13,1.312,16,1.135,18,1.446,23,0.504,26,0.013,37,1.312,49,1.27,51,0.242,55,0.649,63,0.16,64,0.106,66,1.03,67,1.21,107,1.03,109,0.01,110,0.01,123,3.272,124,4.977,125,2.344,126,4.84,127,5.787,128,4.658,129,6.756,130,1.61,131,5.538,132,5.968,133,4.932,134,4.84,135,1.249,136,1.464,137,5.538]],["title/modules/AppModule.html",[138,1.019,139,2.992]],["body/modules/AppModule.html",[1,3.428,3,0.102,4,0.091,5,0.091,7,2.566,26,0.013,28,0.25,39,1.206,51,0.298,52,1.829,55,0.413,56,1.677,57,2.246,59,2.391,63,0.102,64,0.067,68,2.391,69,2.621,73,1.057,107,0.655,109,0.007,110,0.007,124,4.299,125,2.136,127,2.566,133,4.527,134,3.077,138,1.761,139,6.13,140,1.548,141,1.548,142,1.677,143,1.677,144,1.548,145,2.81,146,1.677,147,3.077,148,3.077,149,3.077,150,4.527,151,4.276,152,4.527,153,4.276,154,4.82,155,4.82,156,4.82,157,4.527,158,4.276,159,4.057,160,2.404,161,1.206,162,1.61,163,2.784,164,3.21,165,3.521,166,3.991,167,4.11,168,5.047,169,3.521,170,5.047,171,3.521,172,5.047,173,3.521,174,2.246,175,1.291,176,3.521,177,3.521,178,3.521,179,3.521,180,3.521,181,3.077,182,5.899,183,5.047,184,2.391,185,3.678,186,3.521,187,2.784,188,3.521,189,3.678,190,3.521,191,3.521,192,3.077,193,3.678,194,3.521,195,3.521,196,3.521,197,3.521,198,3.521,199,3.521,200,3.521,201,3.077,202,4.665,203,3.077,204,3.521,205,3.521,206,3.521,207,3.521,208,3.077,209,3.521,210,3.521,211,3.077,212,3.521,213,3.521,214,3.521,215,3.521,216,3.521,217,3.077,218,3.521,219,3.521,220,3.521,221,1.336,222,3.521,223,3.077,224,3.521,225,2.122,226,3.521,227,3.521,228,3.521,229,3.077,230,3.077,231,3.077,232,3.077,233,3.077,234,3.077,235,5.155,236,5.155]],["title/injectables/AppService.html",[53,0.261,133,2.619]],["body/injectables/AppService.html",[3,0.168,4,0.149,5,0.149,9,0.347,12,0.391,13,1.351,23,0.528,26,0.012,33,1.441,37,1.351,49,1.308,51,0.206,53,0.447,55,0.681,63,0.168,64,0.111,107,1.08,109,0.01,110,0.01,127,5.726,129,6.867,132,6.608,133,4.484,136,2.077,237,1.396,238,5.074,239,5.807,240,7.031,241,7.562]],["title/controllers/AuthController.html",[123,1.738,242,2.992]],["body/controllers/AuthController.html",[3,0.071,4,0.064,5,0.064,9,0.444,10,3.533,11,2.844,12,0.166,13,0.744,14,1.146,16,0.507,18,0.819,23,0.491,25,1.106,26,0.013,27,0.908,28,0.52,29,0.819,35,0.911,37,1.126,39,2.301,43,3.382,45,3.34,51,0.245,55,0.29,63,0.071,64,0.047,66,0.72,67,0.54,79,1.426,82,3.743,84,3.664,86,0.633,107,1.004,109,0.006,110,0.006,118,2.299,123,2.018,125,1.046,128,4.258,130,1.569,135,0.558,136,0.653,161,2.366,221,2.973,242,2.82,243,2.16,244,1.577,245,2.911,246,1.759,247,3.06,248,3.06,249,3.06,250,3.06,251,1.955,252,3.962,253,3.664,254,4.715,255,3.34,256,2.841,257,2.16,258,4.564,259,2.802,260,4.167,261,3.512,262,3.124,263,5.396,264,2.726,265,4.287,266,4.564,267,2.472,268,2.472,269,2.82,270,3.06,271,1.955,272,4.407,273,2.82,274,4.669,275,2.472,276,4.219,277,2.106,278,2.472,279,2.472,280,2.472,281,0.742,282,1.955,283,4.287,284,3.87,285,3.87,286,2.472,287,2.472,288,1.955,289,4.407,290,4.715,291,2.472,292,2.472,293,2.472,294,2.628,295,1.284,296,2.16,297,1.955,298,1.679,299,1.577,300,2.16,301,1.955,302,3.442,303,2.16,304,2.472,305,1.413,306,2.472,307,1.284,308,2.16,309,2.82,310,2.16,311,2.16,312,1.955,313,3.736,314,3.736,315,3.736,316,1.577,317,0.819,318,2.472,319,2.472,320,4.242,321,3.084,322,4.184,323,3.06,324,5.396,325,3.475,326,3.664,327,3.771,328,2.16,329,3.664,330,3.664,331,3.664,332,2.472,333,3.664,334,4.715,335,2.472,336,2.472,337,2.472,338,2.472,339,2.472,340,2.472,341,2.472,342,2.472,343,2.472,344,2.472,345,2.472,346,2.472,347,2.472,348,2.472,349,2.472,350,2.472]],["title/modules/AuthModule.html",[138,1.019,150,2.619]],["body/modules/AuthModule.html",[3,0.129,4,0.115,5,0.115,26,0.013,51,0.295,55,0.524,56,2.127,57,2.849,59,3.033,63,0.129,64,0.085,68,3.033,69,2.32,109,0.009,110,0.009,125,2.518,138,1.843,140,1.964,141,1.964,142,2.127,143,2.127,144,1.964,145,3.187,146,3.187,150,5.368,159,3.4,160,2.834,161,1.529,162,2.042,164,2.43,166,3.531,181,3.902,230,3.902,231,3.902,232,3.902,233,3.902,234,3.902,235,3.902,236,3.902,242,4.875,302,4.874,303,3.902,351,3.902,352,3.902,353,3.902,354,4.115,355,4.874,356,4.604,357,4.874,358,4.874,359,4.874,360,4.466,361,3.584,362,4.466,363,3.531,364,4.466,365,4.335,366,4.466,367,4.466,368,3.902,369,3.902,370,3.531,371,3.531,372,4.466,373,4.335,374,4.466,375,4.466,376,3.902]],["title/injectables/AuthService.html",[53,0.261,302,2.619]],["body/injectables/AuthService.html",[3,0.1,4,0.089,5,0.089,9,0.206,10,3.833,11,2.466,12,0.232,13,0.955,14,1.891,16,1.307,18,1.35,23,0.615,25,1.386,26,0.013,27,1.138,28,0.48,29,1.027,33,1.524,35,0.935,37,1.428,51,0.268,53,0.315,55,0.404,63,0.1,64,0.066,66,1.383,67,1.394,86,1.633,107,1.186,109,0.007,110,0.007,118,1.759,135,1.439,136,1.313,138,1.232,161,1.179,221,1.885,237,0.828,245,3.169,246,1.891,247,3.928,248,3.928,249,3.928,250,3.928,251,3.928,252,4.068,255,2.468,269,2.51,270,3.928,271,3.928,272,4.494,274,4.494,276,4.331,281,1.915,282,3.928,283,4.494,288,3.928,289,4.494,294,3.373,301,2.723,302,3.168,309,3.62,312,2.723,355,4.83,357,4.741,358,4.83,359,4.632,368,3.009,373,3.62,376,3.009,377,3.009,378,3.444,379,3.444,380,3.444,381,2.58,382,3.62,383,3.444,384,4.967,385,4.341,386,3.444,387,4.341,388,3.444,389,4.341,390,2.723,391,2.723,392,2.723,393,2.723,394,1.313,395,3.444,396,3.444,397,3.444,398,3.444]],["title/guards/AuthenticationGuard.html",[0,2.474,189,2.992]],["body/guards/AuthenticationGuard.html",[0,3.672,1,5.157,2,5.274,3,0.108,4,0.096,5,0.096,7,2.722,9,0.223,10,3.316,11,1.581,12,0.251,13,1.012,14,1.465,15,6.104,16,1.484,18,1.401,23,0.479,25,1.079,26,0.013,27,1.026,28,0.433,29,0.799,30,4.162,31,4.494,33,1.079,35,0.97,36,4.139,37,1.171,38,2.616,39,2.266,40,2.314,42,2.864,51,0.257,53,0.334,54,3.358,55,0.438,62,3.264,63,0.108,64,0.138,65,2.537,66,1.134,67,1.582,73,1.987,78,1.802,79,0.987,81,1.323,86,0.956,100,1.323,105,2.507,107,0.695,109,0.008,110,0.008,116,4.6,117,1.122,135,1.187,184,2.537,189,3.836,192,3.264,229,3.264,245,3.288,305,2.135,307,1.94,399,3.264,400,4.6,401,5.264,402,5.326,403,5.264,404,3.264,405,6.837,406,3.736,407,3.736,408,5.264,409,3.264,410,2.954,411,2.383,412,2.954,413,2.383,414,3.264,415,4.162,416,3.264,417,3.264,418,3.264,419,3.358,420,5.264,421,3.264,422,6.095,423,3.264,424,3.736,425,3.736,426,3.264,427,3.736,428,2.537,429,3.264,430,4.162,431,3.264,432,3.264,433,3.736,434,3.264,435,3.264,436,3.736,437,1.94,438,3.736,439,3.736,440,2.234,441,3.264,442,3.736,443,3.736,444,2.954,445,3.736,446,3.575]],["title/injectables/BcryptProvider.html",[53,0.261,365,2.992]],["body/injectables/BcryptProvider.html",[3,0.129,4,0.115,5,0.115,9,0.268,12,0.301,13,1.145,14,1.837,23,0.542,25,1.221,26,0.013,27,1.003,28,0.423,29,0.905,33,1.463,37,1.372,38,3.547,39,2.039,40,2.619,42,3.241,49,1.492,51,0.237,53,0.378,55,0.524,63,0.129,64,0.085,65,3.038,66,1.245,73,1.343,86,1.525,105,2.837,107,1.108,109,0.009,110,0.009,221,3.123,225,3.589,237,1.075,246,1.837,354,3.094,365,4.34,394,1.574,447,3.909,448,6.238,449,5.851,450,5.205,451,3.909,452,5.57,453,6.496,454,4.474,455,5.205,456,5.956,457,5.956,458,3.589,459,4.479,460,5.956,461,5.205,462,5.205,463,4.474,464,4.34,465,5.956,466,3.26,467,2.557,468,6.696,469,4.474,470,4.474,471,4.474]],["title/injectables/BuyTicketProvider.html",[53,0.261,472,2.619]],["body/injectables/BuyTicketProvider.html",[3,0.096,4,0.085,5,0.085,9,0.198,12,0.223,13,0.929,14,1.601,16,1.472,18,1.326,23,0.57,25,1.285,26,0.013,27,1.055,28,0.494,29,0.952,33,1.285,35,1.02,37,1.204,51,0.266,53,0.307,55,0.389,63,0.096,64,0.109,66,1.166,67,1.246,73,2.155,86,1.46,107,0.617,109,0.007,110,0.007,112,2.755,114,1.723,121,1.606,135,1.287,136,1.277,175,1.216,237,0.797,246,1.371,256,1.517,281,1.451,295,1.723,394,1.277,472,3.083,473,5.821,474,2.623,475,4.224,476,2.587,477,5.703,478,4.834,479,4.834,480,3.317,481,2.929,482,3.365,483,4.325,484,3.317,485,5.703,486,3.317,487,5.554,488,4.103,489,3.317,490,4.834,491,3.083,492,4.224,493,3.317,494,3.317,495,3.317,496,4.834,497,2.63,498,3.486,499,3.317,500,4.224,501,3.317,502,3.317,503,2.623,504,2.417,505,4.834,506,1.723,507,2.417,508,1.58,509,1.098,510,1.998,511,3.317,512,2.898,513,2.116,514,2.417,515,2.252,516,3.317,517,2.898,518,1.723,519,1.896,520,1.896,521,2.898,522,3.436,523,3.317,524,2.898,525,1.953,526,3.317,527,3.317,528,2.623,529,3.317,530,2.898,531,4.834,532,3.317,533,3.317,534,3.317,535,3.317,536,3.317,537,4.834,538,3.317,539,2.898,540,3.317,541,4.224,542,2.623,543,3.317,544,3.317,545,4.834,546,3.317,547,2.116,548,2.623,549,3.317,550,3.317,551,2.623,552,3.317,553,3.317,554,3.317,555,3.317,556,3.317,557,3.317,558,2.898,559,3.317,560,3.317,561,3.317,562,2.898]],["title/injectables/ChangeUserPasswordProvider.html",[53,0.261,563,2.619]],["body/injectables/ChangeUserPasswordProvider.html",[3,0.134,4,0.119,5,0.119,9,0.278,12,0.313,13,1.174,14,1.64,16,0.953,18,1.534,23,0.556,25,1.252,26,0.013,27,1.028,28,0.434,29,0.928,35,1.235,37,1.174,49,1.269,51,0.257,53,0.388,55,0.545,63,0.134,64,0.13,66,1.269,67,1.016,73,1.395,78,1.591,79,1.228,81,1.646,86,1.19,100,1.646,107,0.864,109,0.009,110,0.009,135,1.048,175,1.703,221,2.857,237,1.117,246,1.64,256,2.125,281,1.395,382,4.451,394,1.614,440,1.703,481,3.31,508,2.214,509,1.539,563,3.896,564,5.962,565,3.386,566,4.83,567,5.337,568,2.964,569,4.648,570,4.111,571,5.337,572,6.578,573,4.648,574,6.108,575,5.337,576,1.895,577,2.656,578,2.8,579,4.061,580,3.156,581,3.386,582,4.061,583,2.214]],["title/classes/CreateEventDto.html",[64,0.078,584,2.619]],["body/classes/CreateEventDto.html",[3,0.072,4,0.064,5,0.064,9,0.483,12,0.168,23,0.685,26,0.013,27,1.097,28,0.557,29,1.024,39,0.854,49,1.45,51,0.239,63,0.072,64,0.091,109,0.006,110,0.006,117,1.17,130,2.188,262,3.327,317,0.826,320,1.426,476,1.796,497,2.61,498,2.979,518,2.024,525,2.916,584,2.486,585,0.914,586,6.645,587,2.179,588,1.428,589,1.936,590,3.925,591,3.793,592,4.419,593,4.191,594,4.191,595,3.793,596,4.191,597,4.155,598,3.793,599,5.151,600,4.191,601,5.422,602,3.405,603,3.405,604,2.494,605,2.494,606,4.651,607,4.796,608,3.951,609,3.682,610,2.494,611,2.494,612,4.651,613,2.494,614,2.494,615,3.384,616,4.191,617,3.405,618,5.422,619,5.422,620,2.494,621,2.494,622,4.3,623,3.115,624,3.897,625,5.422,626,2.494,627,2.494,628,4.578,629,2.494,630,2.494,631,3.668,632,3.897,633,2.494,634,2.494,635,2.494,636,2.494,637,3.897,638,2.494,639,2.494,640,2.494,641,2.494,642,4.651,643,2.494,644,2.494,645,2.179,646,1.972,647,2.494,648,3.405,649,2.494,650,2.494,651,4.738,652,3.951,653,2.494,654,2.494,655,2.84,656,3.257,657,2.179,658,3.3,659,3.757,660,3.853,661,3.897,662,1.972,663,2.84,664,0.946,665,2.179,666,1.972,667,1.591,668,2.486,669,1.817,670,1.972,671,3.588,672,5.882,673,2.179,674,2.179,675,3.405,676,3.059,677,1.972,678,2.494,679,2.494,680,2.494,681,2.494,682,2.494,683,2.179,684,5.422,685,2.494,686,2.494,687,2.494,688,3.405,689,2.494,690,3.897,691,2.494,692,2.646,693,2.179,694,1.817]],["title/injectables/CreateEventProvider.html",[53,0.261,695,2.619]],["body/injectables/CreateEventProvider.html",[3,0.095,4,0.085,5,0.171,9,0.34,12,0.221,13,0.924,14,1.364,16,1.164,18,1.322,23,0.437,25,0.985,26,0.013,27,0.809,28,0.341,29,0.73,33,0.985,35,0.974,37,0.924,42,1.791,51,0.26,53,0.305,55,0.386,63,0.095,64,0.063,66,1.332,67,1.241,73,2.204,78,2.138,79,1.65,81,2.211,86,1.917,100,2.211,107,0.612,109,0.007,110,0.007,112,2.745,114,1.709,135,1.281,136,1.27,237,0.791,246,1.364,256,1.505,277,2.615,281,0.988,394,1.27,437,2.496,440,2.288,444,2.602,458,2.896,476,2.068,482,3.275,487,2.398,504,2.398,506,1.709,509,1.09,510,1.983,522,1.983,524,2.876,525,2.718,576,1.342,584,4.683,588,1.206,589,3.102,597,3.065,631,1.791,666,2.602,695,3.065,696,4.961,697,2.876,698,4.489,699,2.602,700,6.738,701,4.423,702,3.291,703,2.602,704,3.855,705,3.291,706,1.881,707,2.602,708,2.398,709,2.876,710,2.602,711,3.291,712,3.982,713,3.291,714,2.876,715,2.896,716,4.2,717,2.876,718,4.2,719,2.876,720,4.2,721,2.876,722,4.2,723,4.806,724,3.291,725,2.602,726,2.602,727,3.291,728,3.291,729,5.677,730,3.291,731,3.291,732,1.505,733,3.291,734,3.291,735,3.291,736,3.291,737,3.291,738,4.137,739,2.876,740,2.876,741,4.2,742,2.876,743,2.876,744,3.291,745,4.2,746,2.602,747,2.876,748,2.876,749,2.876,750,4.2,751,2.876,752,2.876,753,4.961,754,4.2,755,2.876]],["title/classes/CreateManyTicketsDto.html",[64,0.078,756,3.247]],["body/classes/CreateManyTicketsDto.html",[3,0.149,4,0.132,5,0.132,9,0.308,12,0.346,23,0.468,26,0.012,28,0.573,35,0.754,39,2.451,51,0.267,63,0.149,64,0.148,109,0.009,110,0.009,117,1.958,130,1.495,265,4.159,317,1.703,430,5.156,437,3.719,498,3.688,528,5.953,585,1.885,588,2.39,645,4.493,646,4.066,655,4.751,658,3.106,663,4.751,664,1.951,667,3.28,668,4.802,669,4.751,670,4.066,671,3.24,694,5.217,732,2.352,756,5.156,757,4.066,758,5.142,759,6.256,760,4.493,761,6.52,762,5.142,763,5.142,764,4.493,765,5.142,766,5.142,767,5.142]],["title/classes/CreateSubscriberDto.html",[64,0.078,768,2.788]],["body/classes/CreateSubscriberDto.html",[3,0.163,4,0.145,5,0.145,9,0.414,12,0.38,23,0.514,26,0.012,28,0.401,49,1.286,51,0.245,63,0.163,64,0.132,109,0.01,110,0.01,117,2.076,118,2.915,130,1.643,262,2.82,317,1.871,585,2.071,588,2.534,589,3.436,590,4.166,615,2.935,658,3.294,662,4.468,664,2.144,671,3.436,768,4.696,769,6.042,770,4.938,771,4.45,772,4.938,773,5.651,774,5.038,775,4.117,776,4.938]],["title/classes/CreateTicketDto.html",[64,0.078,668,2.619]],["body/classes/CreateTicketDto.html",[3,0.153,4,0.136,5,0.136,9,0.317,12,0.357,23,0.661,26,0.012,28,0.583,49,1.416,51,0.188,63,0.153,64,0.145,109,0.01,110,0.01,117,1.996,121,1.872,130,2.112,320,4.483,476,2.719,497,4.267,585,1.944,588,2.437,589,3.304,658,3.627,660,4.152,664,2.013,668,4.241,669,5.548,757,4.195,760,4.635,777,5.305,778,5.305,779,6.649,780,5.305,781,4.516]],["title/classes/CreateUserDto.html",[64,0.078,782,2.619]],["body/classes/CreateUserDto.html",[3,0.108,4,0.096,5,0.096,9,0.445,12,0.25,23,0.658,26,0.012,27,1.112,28,0.556,29,0.798,35,1.24,49,1.411,51,0.234,63,0.108,64,0.126,109,0.008,110,0.008,117,1.577,118,2.632,119,3.438,121,1.479,130,2.102,221,2.82,259,2.728,262,3.255,307,2.728,317,1.233,585,1.365,588,2.422,589,2.61,590,3.165,615,3.756,657,3.255,658,3.319,659,3.165,660,3.777,662,2.945,664,1.414,671,3.692,772,3.255,774,3.828,775,2.714,776,5.775,782,3.351,783,6.493,784,2.714,785,4.356,786,3.983,787,4.198,788,6.609,789,3.725,790,3.725,791,3.725,792,4.154,793,3.725,794,3.725,795,4.154,796,3.725,797,3.725,798,3.725,799,5.253,800,5.253,801,5.253,802,5.253,803,5.253,804,5.253,805,3.165,806,5.253,807,5.253,808,5.253,809,3.725,810,3.725,811,3.725,812,3.725,813,3.725,814,3.255,815,2.376,816,3.725,817,5.253,818,3.725,819,2.945,820,3.725,821,3.725,822,2.945,823,3.725,824,3.255,825,3.725]],["title/injectables/CreaterUsersProviders.html",[53,0.261,826,2.619]],["body/injectables/CreaterUsersProviders.html",[3,0.106,4,0.094,5,0.094,9,0.36,12,0.246,13,0.996,14,1.447,16,1.234,18,1.387,23,0.472,25,1.062,26,0.013,27,0.872,28,0.368,29,0.787,33,1.062,35,1.166,37,0.996,45,2.575,51,0.262,52,1.898,53,0.329,55,0.428,63,0.106,64,0.115,66,1.219,67,1.316,78,2.244,79,1.828,81,2.45,86,1.678,100,2.133,107,0.68,109,0.007,110,0.007,118,2.321,119,1.607,122,1.062,135,1.169,136,0.966,175,1.339,221,1.387,225,3.122,237,0.878,246,1.447,264,2.089,277,2.82,281,1.097,354,3.989,361,2.202,394,1.591,437,1.898,440,2.536,458,2.202,461,3.193,464,2.663,481,3.042,508,1.741,509,1.21,568,2.331,570,3.628,576,2.456,577,2.089,578,2.202,583,1.741,589,3.256,706,2.089,782,4.714,785,2.202,786,2.089,787,2.202,826,3.306,827,5.262,828,3.193,829,4.529,830,4.108,831,3.654,832,4.529,833,3.654,834,3.776,835,2.89,836,3.654,837,2.663,838,3.654,839,2.663,840,6.022,841,4.098,842,5.182,843,4.098,844,3.193,845,3.654,846,4.098,847,4.098,848,4.098,849,4.388,850,4.098,851,4.098,852,2.89,853,3.193,854,5.182,855,3.654,856,3.654,857,3.193,858,3.654,859,3.654,860,2.89,861,3.654,862,3.654,863,3.654,864,3.654,865,3.654,866,3.654]],["title/injectables/DataResponseInterceptor.html",[53,0.261,185,2.992]],["body/injectables/DataResponseInterceptor.html",[3,0.135,4,0.12,5,0.12,9,0.279,12,0.314,13,1.177,16,0.956,18,1.536,23,0.557,25,1.255,26,0.013,27,1.031,28,0.435,29,0.93,31,4.928,33,1.255,36,4.158,37,1.177,51,0.242,53,0.389,55,0.547,56,2.222,63,0.135,64,0.089,65,3.168,66,1.271,67,1.019,69,2.423,94,5.288,107,0.868,109,0.009,110,0.009,135,1.052,136,1.233,167,5.028,185,4.462,187,5.405,237,1.121,394,1.618,409,5.973,410,3.689,421,4.076,429,5.35,431,5.35,459,4.819,867,5.973,868,4.076,869,5.636,870,6.123,871,6.123,872,4.076,873,4.665,874,6.123,875,7.257,876,4.665,877,5.35,878,6.835,879,6.123,880,6.123,881,6.123,882,4.665,883,4.665,884,4.665,885,4.665,886,4.665]],["title/entities/Event.html",[525,1.406,732,1.878]],["body/entities/Event.html",[3,0.07,4,0.062,5,0.062,9,0.368,12,0.162,23,0.705,26,0.013,27,0.79,28,0.585,29,1.066,35,0.901,39,2.611,40,3.285,49,1.418,51,0.218,63,0.07,64,0.046,109,0.005,110,0.005,117,1.14,121,1.069,122,1.87,130,2.253,277,2.066,476,2.036,497,2.066,498,2.648,509,0.799,525,2.858,590,3.489,591,3.712,592,3.693,593,4.102,594,4.102,595,3.712,596,4.102,597,3.693,598,3.712,599,4.578,600,4.102,606,4.578,608,2.767,609,2.578,612,4.578,622,3.396,623,3.352,628,3.616,631,2.897,642,4.578,651,3.318,652,2.767,665,2.108,666,1.908,673,2.108,674,2.108,676,4.641,712,3.693,732,2.435,887,1.539,888,2.108,889,3.712,890,3.712,891,5.011,892,5.556,893,5.482,894,5.556,895,5.824,896,2.413,897,5.685,898,2.413,899,2.413,900,3.712,901,2.413,902,3.797,903,2.413,904,3.88,905,2.413,906,4.653,907,2.413,908,2.413,909,2.413,910,3.188,911,2.413,912,2.413,913,3.002,914,2.288,915,2.413,916,2.108,917,3.797,918,3.318,919,3.318,920,2.413,921,5.324,922,2.413,923,2.108,924,3.797,925,3.318,926,2.413,927,3.712,928,2.413,929,2.767,930,2.413,931,2.413,932,1.539,933,3.318,934,4.102,935,2.333,936,2.413,937,2.413]],["title/controllers/EventsController.html",[123,1.738,938,2.992]],["body/controllers/EventsController.html",[3,0.065,4,0.058,5,0.144,9,0.48,11,1.9,12,0.152,13,0.691,16,0.462,18,0.477,23,0.466,25,1.051,26,0.013,27,1.278,28,0.539,29,0.952,33,0.738,35,0.875,37,1.204,39,2.297,40,2.755,45,1.788,49,1.042,50,1.358,51,0.253,55,0.264,58,1.643,63,0.065,64,0.043,66,1.111,67,0.493,76,3.809,79,1.355,82,1.358,105,2.442,107,1.111,109,0.005,110,0.005,112,2.254,114,1.171,119,0.991,121,2.044,122,2.042,123,1.9,125,0.954,128,3.921,130,1.49,135,0.509,136,0.596,244,1.438,245,1.12,246,1.718,253,3.481,258,3.481,261,2.547,262,2.864,265,4.797,266,2.444,273,2.622,277,2.789,295,1.869,299,2.295,305,1.289,307,1.869,313,2.295,314,3.573,315,3.573,316,1.438,317,0.747,320,3.719,321,2.93,322,2.057,326,1.531,329,1.531,330,1.531,331,1.531,333,1.531,381,2.662,411,1.438,437,1.869,459,2.706,476,1.192,483,2.706,497,1.958,498,1.646,506,1.171,518,3.771,520,3.202,525,2.749,530,3.144,547,1.438,584,4.279,589,1.788,590,2.168,592,2.295,597,2.295,599,2.845,602,3.144,603,3.144,648,3.144,675,3.924,677,2.845,683,3.144,688,3.144,692,3.481,693,3.144,698,3.551,703,1.783,704,3.05,706,1.289,707,1.783,715,2.706,869,2.622,914,3.088,938,2.622,939,1.97,940,3.144,941,3.598,942,3.144,943,4.479,944,3.598,945,3.598,946,4.053,947,1.97,948,1.97,949,2.255,950,2.255,951,2.255,952,3.598,953,1.97,954,2.845,955,2.845,956,2.444,957,2.255,958,2.255,959,2.255,960,2.255,961,2.622,962,2.255,963,2.93,964,4.479,965,1.97,966,4.479,967,1.97,968,2.295,969,3.144,970,2.845,971,3.144,972,1.97,973,3.088,974,3.144,975,3.144,976,2.255,977,2.255,978,3.551,979,1.97,980,1.783,981,1.783,982,2.622,983,1.97,984,2.255,985,2.255,986,1.783,987,2.845,988,3.598,989,2.255,990,2.444,991,1.531,992,1.783,993,2.255,994,3.735,995,3.551,996,3.924,997,1.97,998,2.255,999,1.97,1000,1.531,1001,1.643,1002,1.643,1003,1.531,1004,2.255,1005,2.255,1006,2.255,1007,2.255,1008,2.255,1009,3.598,1010,3.598,1011,3.598,1012,3.598,1013,3.598,1014,3.598,1015,4.351,1016,3.05,1017,3.05,1018,4.055,1019,2.255,1020,3.598,1021,2.255,1022,2.255,1023,2.255,1024,2.255,1025,2.168,1026,2.255,1027,2.255,1028,2.255,1029,1.227,1030,2.255,1031,2.255,1032,1.783,1033,2.255,1034,2.255,1035,2.255]],["title/modules/EventsModule.html",[138,1.019,151,2.474]],["body/modules/EventsModule.html",[3,0.138,4,0.122,5,0.122,26,0.013,35,0.698,51,0.291,55,0.558,63,0.138,64,0.091,109,0.009,110,0.009,125,2.626,138,1.713,140,2.094,141,2.094,142,2.268,143,2.268,144,2.094,145,3.289,146,3.289,151,5.09,153,4.687,158,4.687,159,3.547,160,2.956,161,1.63,162,2.178,164,3.377,174,3.037,175,1.745,361,3.739,363,3.765,483,5.004,525,1.63,695,4.962,708,3.47,938,5.031,997,4.161,1036,4.161,1037,4.161,1038,4.161,1039,4.762,1040,5.297,1041,4.762,1042,4.762,1043,4.161,1044,4.762,1045,4.161,1046,4.161,1047,4.762,1048,4.161,1049,4.762]],["title/injectables/EventsService.html",[53,0.261,483,2.474]],["body/injectables/EventsService.html",[3,0.073,4,0.065,5,0.161,9,0.151,12,0.17,13,0.756,14,1.769,16,0.991,18,1.156,23,0.538,25,1.213,26,0.013,27,1.102,28,0.421,29,0.899,33,1.388,35,0.919,37,1.301,38,2.713,39,1.656,42,2.142,49,1.016,51,0.257,53,0.25,55,0.296,63,0.073,64,0.048,66,1.294,67,1.057,73,2.033,78,1.869,79,1.443,81,1.713,86,1.398,100,1.713,107,1.217,109,0.006,110,0.006,112,2.401,114,1.312,118,0.895,121,1.362,122,1.903,135,1.091,136,1.04,138,0.977,175,0.926,237,0.607,246,1.769,259,2.512,261,1.256,277,2.142,281,1.182,381,2.045,382,5.068,394,1.443,437,2.045,440,1.772,481,2.602,483,2.372,506,1.312,508,1.204,509,0.837,518,3.763,520,3.121,525,2.584,562,2.208,576,1.03,583,1.875,584,4.318,589,1.956,591,3.113,592,2.511,595,1.998,598,3.113,623,1.111,695,3.483,698,3.824,703,1.998,704,3.284,706,1.444,707,1.998,708,1.841,712,2.511,738,2.868,786,1.444,787,1.522,940,3.44,942,3.44,953,3.44,956,1.716,961,2.868,963,3.121,968,3.483,973,3.29,978,3.824,979,3.44,986,3.113,1000,1.716,1001,1.841,1029,1.375,1043,2.208,1050,2.208,1051,3.113,1052,2.527,1053,4.771,1054,3.87,1055,2.527,1056,4.836,1057,2.527,1058,2.527,1059,3.937,1060,2.527,1061,2.527,1062,2.527,1063,2.208,1064,1.998,1065,1.998,1066,3.113,1067,2.527,1068,2.208,1069,1.841,1070,2.527,1071,2.527,1072,5.918,1073,2.527,1074,3.937,1075,2.527,1076,3.937,1077,2.527,1078,3.937,1079,2.527,1080,3.937,1081,2.527,1082,3.937,1083,2.527,1084,2.527,1085,2.527,1086,2.527,1087,2.527,1088,2.527,1089,2.527,1090,2.527,1091,2.527,1092,2.527,1093,2.527,1094,2.527,1095,4.226,1096,2.527,1097,2.527,1098,2.527,1099,2.527,1100,2.527,1101,2.527,1102,3.937,1103,3.937,1104,3.937,1105,3.937,1106,3.937,1107,3.937,1108,3.937,1109,3.937,1110,3.113,1111,2.527,1112,2.527,1113,3.937,1114,2.527,1115,2.868,1116,1.998,1117,1.841,1118,1.998,1119,2.208,1120,2.527,1121,2.527,1122,2.527,1123,1.998]],["title/injectables/FindOneByIdProvider.html",[53,0.261,1124,2.619]],["body/injectables/FindOneByIdProvider.html",[3,0.13,4,0.116,5,0.116,9,0.358,12,0.302,13,1.149,14,1.614,16,0.922,18,1.514,23,0.544,25,1.225,26,0.013,27,1.006,28,0.425,29,0.908,33,1.225,35,1.22,37,1.149,45,2.235,51,0.254,53,0.38,55,0.527,63,0.13,64,0.128,66,1.112,67,0.983,78,2.047,79,1.58,81,2.117,86,1.152,100,1.593,105,2.847,107,0.837,109,0.009,110,0.009,121,1.891,122,2.272,135,1.015,175,1.648,225,2.71,237,1.081,246,1.614,281,1.35,394,1.58,440,1.648,446,3.054,481,3.274,508,2.142,509,1.49,568,2.869,570,4.045,576,2.437,577,2.571,578,2.71,805,4.487,834,3.277,846,3.557,847,3.557,848,3.557,849,3.277,850,3.557,851,3.557,852,3.557,1124,3.813,1125,4.892,1126,3.93,1127,5.657,1128,5.977,1129,4.498,1130,5.977,1131,4.498,1132,4.498,1133,4.059,1134,4.498]],["title/injectables/FindOneUserByEmailProvider.html",[53,0.261,1135,2.619]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.13,4,0.115,5,0.115,9,0.357,12,0.301,13,1.146,14,1.611,16,0.919,18,1.512,23,0.543,25,1.222,26,0.013,27,1.004,28,0.424,29,0.906,33,1.222,35,1.23,37,1.146,49,1.246,50,3.593,51,0.253,53,0.379,54,2.859,55,0.525,63,0.13,64,0.085,66,1.109,67,0.979,78,2.042,79,1.576,81,1.587,86,1.147,100,1.587,105,3.403,107,0.834,109,0.009,110,0.009,118,2.843,119,1.971,122,1.303,135,1.011,175,1.643,221,1.701,237,1.077,246,1.611,281,1.346,394,1.576,440,1.643,481,3.141,508,2.135,509,1.484,568,2.859,570,4.304,576,1.828,577,2.562,578,2.7,583,2.135,785,2.7,786,2.562,787,2.7,805,4.038,844,3.916,1117,3.266,1125,4.883,1127,5.649,1133,3.044,1135,3.804,1136,3.916,1137,5.211,1138,4.482,1139,5.211,1140,4.482,1141,3.544,1142,4.482]],["title/injectables/FindUserByResetOtpAndExpiryTimeProvider.html",[53,0.261,1143,2.619]],["body/injectables/FindUserByResetOtpAndExpiryTimeProvider.html",[3,0.126,4,0.112,5,0.112,9,0.351,11,2.991,12,0.294,13,1.126,14,1.589,16,0.895,18,1.496,23,0.533,25,1.201,26,0.013,27,0.986,28,0.416,29,0.89,33,1.201,35,1.209,37,1.126,49,1.23,51,0.251,53,0.372,54,2.784,55,0.512,63,0.126,64,0.126,66,1.09,67,0.954,78,2.006,79,1.548,81,1.546,82,2.63,86,1.118,100,1.546,105,3.367,107,0.812,109,0.008,110,0.008,135,0.985,161,2.655,175,1.6,237,1.049,246,1.589,255,3.772,256,1.996,281,1.311,394,1.548,440,1.6,481,3.242,508,2.079,509,1.446,568,2.784,570,3.985,576,1.78,577,2.495,578,2.63,580,2.964,581,3.181,583,2.079,623,1.919,628,4.8,1125,4.819,1127,5.589,1141,3.452,1143,3.737,1144,5.266,1145,3.814,1146,5.589,1147,5.12,1148,4.365,1149,5.12,1150,4.365,1151,4.365,1152,4.365,1153,4.365,1154,5.859,1155,4.365,1156,4.365]],["title/classes/ForgotPassswordDto.html",[64,0.078,252,2.619]],["body/classes/ForgotPassswordDto.html",[3,0.164,4,0.146,5,0.146,9,0.415,12,0.382,23,0.516,26,0.012,28,0.403,35,1.017,49,1.29,51,0.246,63,0.164,64,0.132,109,0.01,110,0.01,117,2.082,118,2.917,130,1.65,221,2.631,252,4.423,262,2.827,269,5.052,317,1.88,391,5.483,585,2.08,588,2.541,590,4.178,615,2.948,658,3.303,664,2.154,671,3.446,774,5.052,775,4.136,1157,4.488,1158,4.96,1159,4.96]],["title/injectables/ForgotPasswordProvider.html",[53,0.261,355,2.619]],["body/injectables/ForgotPasswordProvider.html",[3,0.115,4,0.103,5,0.103,9,0.239,11,2.333,12,0.268,13,1.059,14,1.518,16,1.294,18,1.441,23,0.501,25,1.13,26,0.013,27,0.928,28,0.392,29,0.837,33,1.13,35,0.998,37,1.059,42,3.436,51,0.269,52,2.073,53,0.35,55,0.468,63,0.115,64,0.076,66,1.267,67,1.38,73,1.896,78,1.366,79,1.055,81,1.413,86,1.617,100,1.413,107,0.742,109,0.008,110,0.008,118,2.683,135,1.424,136,1.457,161,1.366,221,2.092,237,0.959,246,1.518,247,4.359,251,4.359,252,4.344,255,3.384,256,1.825,259,3.28,260,5.518,261,1.983,264,2.281,269,4.016,270,4.359,281,1.198,308,3.487,309,2.908,354,4.009,355,3.516,361,2.404,394,1.457,440,1.463,458,2.404,466,2.908,467,3.151,482,3.53,510,2.404,565,2.908,576,1.627,580,2.71,583,1.901,699,3.156,830,4.2,837,2.908,839,2.908,841,3.156,843,3.156,860,3.156,1063,3.487,1133,2.71,1160,5.518,1161,3.991,1162,3.991,1163,4.817,1164,3.991,1165,5.385,1166,3.487,1167,3.991,1168,3.991,1169,3.991,1170,3.487,1171,3.487,1172,3.991,1173,3.991,1174,3.991,1175,4.817,1176,3.487,1177,3.991,1178,3.156,1179,3.487,1180,3.991,1181,3.991,1182,3.991,1183,3.991]],["title/injectables/GenerateTicketPdfProvider.html",[53,0.261,1184,2.619]],["body/injectables/GenerateTicketPdfProvider.html",[3,0.082,4,0.073,5,0.073,9,0.17,12,0.191,13,0.827,14,1.578,16,1.066,23,0.392,25,0.882,26,0.013,27,0.725,28,0.485,29,0.654,33,0.882,37,0.999,38,2.139,49,1.221,51,0.249,53,0.273,55,0.333,63,0.082,64,0.099,66,0.528,73,2.39,76,1.81,79,1.137,86,1.597,95,2.479,107,0.8,109,0.006,110,0.006,121,0.799,122,1.512,208,2.479,237,0.682,246,1.25,258,2.923,281,0.852,394,1.137,446,2.923,452,2.068,467,2.46,476,2.383,525,0.972,547,2.745,764,2.479,973,1.71,1017,5.247,1018,1.927,1025,1.71,1184,2.745,1185,4.544,1186,2.479,1187,4.304,1188,3.761,1189,4.304,1190,2.837,1191,2.923,1192,5.2,1193,4.544,1194,2.745,1195,5.071,1196,4.304,1197,3.761,1198,2.837,1199,4.304,1200,4.229,1201,4.304,1202,4.304,1203,2.837,1204,2.837,1205,2.479,1206,4.304,1207,3.136,1208,3.761,1209,2.479,1210,2.068,1211,2.479,1212,3.136,1213,2.837,1214,3.136,1215,2.923,1216,2.837,1217,2.837,1218,2.837,1219,2.837,1220,2.837,1221,2.837,1222,2.837,1223,2.837,1224,2.837,1225,2.837,1226,2.837,1227,2.837,1228,2.837,1229,2.837,1230,2.837,1231,2.837,1232,2.837,1233,2.837,1234,2.837,1235,6.823,1236,2.837,1237,2.837,1238,2.837,1239,6.238,1240,2.837,1241,4.304,1242,2.837,1243,2.837,1244,2.837,1245,2.837,1246,5.2,1247,2.837,1248,2.837,1249,4.304,1250,5.2,1251,7.727,1252,5.2,1253,5.2,1254,5.2,1255,5.2,1256,2.837,1257,2.837,1258,4.112,1259,7.649,1260,2.837,1261,4.304,1262,2.837,1263,2.837,1264,2.837,1265,2.837,1266,2.837,1267,2.244,1268,2.837,1269,7.457,1270,2.837,1271,2.837,1272,2.479,1273,2.837,1274,7.197,1275,2.837,1276,6.238,1277,2.837,1278,6.238,1279,6.823,1280,2.837,1281,2.837,1282,2.837,1283,7.028,1284,2.837,1285,2.837,1286,2.837,1287,3.761,1288,2.837,1289,2.837,1290,2.837,1291,2.837,1292,2.837,1293,2.837,1294,2.837,1295,2.837,1296,2.837,1297,2.837,1298,2.837,1299,4.304,1300,2.837,1301,2.837,1302,4.304,1303,2.837,1304,2.837,1305,2.837,1306,2.837,1307,2.837,1308,2.837,1309,2.837,1310,4.304,1311,2.479,1312,2.837,1313,2.837,1314,2.837,1315,2.837,1316,4.304,1317,4.304,1318,2.837,1319,2.837,1320,2.837,1321,2.837,1322,2.837,1323,2.837,1324,2.837,1325,2.837]],["title/injectables/GenerateTokensProvider.html",[53,0.261,356,2.474]],["body/injectables/GenerateTokensProvider.html",[3,0.178,4,0.098,5,0.098,9,0.228,10,3.354,11,2.261,12,0.257,13,1.027,14,1.751,16,1.095,18,1.414,19,3.017,20,5.915,21,5.281,22,4.867,23,0.561,25,1.369,26,0.013,27,1.038,28,0.475,29,0.936,33,1.369,35,1.165,37,1.283,51,0.258,52,1.982,53,0.339,55,0.447,56,1.817,57,2.433,59,2.591,63,0.11,64,0.073,66,1.355,67,1.167,68,4.536,69,1.982,70,3.017,73,1.145,83,5.915,86,1.368,107,0.994,109,0.008,110,0.008,112,1.677,118,1.351,119,1.677,120,3.017,121,2.052,135,1.205,136,1.008,237,0.917,246,1.751,274,3.932,276,4.948,281,1.604,290,4.668,294,3.628,323,4.224,325,3.893,356,3.219,371,3.017,394,1.412,413,3.407,467,3.054,506,1.982,932,2.433,1191,4.536,1326,5.836,1327,3.334,1328,5.342,1329,5.342,1330,3.815,1331,5.342,1332,3.815,1333,5.342,1334,7.031,1335,5.281,1336,3.815,1337,3.932,1338,3.017,1339,5.342,1340,5.342,1341,3.334,1342,3.815,1343,3.334,1344,3.334,1345,3.334,1346,3.334,1347,3.334,1348,3.334,1349,3.334,1350,3.815,1351,3.334,1352,3.815,1353,3.017,1354,3.017,1355,3.815,1356,3.815]],["title/classes/GetEventsBaseDto.html",[64,0.078,1357,2.992]],["body/classes/GetEventsBaseDto.html",[3,0.12,4,0.107,5,0.107,9,0.249,12,0.28,23,0.697,26,0.013,27,1.221,28,0.562,29,1.251,49,1.487,51,0.229,63,0.12,64,0.123,109,0.008,110,0.008,117,1.704,130,2.227,317,1.379,497,3.947,518,3.353,525,2.738,585,1.526,588,2.366,592,4.886,608,5.286,609,3.853,622,3.619,623,3.549,631,3.087,656,4.384,659,4.697,660,4.279,664,1.58,963,2.379,1357,4.703,1358,5.681,1359,3.292,1360,4.134,1361,4.486,1362,4.703,1363,4.703,1364,7.254,1365,4.163,1366,4.163,1367,4.163,1368,4.958,1369,4.163,1370,4.163,1371,4.163,1372,4.163,1373,4.134,1374,3.243,1375,2.655,1376,2.827,1377,2.827]],["title/classes/GetEventsDto.html",[64,0.078,963,2.347]],["body/classes/GetEventsDto.html",[3,0.146,4,0.13,5,0.13,9,0.303,26,0.013,27,1.086,28,0.359,49,1.438,51,0.252,63,0.146,64,0.135,109,0.009,110,0.009,317,1.675,497,3.511,518,3.691,525,2.647,585,1.854,588,2.604,592,4.532,608,4.702,609,3.436,622,3.227,623,3.399,631,2.753,656,4.826,659,4.901,660,4.519,664,1.92,963,3.689,1357,5.178,1358,3.686,1359,4,1360,3.686,1361,4,1362,3.686,1363,3.686,1373,5.178,1374,4.062,1375,3.227,1376,3.436,1377,4.382]],["title/injectables/GetUserEventsProvider.html",[53,0.261,1040,2.619]],["body/injectables/GetUserEventsProvider.html",[3,0.118,4,0.105,5,0.105,9,0.244,12,0.274,13,1.075,14,1.534,16,1.309,18,1.454,23,0.509,25,1.146,26,0.013,27,0.941,28,0.397,29,0.849,33,1.146,35,1.154,37,1.075,38,2.779,49,1.187,51,0.275,53,0.355,55,0.478,63,0.118,64,0.122,66,1.339,67,1.395,73,1.679,78,1.395,79,1.077,81,1.443,86,1.432,100,1.443,107,0.758,109,0.008,110,0.008,122,1.185,135,1.44,136,1.077,175,1.493,237,0.979,246,1.534,256,1.864,277,3.043,381,2.904,394,1.687,440,1.493,481,3.166,482,3.548,508,1.941,509,1.349,510,2.455,518,4.088,525,1.395,576,1.662,583,1.941,708,2.969,712,2.599,860,3.222,963,3.927,968,2.599,973,2.455,978,5.433,1000,2.767,1001,2.969,1029,2.217,1040,3.567,1053,5.578,1054,4.434,1064,3.222,1065,3.222,1068,3.561,1115,4.075,1118,3.222,1119,3.561,1337,4.382,1378,5.048,1379,3.561,1380,6.384,1381,4.075,1382,4.075,1383,4.075,1384,4.075,1385,4.075,1386,3.561,1387,4.075,1388,4.075]],["title/classes/GetUsersBaseDto.html",[64,0.078,1389,2.992]],["body/classes/GetUsersBaseDto.html",[3,0.151,4,0.134,5,0.134,9,0.313,12,0.352,23,0.599,26,0.013,28,0.468,29,1.15,35,1.058,51,0.256,63,0.19,64,0.152,109,0.009,110,0.009,117,1.978,130,1.916,317,1.731,585,1.916,588,2.644,622,4.202,623,3.6,631,3.585,656,4.899,659,4.347,664,1.984,784,3.809,1360,4.801,1362,5.257,1363,5.257,1368,5.757,1373,4.801,1374,3.766,1375,3.334,1376,3.55,1377,3.55,1389,5.257,1390,5.705,1391,5.227,1392,5.227,1393,3.334]],["title/classes/GetUsersDto.html",[64,0.078,1393,2.619]],["body/classes/GetUsersDto.html",[3,0.161,4,0.143,5,0.143,9,0.333,26,0.013,35,1.088,51,0.263,63,0.198,64,0.154,109,0.01,110,0.01,317,1.842,585,2.039,588,2.72,622,3.548,623,3.405,631,3.027,656,5.039,659,4.471,664,2.111,784,4.054,1360,4.054,1362,4.054,1363,4.054,1373,5.407,1374,4.241,1375,3.548,1376,3.778,1377,4.651,1389,5.407,1390,4.399,1393,4.368]],["title/injectables/HashingProvider.html",[53,0.261,354,2.133]],["body/injectables/HashingProvider.html",[3,0.146,4,0.13,5,0.13,9,0.303,12,0.34,13,1.24,23,0.587,25,1.323,26,0.013,27,1.086,28,0.459,29,0.98,37,1.24,38,3.719,49,1.528,51,0.179,53,0.41,55,0.593,63,0.146,64,0.135,66,1.322,109,0.009,110,0.009,237,1.216,354,3.352,394,1.705,449,6.209,450,5.639,451,4.421,452,5.76,453,6.54,455,5.639,459,4.658,462,5.639,464,5.453,1394,4.421,1395,8.415,1396,5.059,1397,6.54,1398,5.059]],["title/modules/MailModule.html",[138,1.019,152,2.619]],["body/modules/MailModule.html",[3,0.133,4,0.119,5,0.119,14,1.109,26,0.013,35,0.676,39,2.081,40,2.673,51,0.273,52,3.157,55,0.541,56,2.198,63,0.133,64,0.088,69,3.157,79,1.219,107,0.858,109,0.009,110,0.009,136,1.219,138,1.95,140,2.028,141,2.028,142,2.198,143,2.198,144,2.028,145,3.238,146,3.238,152,5.015,160,2.895,161,1.58,162,2.11,164,2.51,167,4.336,211,5.312,217,4.031,223,4.031,245,2.293,264,2.637,415,3.648,419,2.943,426,4.031,830,4.498,1110,3.648,1115,3.362,1207,3.362,1399,4.031,1400,4.031,1401,4.031,1402,4.613,1403,6.079,1404,4.613,1405,4.613,1406,4.429,1407,3.648,1408,6.079,1409,4.613,1410,4.613,1411,4.613,1412,4.031,1413,4.613,1414,5.312,1415,4.613,1416,6.079,1417,6.079,1418,6.079,1419,4.613,1420,4.613,1421,4.613,1422,4.613,1423,4.613,1424,4.613,1425,4.613,1426,4.031,1427,4.613,1428,4.613,1429,4.613,1430,4.613,1431,4.613,1432,4.613]],["title/injectables/MailService.html",[53,0.261,830,2.234]],["body/injectables/MailService.html",[3,0.092,4,0.082,5,0.082,9,0.19,12,0.213,13,0.899,14,1.861,16,0.651,18,1.299,23,0.595,25,1.341,26,0.013,27,1.192,28,0.465,29,0.994,33,1.49,35,1.211,36,4.167,37,1.179,38,3.611,49,1.38,51,0.251,53,0.297,55,0.372,63,0.092,64,0.06,66,1.352,79,0.839,86,1.571,109,0.007,110,0.007,118,1.969,122,0.923,135,0.716,136,1.469,138,1.161,161,1.904,221,1.205,237,0.763,246,1.861,255,3.611,264,4.313,294,3.179,476,2.534,498,2.993,518,1.649,525,1.087,551,4.397,771,3.913,786,1.814,830,2.547,932,2.025,1163,6.35,1207,3.411,1210,2.313,1211,2.774,1212,2.313,1214,4.768,1215,2.156,1311,2.774,1353,5.174,1406,2.313,1407,2.51,1414,2.774,1426,5.362,1433,2.774,1434,4.681,1435,4.681,1436,5.56,1437,4.681,1438,3.174,1439,7.081,1440,3.174,1441,4.681,1442,3.174,1443,4.681,1444,3.174,1445,4.681,1446,4.859,1447,3.174,1448,4.852,1449,3.174,1450,4.09,1451,4.681,1452,3.174,1453,3.174,1454,3.174,1455,6.137,1456,6.847,1457,3.174,1458,6.137,1459,6.137,1460,4.681,1461,3.174,1462,2.774,1463,6.137,1464,3.174,1465,4.859,1466,3.174,1467,3.174,1468,2.51,1469,3.174,1470,2.774,1471,3.174,1472,3.174,1473,4.681,1474,3.174,1475,3.174,1476,3.174,1477,2.51,1478,3.174,1479,3.174,1480,3.174,1481,3.174,1482,3.174]],["title/interfaces/Paginated.html",[111,2.788,1029,2.234]],["body/interfaces/Paginated.html",[3,0.155,4,0.138,5,0.138,9,0.321,12,0.361,26,0.012,28,0.579,49,1.464,63,0.155,94,3.915,109,0.01,110,0.01,111,4.552,113,4.248,117,2.012,121,2.154,428,4.552,459,5.035,792,4.248,795,4.248,869,3.915,970,5.3,1029,3.975,1197,6.684,1335,5.777,1483,4.695,1484,4.695,1485,7.015,1486,6.684,1487,6.703,1488,6.703,1489,4.695,1490,4.695,1491,4.695,1492,4.695,1493,4.695,1494,4.695]],["title/modules/PaginationModule.html",[138,1.019,153,2.474]],["body/modules/PaginationModule.html",[3,0.169,4,0.15,5,0.15,26,0.012,51,0.25,55,0.684,63,0.169,64,0.111,109,0.01,110,0.01,138,1.88,140,2.565,141,2.565,142,2.779,143,2.779,144,2.565,145,3.609,146,3.609,153,4.991,160,3.358,161,1.998,162,2.668,1054,4.877,1495,5.098,1496,5.098,1497,5.098,1498,5.834,1499,5.834]],["title/injectables/PaginationProvider.html",[53,0.261,1054,2.347]],["body/injectables/PaginationProvider.html",[3,0.11,4,0.098,5,0.098,9,0.227,12,0.255,13,1.023,14,1.478,16,0.779,18,1.411,23,0.484,25,1.261,26,0.013,27,0.896,28,0.437,29,0.809,33,1.092,37,1.023,38,2.646,45,3.944,51,0.258,52,2.766,53,0.338,55,0.445,58,2.767,63,0.11,64,0.072,66,1.24,67,0.83,73,2.289,79,1.004,86,1.363,94,2.767,107,0.706,109,0.01,110,0.008,135,0.857,184,2.579,237,0.913,246,1.478,394,1.625,428,3.616,437,1.973,459,3.705,481,3.353,509,1.258,522,3.208,547,4.252,715,3.208,792,3.003,795,3.003,805,3.208,1029,2.898,1051,4.211,1054,3.044,1069,3.88,1115,4.857,1116,3.003,1117,2.767,1335,3.003,1338,3.003,1374,3.81,1376,2.579,1448,3.003,1484,5.825,1485,5.374,1486,3.319,1489,3.319,1490,5.374,1491,3.319,1492,5.825,1493,3.319,1494,3.319,1500,3.319,1501,7.276,1502,3.798,1503,3.798,1504,3.798,1505,3.798,1506,5.325,1507,3.798,1508,3.798,1509,3.798,1510,3.798,1511,3.798,1512,3.798,1513,5.325,1514,5.325,1515,7.625,1516,6.666,1517,5.325,1518,3.798,1519,3.798,1520,3.798,1521,5.325,1522,3.798,1523,3.798,1524,3.798,1525,3.798,1526,3.798,1527,3.798,1528,3.798,1529,3.798,1530,3.798,1531,5.325,1532,3.798,1533,3.798,1534,3.798,1535,3.798,1536,3.798]],["title/classes/PaginationQueryDto.html",[64,0.078,1374,2.347]],["body/classes/PaginationQueryDto.html",[3,0.154,4,0.137,5,0.137,9,0.319,12,0.359,23,0.607,26,0.012,28,0.474,29,1.159,51,0.189,63,0.154,64,0.127,109,0.01,110,0.01,117,2.004,121,2.315,130,1.941,322,3.816,419,4.258,547,4.258,585,1.957,588,2.447,659,4.389,664,2.026,715,4.022,759,5.834,968,5.012,973,4.734,1069,4.865,1374,3.816,1375,4.646,1537,4.665,1538,6.676,1539,6.676,1540,5.338,1541,7.632,1542,5.338,1543,7.284]],["title/classes/PatchTicketDto.html",[64,0.078,519,2.347]],["body/classes/PatchTicketDto.html",[3,0.159,4,0.141,5,0.141,9,0.406,12,0.369,23,0.499,26,0.012,28,0.39,51,0.262,63,0.159,64,0.147,109,0.01,110,0.01,117,2.04,121,1.913,122,2.378,130,1.596,262,2.77,298,4.613,317,1.818,437,2.852,476,2.673,491,4.333,519,3.883,585,2.012,588,2.49,615,2.852,658,3.236,664,2.084,668,3.502,670,4.341,671,3.376,781,4.613,1377,4.613,1544,5.936,1545,4.797,1546,6.793,1547,5.49,1548,5.49,1549,5.49,1550,5.49]],["title/entities/Payment.html",[732,1.878,935,2.04]],["body/entities/Payment.html",[3,0.116,4,0.103,5,0.103,9,0.241,12,0.271,23,0.73,26,0.013,27,1.067,28,0.575,29,0.842,39,2.34,40,3.004,49,1.378,50,3.82,51,0.225,63,0.116,64,0.077,109,0.008,110,0.008,117,1.664,121,2.178,122,2.084,130,2.332,321,3.624,394,1.676,419,3.535,476,2.263,498,2.9,509,1.332,520,3.624,623,3.004,676,4.358,732,3.125,887,2.566,889,5.014,890,5.014,891,2.732,893,4.306,897,5.252,900,5.014,910,4.306,914,2.424,927,5.014,935,3.396,1025,3.339,1194,2.566,1215,4.306,1258,4.383,1337,4.045,1551,3.515,1552,5.541,1553,5.541,1554,5.542,1555,5.542,1556,5.542,1557,4.023,1558,5.541,1559,4.023,1560,4.023,1561,4.023,1562,4.023,1563,4.023,1564,4.023,1565,4.023,1566,5.667,1567,4.023,1568,4.023,1569,5.542,1570,4.843,1571,5.542,1572,4.023,1573,4.023,1574,4.023,1575,5.542,1576,5.542,1577,4.023,1578,4.023,1579,3.515,1580,4.023,1581,5.542]],["title/classes/PaymentDto.html",[64,0.078,488,2.347]],["body/classes/PaymentDto.html",[3,0.133,4,0.119,5,0.119,9,0.449,12,0.31,23,0.553,26,0.013,28,0.587,39,1.58,51,0.256,63,0.133,64,0.15,109,0.009,110,0.009,117,1.825,121,1.914,122,2.101,130,1.767,262,3.144,298,3.133,317,1.528,476,2.673,488,3.474,498,2.11,519,3.886,520,3.886,525,2.474,585,1.691,588,2.648,615,3.157,646,3.648,655,4.429,658,3.577,663,4.429,664,1.751,667,2.943,671,3.732,692,4.128,694,3.362,781,4.617,935,3.021,1025,2.78,1582,3.648,1583,5.941,1584,4.613,1585,4.613,1586,5.265,1587,4.613,1588,4.613,1589,4.031,1590,3.648,1591,4.031,1592,4.031,1593,5.312,1594,4.031,1595,4.031,1596,4.031]],["title/modules/PaymentsModule.html",[138,1.019,154,2.788]],["body/modules/PaymentsModule.html",[3,0.168,4,0.15,5,0.15,26,0.012,51,0.279,55,0.682,63,0.168,64,0.111,109,0.01,110,0.01,138,1.878,140,2.559,141,2.559,142,2.773,143,2.773,144,2.559,145,3.606,146,2.773,154,5.558,160,3.354,161,1.993,162,2.662,164,3.167,174,3.713,175,2.133,935,2.892,1597,5.086,1598,5.086,1599,5.558,1600,5.821,1601,5.821,1602,5.821,1603,5.821]],["title/injectables/PaymentsService.html",[53,0.261,1599,2.788]],["body/injectables/PaymentsService.html",[3,0.183,4,0.163,5,0.163,9,0.379,26,0.012,51,0.225,53,0.47,55,0.743,63,0.183,64,0.121,109,0.011,110,0.011,136,1.956,237,1.522,935,3.679,1599,5.028,1604,5.535]],["title/controllers/PaystackController.html",[123,1.738,1605,2.992]],["body/controllers/PaystackController.html",[3,0.089,4,0.079,5,0.079,9,0.44,11,1.301,12,0.207,13,0.878,14,1.311,16,0.63,18,0.651,23,0.416,25,0.937,26,0.013,27,1.017,28,0.481,29,0.829,33,0.937,35,1.128,37,1.161,39,2.211,40,1.351,45,3.002,48,2.43,49,1.015,51,0.265,55,0.36,63,0.089,64,0.059,66,1.201,67,0.672,76,2.915,82,2.753,84,4.102,104,5.541,107,0.85,109,0.007,110,0.007,112,2.656,114,1.596,119,1.351,122,1.967,123,2.309,125,1.301,128,3.89,130,1.329,135,0.693,136,1.706,244,1.96,245,1.527,246,1.311,253,3.104,258,4.102,261,2.711,262,2.463,265,4.316,266,4.102,281,0.923,295,3.515,296,2.686,297,2.43,299,1.96,305,1.757,307,2.374,313,3.48,314,3.48,315,3.48,316,1.96,317,1.018,320,3.868,321,3.118,322,3.453,326,3.104,329,3.104,330,3.104,331,3.104,333,2.087,334,2.686,411,1.96,476,2.574,488,4.205,492,3.993,506,1.596,520,1.757,521,4.767,525,2.211,652,4.402,692,3.705,815,1.96,852,4.314,935,2.711,947,3.993,948,2.686,990,3.104,991,2.087,992,2.43,994,3.33,1002,2.239,1003,2.087,1015,3.33,1016,2.087,1017,2.087,1018,3.104,1191,3.104,1605,3.33,1606,2.686,1607,6.428,1608,5.456,1609,5.456,1610,3.073,1611,5.913,1612,4.57,1613,3.993,1614,3.614,1615,3.073,1616,6.041,1617,3.073,1618,3.073,1619,6.041,1620,5.456,1621,3.073,1622,4.57,1623,3.073,1624,3.073,1625,3.073,1626,3.073,1627,3.48,1628,2.686,1629,2.686,1630,2.686,1631,3.073,1632,3.073,1633,3.104,1634,3.614,1635,3.073,1636,3.073,1637,3.073,1638,3.073,1639,3.073,1640,3.073,1641,2.686,1642,3.073,1643,2.43,1644,3.073,1645,3.073,1646,3.073]],["title/modules/PaystackModule.html",[138,1.019,155,2.788]],["body/modules/PaystackModule.html",[3,0.155,4,0.138,5,0.138,26,0.012,51,0.289,55,0.629,56,2.554,63,0.155,64,0.102,109,0.01,110,0.01,125,2.833,138,1.81,140,2.357,141,2.357,142,2.554,143,2.554,144,2.357,145,3.476,146,2.554,155,5.674,157,5.117,158,4.834,160,3.188,161,1.836,162,2.452,164,3.642,166,4.239,1045,4.685,1605,5.318,1627,5.117,1628,4.685,1647,4.685,1648,4.685,1649,5.361,1650,5.361,1651,5.361,1652,4.685,1653,4.685,1654,5.361,1655,5.361]],["title/injectables/PaystackService.html",[53,0.261,1627,2.619]],["body/injectables/PaystackService.html",[3,0.056,4,0.05,5,0.05,9,0.311,10,1.738,12,0.131,13,0.614,14,1.615,16,1.307,18,0.995,22,3.426,23,0.472,25,0.964,26,0.013,27,0.791,28,0.369,29,0.714,33,1.262,35,1.006,37,1.183,42,1.738,48,2.525,49,1.096,51,0.252,52,1.011,53,0.203,55,0.228,56,0.927,63,0.056,64,0.037,66,1.25,67,1.219,69,1.659,73,2.06,76,2.999,78,2.301,79,1.776,81,2.088,86,1.995,100,2.088,104,3.718,107,0.874,109,0.005,110,0.005,112,2.067,114,1.011,118,0.689,121,0.548,135,1.259,136,1.475,138,0.792,167,3.926,237,0.468,245,1.587,246,1.532,259,1.011,261,0.967,264,1.112,281,1.22,295,2.11,297,1.539,321,2.322,381,1.659,394,0.514,423,1.7,428,1.321,430,1.539,437,2.11,440,2.045,444,2.525,446,1.321,458,1.172,459,2.448,476,1.058,487,2.327,488,2.687,498,3,503,1.539,504,1.418,506,1.011,509,0.644,513,1.241,515,1.321,520,1.112,525,1.391,539,1.7,542,1.539,548,1.539,551,4.412,576,0.793,588,0.713,631,2.558,700,5.996,701,3.708,709,1.7,710,1.539,715,2.833,716,4.109,717,2.791,718,4.109,719,2.791,720,4.537,721,2.791,722,4.109,726,2.525,738,3.783,739,1.7,740,1.7,741,2.791,742,1.7,743,2.791,745,1.7,746,1.539,747,2.791,748,2.791,749,2.791,750,4.109,751,2.791,752,2.791,753,4.876,754,4.537,755,2.791,830,3.349,837,1.418,857,1.7,869,2.327,929,1.418,935,3.807,1015,3.426,1016,1.321,1123,1.539,1165,3.212,1178,1.539,1193,2.791,1200,1.418,1214,3.783,1215,2.169,1267,1.539,1337,1.241,1349,2.791,1448,3.212,1450,2.791,1470,1.7,1477,1.539,1552,1.7,1553,2.791,1566,1.539,1579,1.7,1607,5.57,1611,4.876,1613,2.791,1614,2.525,1627,2.037,1630,1.7,1641,4.876,1643,2.525,1652,1.7,1653,1.7,1656,1.7,1657,4.702,1658,3.194,1659,3.194,1660,3.194,1661,1.946,1662,3.708,1663,1.946,1664,4.062,1665,1.946,1666,3.194,1667,1.946,1668,3.194,1669,3.194,1670,3.194,1671,1.946,1672,2.791,1673,3.194,1674,1.946,1675,3.194,1676,3.194,1677,2.791,1678,1.946,1679,1.946,1680,1.946,1681,1.946,1682,1.946,1683,3.194,1684,1.7,1685,1.946,1686,1.946,1687,1.946,1688,1.946,1689,1.946,1690,1.946,1691,1.946,1692,1.946,1693,1.946,1694,1.946,1695,1.7,1696,1.946,1697,3.194,1698,3.194,1699,1.946,1700,1.946,1701,1.946,1702,1.946,1703,3.212,1704,4.062,1705,4.062,1706,1.946,1707,3.194,1708,1.946,1709,3.194,1710,1.946,1711,1.946,1712,1.946,1713,1.946,1714,1.946,1715,1.946,1716,3.194,1717,1.946,1718,1.7,1719,3.194,1720,3.194,1721,1.7,1722,2.791,1723,1.946,1724,1.946,1725,1.946,1726,3.194,1727,1.946,1728,1.946,1729,1.946,1730,1.946,1731,1.946,1732,1.946,1733,1.946,1734,1.946,1735,1.946,1736,1.946,1737,2.525,1738,1.946,1739,1.946,1740,3.194,1741,1.946,1742,1.946,1743,3.194,1744,3.194,1745,1.946,1746,1.946,1747,1.946,1748,1.946,1749,1.946,1750,1.946]],["title/classes/RefreshTokenDto.html",[64,0.078,272,2.619]],["body/classes/RefreshTokenDto.html",[3,0.164,4,0.146,5,0.146,9,0.415,11,3.443,12,0.382,23,0.516,26,0.012,28,0.403,49,1.29,51,0.246,63,0.164,64,0.132,109,0.01,110,0.01,117,2.082,130,1.65,262,2.827,272,4.423,274,5.189,317,1.88,325,5.455,393,5.483,585,2.08,588,2.541,615,2.948,658,3.303,660,3.963,664,2.154,671,3.446,1751,4.96,1752,5.676,1753,5.676,1754,5.676]],["title/injectables/RefreshTokenProvider.html",[53,0.261,357,2.619]],["body/injectables/RefreshTokenProvider.html",[3,0.113,4,0.101,5,0.101,9,0.234,10,3.676,11,3.252,12,0.263,13,1.045,14,1.503,16,1.385,18,1.43,19,3.097,20,6.076,21,5.341,22,4.922,23,0.495,25,1.115,26,0.013,27,0.916,28,0.387,29,0.826,33,1.115,35,0.917,37,1.045,51,0.272,52,2.034,53,0.346,54,2.498,55,0.459,56,1.865,57,2.498,59,2.659,63,0.113,64,0.075,66,1.32,67,1.476,68,3.695,69,2.034,70,3.097,73,1.633,78,1.341,79,1.652,81,1.387,86,1.601,100,1.387,105,1.865,107,0.728,109,0.008,110,0.008,112,1.722,120,3.097,122,1.139,135,1.524,136,1.035,237,0.941,246,1.503,248,4.302,271,4.302,272,4.686,274,4.806,276,2.659,281,1.176,311,3.422,312,3.097,356,4.07,357,3.47,361,2.359,370,3.097,371,3.097,394,1.652,413,3.988,440,1.435,458,2.359,467,4.057,482,3.613,506,2.034,510,2.359,548,3.097,839,2.854,1141,3.097,1341,3.422,1343,3.422,1344,3.422,1345,3.422,1346,3.422,1347,3.422,1348,3.422,1755,5.463,1756,3.422,1757,5.44,1758,5.903,1759,3.916,1760,3.916,1761,5.44,1762,3.916,1763,3.916,1764,3.916,1765,3.916,1766,3.422,1767,3.916]],["title/classes/ResetPasswordDto.html",[64,0.078,283,2.619]],["body/classes/ResetPasswordDto.html",[3,0.151,4,0.134,5,0.134,9,0.432,12,0.352,23,0.599,26,0.012,28,0.468,35,0.966,49,1.225,51,0.234,63,0.151,64,0.126,79,2.002,109,0.009,110,0.009,117,1.978,121,1.855,130,1.916,161,2.73,221,3.177,255,4.022,262,3.089,283,4.202,317,1.731,392,5.705,585,1.916,588,2.415,615,3.422,658,3.437,660,3.766,664,1.984,671,3.585,781,4.474,819,4.134,1157,4.134,1159,4.568,1768,5.227,1769,5.227,1770,5.227,1771,5.227]],["title/injectables/ResetPasswordProvider.html",[53,0.261,358,2.619]],["body/injectables/ResetPasswordProvider.html",[3,0.126,4,0.112,5,0.112,9,0.262,11,1.851,12,0.294,13,1.127,14,1.591,16,1.202,18,1.497,23,0.534,25,1.202,26,0.013,27,0.987,28,0.417,29,0.891,33,1.202,35,0.97,37,1.127,42,3.192,51,0.262,53,0.373,55,0.513,63,0.126,64,0.083,66,1.231,67,1.282,73,1.987,86,1.695,105,2.083,107,0.813,109,0.008,110,0.008,135,1.323,136,1.156,161,2.526,221,2.993,237,1.051,246,1.591,249,4.638,255,2.915,256,2,259,3.438,261,3.289,281,1.313,282,4.638,283,4.844,309,3.186,310,3.821,354,4.03,358,3.741,387,5.126,394,1.55,466,3.186,482,3.606,510,2.635,522,2.635,565,3.186,566,3.458,843,3.458,904,4.274,1165,5.234,1166,3.821,1175,3.821,1176,3.821,1178,3.458,1737,3.458,1772,5.784,1773,4.373,1774,4.373,1775,4.373,1776,5.866,1777,4.373,1778,4.373,1779,4.373,1780,5.866,1781,4.373,1782,4.373,1783,4.373,1784,4.373,1785,3.821]],["title/guards/RolesGuard.html",[0,2.474,193,2.992]],["body/guards/RolesGuard.html",[0,3.547,2,3.203,3,0.127,4,0.113,5,0.113,9,0.263,10,3.203,12,0.296,13,1.131,15,5.605,16,0.901,18,1.405,23,0.536,25,1.207,26,0.013,27,1.117,28,0.418,29,0.894,30,4.655,31,4.814,33,1.207,35,1.039,36,3.997,37,1.131,39,2.427,40,2.588,41,5.144,42,3.203,51,0.251,53,0.374,55,0.515,63,0.127,64,0.112,65,2.985,66,1.095,67,0.961,73,1.993,74,3.841,78,2.015,79,1.556,107,1.095,109,0.008,110,0.008,119,3.63,184,2.985,193,4.289,256,2.692,307,2.283,402,5.144,404,3.841,405,6.788,413,2.804,414,3.841,415,3.476,416,3.841,417,3.841,418,3.841,434,3.841,435,3.841,815,2.804,1123,3.476,1354,3.476,1786,3.841,1787,4.396,1788,4.396,1789,5.886,1790,5.144,1791,5.886,1792,5.886,1793,5.144,1794,5.886,1795,3.476,1796,4.396,1797,4.396,1798,4.396,1799,4.396,1800,5.886,1801,4.396,1802,4.396,1803,4.396,1804,5.886,1805,4.396,1806,4.396,1807,4.396]],["title/classes/SignInDto.html",[64,0.078,289,2.619]],["body/classes/SignInDto.html",[3,0.154,4,0.137,5,0.137,9,0.435,12,0.358,23,0.606,26,0.012,28,0.473,35,1.117,49,1.417,51,0.236,63,0.154,64,0.127,109,0.01,110,0.01,117,1.999,118,2.877,130,1.936,221,3.083,262,3.107,289,4.247,294,4.522,317,1.76,390,5.749,585,1.948,588,2.44,590,4.012,615,3.458,658,3.463,660,3.806,664,2.017,671,3.613,774,4.852,775,3.873,819,4.203,1158,4.645,1808,4.645,1809,5.316,1810,5.316,1811,5.316]],["title/injectables/SignInProvider.html",[53,0.261,359,2.619]],["body/injectables/SignInProvider.html",[3,0.114,4,0.102,5,0.102,9,0.328,10,3.421,11,2.32,12,0.266,13,1.053,14,1.511,16,1.289,18,1.437,23,0.499,25,1.124,26,0.013,27,0.923,28,0.39,29,0.833,33,1.124,35,1.045,37,1.053,40,1.741,51,0.253,52,2.056,53,0.348,54,2.525,55,0.464,63,0.114,64,0.075,66,1.262,67,1.374,73,1.646,78,2.153,79,1.449,81,1.402,86,1.61,100,1.402,107,0.736,109,0.008,110,0.008,118,2.227,119,1.741,122,1.594,135,1.419,136,1.046,221,2.08,237,0.952,246,1.511,250,4.335,256,3.104,274,3.497,276,3.723,281,1.189,288,4.335,289,4.702,300,3.46,301,3.131,323,4.335,325,3.995,354,4.001,356,4.089,359,3.497,361,2.386,370,3.131,389,4.79,394,1.794,413,2.525,440,1.451,464,2.885,466,2.885,467,3.594,482,3.523,510,2.386,522,2.386,576,1.614,583,1.886,699,3.131,785,2.386,786,2.263,787,2.386,839,2.885,853,3.46,1133,2.689,1351,3.46,1353,3.131,1354,3.131,1397,3.46,1465,3.46,1737,3.131,1758,5.931,1766,3.46,1790,3.46,1812,5.495,1813,3.46,1814,5.482,1815,3.959,1816,3.959,1817,3.959,1818,5.482,1819,6.288,1820,3.959,1821,3.959,1822,3.959,1823,3.959,1824,3.959,1825,3.959]],["title/injectables/StoreOtpAndExpireProvider.html",[53,0.261,1826,2.619]],["body/injectables/StoreOtpAndExpireProvider.html",[3,0.131,4,0.117,5,0.117,9,0.272,12,0.305,13,1.156,14,1.621,16,0.93,18,1.52,23,0.547,25,1.233,26,0.013,27,1.012,28,0.427,29,0.913,33,1.233,35,1.18,37,1.156,49,1.254,51,0.255,53,0.382,55,0.532,63,0.131,64,0.129,66,1.254,67,0.992,73,1.805,78,1.554,79,1.589,81,1.607,86,1.162,100,1.607,107,0.844,109,0.009,110,0.009,135,1.024,175,1.663,237,1.091,246,1.621,255,4.098,256,2.076,281,1.363,394,1.589,440,1.663,481,3.284,508,2.162,509,1.503,568,2.895,570,4.063,576,1.851,577,2.594,578,2.734,579,3.966,580,3.082,581,3.307,582,3.966,583,2.162,623,3.157,1025,2.734,1144,4.876,1171,3.966,1826,3.835,1827,5.893,1828,3.966,1829,6.274,1830,6.013,1831,4.538,1832,6.013,1833,4.538,1834,6.013,1835,4.538,1836,4.538]],["title/entities/Subscriber.html",[732,1.878,771,2.347]],["body/entities/Subscriber.html",[3,0.162,4,0.144,5,0.144,9,0.335,12,0.377,23,0.626,26,0.012,28,0.529,39,2.355,40,3.024,49,1.279,51,0.199,63,0.162,64,0.107,109,0.01,110,0.01,117,2.065,118,2.636,121,1.937,122,2.164,130,1.999,225,4.143,509,1.855,732,3.55,771,4.436,887,3.572,891,3.803,892,5.011,893,4.67,894,5.011,897,4.67,910,5.054,913,5.438,914,4.143,1837,4.894,1838,5.011,1839,5.6,1840,5.6]],["title/controllers/SubscribersController.html",[123,1.738,1841,2.992]],["body/controllers/SubscribersController.html",[3,0.104,4,0.092,5,0.092,9,0.45,12,0.241,13,0.983,16,0.735,18,1.082,23,0.465,25,1.048,26,0.013,27,1.003,28,0.507,29,0.777,33,1.332,35,0.75,37,1.249,39,2.225,45,2.541,49,0.951,51,0.253,55,0.42,63,0.104,64,0.114,66,1.208,67,0.784,82,2.161,84,3.473,105,3.402,107,0.951,109,0.007,110,0.007,118,2.301,121,1.678,122,1.487,123,2.522,125,1.518,128,3.081,130,1.487,135,0.809,136,0.948,244,2.288,245,1.782,246,1.716,253,3.473,254,4.469,257,3.134,259,2.656,261,3.229,262,2.649,264,2.05,265,4.144,266,3.473,273,3.726,277,2.783,295,1.863,299,3.262,305,2.05,307,1.863,313,3.262,314,3.802,315,3.802,316,2.288,317,1.188,320,3.714,321,2.923,322,2.923,326,2.436,327,2.836,329,2.436,330,2.436,331,2.436,333,3.473,411,2.288,458,3.081,589,2.541,706,2.05,715,2.161,768,5.193,771,4.755,914,3.081,946,4.044,954,4.044,955,4.044,956,3.473,980,2.836,981,2.836,982,3.726,987,4.044,995,4.044,1002,2.613,1032,2.836,1633,2.436,1634,2.836,1841,3.726,1842,3.134,1843,5.96,1844,4.469,1845,5.96,1846,3.134,1847,3.134,1848,3.587,1849,3.587,1850,3.587,1851,6.869,1852,3.587,1853,3.587,1854,5.114,1855,5.114,1856,5.114,1857,4.469,1858,3.262,1859,3.134,1860,3.134,1861,3.587,1862,3.587,1863,5.114,1864,3.587,1865,3.587,1866,3.587,1867,3.587,1868,3.587]],["title/modules/SubscribersModule.html",[138,1.019,156,2.788]],["body/modules/SubscribersModule.html",[3,0.159,4,0.142,5,0.142,26,0.012,51,0.286,55,0.646,63,0.159,64,0.105,109,0.01,110,0.01,125,2.883,138,1.833,140,2.424,141,2.424,142,2.627,143,2.627,144,2.424,145,3.521,146,2.627,152,5.153,156,5.617,160,3.245,161,1.888,162,2.522,164,3.706,174,3.517,175,2.021,771,3.152,1841,5.386,1858,5.153,1859,4.818,1869,4.818,1870,4.818,1871,5.514,1872,5.514,1873,5.514,1874,4.818,1875,5.514,1876,5.514]],["title/injectables/SubscribersService.html",[53,0.261,1858,2.619]],["body/injectables/SubscribersService.html",[3,0.117,4,0.104,5,0.104,9,0.241,12,0.271,13,1.067,14,1.782,16,1.139,18,1.448,23,0.578,25,1.302,26,0.013,27,1.069,28,0.451,29,0.965,33,1.403,37,1.315,51,0.263,53,0.353,55,0.473,63,0.117,64,0.077,66,1.273,67,1.214,73,1.212,78,1.902,79,1.468,81,1.967,86,1.626,100,1.967,107,1.033,109,0.008,110,0.008,121,1.789,122,1.615,135,1.253,136,1.678,138,1.378,175,1.479,237,0.97,246,1.782,259,3.852,261,3.4,264,2.307,281,1.668,440,2.036,481,3.155,508,1.922,509,1.336,576,1.646,583,2.646,706,2.307,768,5.036,771,4.588,830,4.211,837,2.941,1446,6.763,1844,4.854,1846,4.854,1857,5.55,1858,3.543,1860,3.526,1874,3.526,1877,3.526,1878,5.555,1879,4.036,1880,4.036,1881,6.352,1882,4.036,1883,5.555,1884,6.352,1885,5.555,1886,4.036,1887,5.555,1888,4.036,1889,4.036,1890,4.036,1891,4.036,1892,4.036]],["title/entities/Ticket.html",[476,1.36,732,1.878]],["body/entities/Ticket.html",[3,0.115,4,0.102,5,0.102,9,0.238,12,0.267,23,0.721,26,0.013,28,0.59,29,1.032,35,0.996,39,1.881,40,3.39,49,1.264,50,2.393,51,0.241,63,0.115,64,0.076,109,0.008,110,0.008,117,1.65,121,1.914,122,1.831,130,2.304,320,3.6,419,3.504,476,2.444,497,3.427,509,1.315,513,4.918,514,2.894,515,2.697,525,2.68,542,3.141,623,3.244,676,4.335,712,4.017,732,3.108,887,2.533,889,4.98,890,4.98,891,4.615,892,4.952,893,5.315,894,4.003,895,4.801,897,5.011,900,4.98,910,4.277,916,4.801,918,5.939,919,4.801,927,4.98,932,2.533,933,5.504,1170,4.801,1558,3.471,1570,5.504,1838,4.003,1893,3.471,1894,6.299,1895,3.972,1896,5.494,1897,5.494,1898,3.972,1899,3.972,1900,3.972,1901,3.972,1902,3.972,1903,3.972,1904,3.972,1905,3.972,1906,3.972,1907,3.471]],["title/classes/TicketTypeDto.html",[64,0.078,1586,2.992]],["body/classes/TicketTypeDto.html",[3,0.133,4,0.118,5,0.118,9,0.449,12,0.31,23,0.552,26,0.013,28,0.59,39,1.577,51,0.256,63,0.133,64,0.15,109,0.009,110,0.009,117,1.823,121,1.913,122,1.765,130,1.765,262,3.143,298,4.123,317,1.525,476,2.752,488,2.632,498,2.777,519,4.127,520,2.632,525,2.079,585,1.688,588,2.751,615,3.153,655,4.424,658,3.575,663,4.424,664,1.748,667,2.937,671,3.729,692,4.123,694,3.355,781,4.613,935,2.288,1025,2.774,1582,3.641,1583,4.024,1586,5.262,1589,4.024,1590,3.641,1591,4.024,1592,4.024,1593,6.558,1594,4.024,1595,4.024,1596,4.024,1908,4.605,1909,4.605,1910,4.605,1911,4.605]],["title/controllers/TicketsController.html",[123,1.738,1912,2.992]],["body/controllers/TicketsController.html",[3,0.154,4,0.137,5,0.137,9,0.319,16,1.092,18,1.411,26,0.013,35,0.781,51,0.291,55,0.625,63,0.154,64,0.139,66,0.991,67,1.164,109,0.01,110,0.01,112,2.342,114,2.767,119,2.342,123,3.08,125,2.254,128,4.017,135,1.202,136,1.408,244,3.398,295,2.767,298,3.618,299,3.398,307,2.767,313,3.398,314,3.398,315,3.398,316,3.398,317,1.764,476,2.208,498,3.049,506,2.767,519,3.045,815,3.398,990,3.618,991,3.618,992,4.212,994,3.882,1003,3.618,1590,4.212,1629,4.655,1662,4.595,1912,4.858,1913,4.655,1914,4.655,1915,5.327,1916,5.327,1917,5.327]],["title/modules/TicketsModule.html",[138,1.019,157,2.619]],["body/modules/TicketsModule.html",[3,0.138,4,0.123,5,0.123,26,0.013,51,0.291,55,0.56,63,0.138,64,0.091,109,0.009,110,0.009,125,2.633,138,1.716,140,2.102,141,2.102,142,2.277,143,2.277,144,2.102,145,3.295,146,3.295,151,4.692,157,5.407,159,4.451,160,2.964,161,1.637,162,2.186,164,3.385,174,3.049,175,1.752,363,3.78,369,4.177,472,4.967,476,2.06,491,3.049,507,3.483,1184,4.967,1662,5.007,1912,5.04,1914,4.177,1918,4.177,1919,4.78,1920,4.177,1921,4.177,1922,4.967,1923,4.78,1924,4.78,1925,4.78,1926,5.437,1927,4.177,1928,4.78,1929,4.177,1930,4.78]],["title/injectables/TicketsService.html",[53,0.261,1662,2.474]],["body/injectables/TicketsService.html",[3,0.156,4,0.078,5,0.078,9,0.181,12,0.204,13,0.869,14,1.843,16,1.109,18,1.27,23,0.584,25,1.315,26,0.013,27,1.08,28,0.53,29,0.975,33,1.47,35,1.204,37,1.34,49,1.363,51,0.264,53,0.287,55,0.355,63,0.088,64,0.103,66,1.426,67,1.182,73,0.909,86,1.157,107,1.006,109,0.007,110,0.007,112,2.637,114,1.573,121,2.063,122,1.744,135,1.22,136,1.195,138,1.121,237,0.728,246,1.843,281,1.624,295,3.115,321,4.097,394,1.195,467,2.584,472,4.448,475,3.95,476,2.676,487,4.904,488,3.428,491,2.883,498,2.067,500,5.607,506,1.573,507,2.207,509,1.003,512,2.647,513,4.293,514,2.207,515,2.057,519,1.731,652,3.294,712,1.932,929,3.294,932,1.932,935,2.246,1184,4.448,1188,4.726,1191,3.07,1194,2.883,1200,4.676,1214,4.676,1215,4.358,1338,2.395,1477,3.575,1662,2.724,1703,3.575,1922,4.448,1926,3.95,1929,2.647,1931,2.647,1932,5.409,1933,3.95,1934,5.409,1935,3.029,1936,3.029,1937,3.029,1938,3.029,1939,3.029,1940,3.029,1941,4.521,1942,3.95,1943,3.029,1944,4.521,1945,3.029,1946,7.168,1947,3.029,1948,3.95,1949,4.521,1950,3.029,1951,3.029,1952,3.029,1953,3.029,1954,3.029,1955,3.029,1956,4.521,1957,3.029,1958,3.029,1959,3.029]],["title/injectables/UpdateBoughtTicketProvider.html",[53,0.261,1922,2.619]],["body/injectables/UpdateBoughtTicketProvider.html",[3,0.121,4,0.108,5,0.108,9,0.341,12,0.282,13,1.095,14,1.557,16,0.859,18,1.471,23,0.519,25,1.168,26,0.013,27,0.959,28,0.405,29,0.866,33,1.168,35,1.185,37,1.095,45,2.082,51,0.266,53,0.362,55,0.491,63,0.121,64,0.123,66,1.205,67,0.916,78,2.218,79,1.712,81,2.294,86,1.459,100,2.019,107,0.779,109,0.008,110,0.008,121,1.824,122,1.657,135,0.945,175,1.536,225,2.525,237,1.007,246,1.557,281,1.258,394,1.506,440,2.089,446,2.846,474,3.313,476,2.715,481,3.056,491,4.638,507,3.053,508,1.996,509,1.388,513,3.635,514,3.053,515,2.846,517,3.662,522,2.525,541,3.662,576,2.324,834,3.053,846,3.313,847,3.313,848,3.313,849,3.053,850,3.313,851,3.313,929,4.153,932,2.673,1133,2.846,1194,4.131,1614,4.507,1684,3.662,1703,4.507,1721,3.662,1922,3.635,1933,4.98,1942,4.98,1948,4.98,1960,5.66,1961,4.19,1962,4.19,1963,6.477,1964,4.19,1965,4.19,1966,4.19,1967,4.19,1968,4.19,1969,4.19,1970,4.19,1971,4.19,1972,4.19]],["title/injectables/UploadToAwsProvider.html",[53,0.261,1973,2.619]],["body/injectables/UploadToAwsProvider.html",[3,0.099,4,0.088,5,0.209,9,0.297,12,0.231,13,0.953,14,1.692,16,1.306,18,1.348,23,0.58,25,1.306,26,0.013,27,1.336,28,0.453,29,0.967,33,1.523,37,1.353,38,2.464,49,1.185,51,0.239,53,0.315,55,0.403,56,1.636,63,0.099,64,0.111,66,1.256,67,0.751,69,1.784,73,2.23,75,4.332,78,1.697,79,1.785,81,1.756,86,1.269,100,1.756,107,1.185,109,0.007,110,0.007,135,0.775,136,0.908,167,4.628,237,0.825,246,1.692,281,1.489,295,2.575,394,1.31,440,1.817,452,4.239,467,1.963,498,2.267,576,1.4,583,2.361,597,4.738,628,2.332,704,4.78,725,3.92,872,3.001,904,3.612,1095,5.566,1146,3.92,1191,4.326,1194,4.063,1207,3.612,1973,3.162,1974,5.903,1975,3.001,1976,6.15,1977,5.737,1978,4.958,1979,4.958,1980,4.332,1981,3.435,1982,4.958,1983,3.435,1984,4.958,1985,3.435,1986,4.958,1987,4.332,1988,3.435,1989,5.084,1990,6.34,1991,3.001,1992,3.435,1993,3.435,1994,4.332,1995,4.958,1996,4.332,1997,4.958,1998,3.435,1999,3.435,2000,4.958,2001,3.435,2002,4.958,2003,3.435,2004,3.435,2005,3.435,2006,3.435,2007,3.435,2008,3.435,2009,3.435,2010,3.435,2011,3.435,2012,4.958,2013,3.435,2014,3.435,2015,3.435,2016,3.435]],["title/modules/UploadsModule.html",[138,1.019,158,2.474]],["body/modules/UploadsModule.html",[3,0.163,4,0.145,5,0.145,26,0.012,51,0.265,55,0.662,63,0.163,64,0.108,109,0.01,110,0.01,138,1.853,140,2.484,141,2.484,142,2.692,143,2.692,144,2.484,145,3.559,146,3.559,158,5.044,160,3.294,161,1.935,162,2.584,701,5.121,1973,5.184,2017,4.938,2018,4.938,2019,4.938,2020,5.651,2021,5.651,2022,5.651,2023,4.938]],["title/injectables/UploadsService.html",[53,0.261,701,2.474]],["body/injectables/UploadsService.html",[3,0.113,4,0.101,5,0.201,9,0.235,12,0.264,13,1.047,14,1.767,16,1.116,18,1.431,23,0.569,25,1.283,26,0.013,27,1.196,28,0.48,29,0.95,33,1.386,37,1.299,49,1.164,51,0.222,53,0.346,55,0.46,56,1.868,63,0.113,64,0.119,66,1.321,67,1.19,69,2.037,73,1.635,78,2.314,79,1.653,81,1.929,86,1.394,100,1.929,107,1.013,109,0.008,110,0.008,135,1.229,136,1.653,138,1.351,167,4.903,237,0.943,246,1.767,281,1.635,381,2.829,394,1.037,440,2.293,476,2.434,504,2.858,597,4.312,701,3.281,704,4.249,710,4.307,714,4.759,725,5.345,726,6.078,834,2.858,1194,4.53,1973,4.809,1976,5.907,1977,4.947,1980,4.759,1987,4.759,1989,5.467,1990,4.759,1996,4.759,2023,3.427,2024,3.427,2025,5.446,2026,3.922,2027,3.922,2028,5.446,2029,3.922,2030,3.922,2031,3.922,2032,3.922,2033,3.922,2034,3.922,2035,3.922,2036,3.922,2037,3.922,2038,5.446,2039,3.922,2040,5.446,2041,3.922]],["title/entities/User.html",[35,0.602,732,1.878]],["body/entities/User.html",[3,0.106,4,0.094,5,0.094,9,0.22,12,0.247,23,0.709,26,0.012,28,0.587,29,1.093,35,1.056,39,2.67,40,3.468,49,1.45,51,0.246,63,0.106,64,0.099,109,0.007,110,0.007,117,1.562,118,2.14,119,3.325,121,1.465,122,1.756,130,2.267,221,2.293,225,3.135,307,2.703,509,1.217,518,3.138,525,2.465,580,4.103,581,4.402,623,2.288,667,2.344,676,4.823,732,3.005,785,4.556,786,3.453,787,3.64,814,3.212,815,2.344,887,2.344,891,5.135,892,5.682,893,5.555,894,5.682,897,5.223,904,3.792,910,4.103,913,6.166,914,3.135,923,3.212,925,4.547,934,4.547,1117,3.792,1838,3.792,1907,3.212,2042,3.212,2043,3.676,2044,3.676,2045,5.204,2046,3.676,2047,3.676,2048,3.676,2049,3.676,2050,3.676,2051,3.676,2052,3.676,2053,3.676,2054,3.676,2055,5.204]],["title/controllers/UsersController.html",[123,1.738,2056,2.992]],["body/controllers/UsersController.html",[3,0.059,4,0.052,5,0.052,9,0.484,11,2.038,12,0.136,13,0.634,16,0.677,18,0.429,23,0.483,25,1.087,26,0.013,27,1.282,28,0.545,29,0.982,35,1.218,37,1.278,39,2.377,40,3.052,45,1.64,49,1.291,50,1.22,51,0.229,55,0.237,63,0.059,64,0.039,66,1.115,67,0.721,76,3.988,82,1.22,84,2.242,105,3.167,107,1.203,109,0.005,110,0.005,118,1.169,119,1.451,121,2.128,122,1.654,123,1.768,125,0.857,128,4.183,130,1.542,135,0.745,136,0.535,221,1.253,244,1.292,245,1.007,246,1.746,253,3.271,256,3.112,258,3.862,259,1.714,261,2.826,262,2.996,265,4.977,266,2.242,273,2.405,277,3.618,295,1.052,299,2.105,305,1.158,307,1.052,313,2.105,314,3.628,315,3.628,316,1.292,317,0.671,320,3.428,321,3.032,322,1.887,326,1.376,327,2.61,328,1.77,329,1.376,330,1.376,331,1.376,333,1.376,381,2.954,394,0.535,411,1.292,482,1.91,518,3.359,547,2.105,589,1.64,706,1.158,715,3.613,782,4.125,785,1.989,786,1.887,787,1.989,822,3.809,829,2.884,832,1.77,835,2.61,914,3.427,943,4.209,946,2.61,954,2.61,955,2.61,956,2.837,961,2.405,963,2.753,964,4.97,965,2.884,966,4.635,967,1.77,968,3.072,969,4.209,970,3.809,971,4.209,972,2.884,973,3.767,974,4.209,975,4.209,980,3.303,981,1.602,982,4.144,983,2.884,986,1.602,987,2.61,994,3.865,995,3.809,996,4.635,1000,1.376,1001,1.476,1002,1.476,1015,4.556,1016,3.271,1017,3.271,1018,4.246,1025,1.989,1029,1.102,1032,3.303,1040,2.664,1048,1.77,1272,2.884,1337,4.632,1358,1.476,1378,1.602,1386,1.77,1393,3.072,1633,1.376,1634,1.602,1847,1.77,2056,2.405,2057,1.77,2058,2.884,2059,3.301,2060,3.301,2061,4.177,2062,2.026,2063,2.026,2064,1.77,2065,2.026,2066,2.026,2067,2.026,2068,3.301,2069,2.026,2070,3.301,2071,2.026,2072,2.026,2073,4.177,2074,2.026,2075,2.026,2076,2.026,2077,2.026,2078,5.304,2079,2.026,2080,2.026,2081,2.026,2082,2.026,2083,1.77,2084,2.026,2085,2.026,2086,3.301,2087,3.301,2088,2.026,2089,2.026,2090,2.026,2091,2.026,2092,2.026,2093,2.026,2094,2.026,2095,2.026,2096,2.026,2097,2.026,2098,2.026,2099,2.026]],["title/modules/UsersModule.html",[138,1.019,159,2.347]],["body/modules/UsersModule.html",[3,0.125,4,0.111,5,0.111,26,0.013,35,1.033,51,0.294,55,0.507,63,0.125,64,0.082,109,0.008,110,0.008,125,2.465,138,1.633,140,1.903,141,1.903,142,2.061,143,2.061,144,1.903,145,3.136,146,3.136,150,3.715,151,3.51,153,4.562,159,4.847,160,2.775,161,1.994,162,1.979,164,3.169,174,2.76,175,1.586,255,2.895,361,3.967,373,3.153,482,3.743,563,4.83,577,2.474,805,3.51,826,4.83,1046,3.781,1124,4.83,1135,4.83,1143,4.83,1144,2.939,1826,4.83,1927,3.781,2056,4.798,2083,3.781,2100,3.781,2101,3.781,2102,4.327,2103,3.781,2104,4.327,2105,4.327,2106,4.327,2107,4.327,2108,3.781,2109,6.585,2110,3.781,2111,4.327,2112,3.781,2113,3.781,2114,4.327,2115,3.781,2116,4.327]],["title/injectables/UsersService.html",[53,0.261,482,1.878]],["body/injectables/UsersService.html",[3,0.063,4,0.056,5,0.056,9,0.13,11,3.126,12,0.147,13,0.673,14,1.897,16,1.317,18,1.064,23,0.603,25,1.359,26,0.013,27,1.116,28,0.471,29,1.007,33,1.531,35,1.23,37,1.435,38,1.74,49,1.318,51,0.259,53,0.319,55,0.255,63,0.063,64,0.042,66,1.414,67,1.404,73,0.654,78,1.199,79,1.328,81,1.24,86,1.505,100,1.24,105,3.374,107,1.195,109,0.005,110,0.005,118,2.082,121,1.656,122,1.797,135,1.45,136,0.925,138,0.868,161,2.33,175,0.798,221,2.09,237,0.524,246,1.897,255,3.071,256,2.299,259,2.279,261,1.083,281,1.856,373,1.587,381,3.338,382,1.587,385,3.059,394,1.698,437,2.86,440,1.283,481,2.421,482,1.601,508,1.038,509,0.721,522,3.317,563,4.099,566,2.768,567,3.059,570,3.028,571,3.059,572,4.811,575,3.059,576,0.888,577,1.245,578,1.313,583,1.668,589,1.74,623,2.825,706,1.245,738,2.551,782,3.751,805,2.644,826,3.206,835,2.768,956,1.479,961,2.551,968,1.389,973,1.313,1000,1.479,1029,1.185,1051,2.768,1054,3.673,1064,1.723,1065,1.723,1069,1.587,1116,1.723,1118,1.723,1124,4.099,1135,4.23,1137,3.059,1139,3.059,1143,3.206,1144,4.503,1146,4.65,1147,3.059,1149,3.059,1179,3.059,1337,2.799,1393,3.206,1785,3.059,1826,3.206,1829,3.059,2058,3.059,2064,3.059,2108,1.904,2110,1.904,2112,1.904,2113,1.904,2115,1.904,2117,1.904,2118,3.501,2119,3.501,2120,2.178,2121,5.026,2122,5.026,2123,2.178,2124,4.389,2125,2.178,2126,3.501,2127,2.178,2128,2.178,2129,3.501,2130,3.501,2131,2.178,2132,3.501,2133,2.178,2134,3.501,2135,2.178,2136,2.178,2137,3.501,2138,2.178,2139,2.178,2140,2.178,2141,2.178,2142,2.178,2143,2.178,2144,2.178,2145,2.178,2146,2.178,2147,2.178,2148,2.178,2149,2.178]],["title/coverage.html",[2150,4.445]],["body/coverage.html",[0,3.124,1,1.918,5,0.073,6,2.468,7,2.058,8,2.468,26,0.012,28,0.201,33,0.879,35,0.961,53,0.529,61,2.234,64,0.151,79,0.746,109,0.006,110,0.006,111,2.913,112,1.242,114,1.467,115,2.468,123,2.883,124,2.058,126,2.468,133,1.802,144,1.242,161,0.967,163,2.234,185,2.058,187,2.234,189,2.058,193,2.058,202,2.234,238,2.468,242,2.058,243,2.468,245,1.404,252,1.802,255,2.131,272,1.802,283,1.802,289,1.802,302,1.802,354,1.467,355,1.802,356,1.702,357,1.802,358,1.802,359,1.802,365,2.058,377,2.468,390,2.234,391,2.234,392,2.234,393,2.234,399,2.468,412,2.234,447,2.468,472,1.802,473,2.468,474,3.392,476,1.42,482,1.292,483,1.702,488,1.615,491,1.802,519,1.615,525,0.967,528,2.234,563,1.802,564,2.468,565,3.778,584,1.802,586,2.468,587,2.468,668,1.802,669,3.125,695,1.802,696,2.468,697,2.468,701,1.702,732,2.847,756,2.234,757,3.392,768,1.918,769,2.468,770,2.468,771,1.615,782,1.802,783,2.468,784,3.778,805,2.584,826,1.802,827,2.468,828,2.468,830,1.537,867,2.468,868,2.468,888,2.468,935,1.404,938,2.058,939,2.468,963,1.615,982,2.058,990,1.918,991,1.918,1003,1.918,1029,1.537,1040,1.802,1050,2.468,1054,1.615,1066,2.234,1124,1.802,1125,3.778,1126,2.468,1135,1.802,1136,2.468,1143,1.802,1144,1.918,1145,2.468,1157,3.392,1160,2.468,1184,1.802,1185,2.468,1186,2.468,1210,2.058,1212,2.058,1267,6.849,1326,2.468,1327,2.468,1357,2.058,1358,3.125,1359,3.392,1374,1.615,1375,1.802,1378,2.234,1379,2.468,1389,2.058,1390,3.392,1393,1.802,1394,2.468,1433,2.468,1483,2.468,1500,2.468,1537,2.468,1544,2.468,1545,2.468,1551,2.468,1582,3.392,1586,2.058,1599,1.918,1604,2.468,1605,2.058,1606,2.468,1627,1.802,1633,1.918,1656,2.468,1662,1.702,1751,2.468,1755,2.468,1756,2.468,1772,2.468,1786,2.468,1795,2.234,1808,2.468,1812,2.468,1813,2.468,1826,1.802,1827,2.468,1828,2.468,1837,2.468,1838,2.058,1841,2.058,1842,2.468,1858,1.802,1877,2.468,1893,2.468,1912,2.058,1913,2.468,1922,1.802,1931,2.468,1960,2.468,1973,1.802,1974,2.468,1975,2.468,2024,2.468,2042,2.468,2056,2.058,2057,2.468,2117,2.468,2150,2.234,2151,2.825,2152,6.812,2153,7.188,2154,8.042,2155,6.226,2156,3.748,2157,2.468,2158,2.468,2159,2.468,2160,2.468,2161,8.25,2162,6.812,2163,6.555,2164,2.468,2165,2.825,2166,2.825,2167,2.468,2168,2.825,2169,2.825,2170,2.468,2171,2.468,2172,2.825]],["title/dependencies.html",[141,2.173,2173,2.989]],["body/dependencies.html",[26,0.013,55,0.637,56,2.587,57,3.464,58,3.957,64,0.129,109,0.01,110,0.01,141,2.388,175,1.99,184,3.688,317,1.798,410,4.294,428,3.688,448,4.746,509,1.798,664,2.061,667,3.464,999,4.746,1195,4.746,1200,4.917,1205,4.746,1208,4.746,1209,4.746,1406,3.957,1407,4.294,1677,4.746,1977,4.294,1991,4.746,1994,4.746,2174,5.431,2175,5.431,2176,5.431,2177,7.679,2178,5.431,2179,5.431,2180,5.431,2181,5.431,2182,5.431,2183,5.431,2184,5.431,2185,5.431,2186,5.431,2187,5.431,2188,5.431,2189,5.431,2190,5.431,2191,5.431,2192,5.431,2193,5.431,2194,5.431,2195,5.431,2196,5.431,2197,5.431,2198,5.431,2199,5.431,2200,5.431,2201,5.431,2202,5.431,2203,5.431,2204,5.431]],["title/miscellaneous/enumerations.html",[2205,2.182,2206,4.32]],["body/miscellaneous/enumerations.html",[12,0.326,26,0.012,28,0.446,109,0.009,110,0.009,119,2.763,305,3.592,322,4.913,411,3.096,497,3.419,503,4.969,513,4.008,525,2.151,558,5.491,585,2.303,606,4.969,612,4.969,616,5.491,617,4.242,642,4.969,676,4.008,677,4.969,785,3.786,815,3.096,822,5.51,824,5.491,1016,3.296,1566,4.969,1643,4.969,1718,5.491,1722,5.491,2205,3.096,2206,4.242,2207,4.854,2208,7.819,2209,4.854,2210,4.854,2211,4.854,2212,4.854,2213,4.854,2214,4.854,2215,4.854,2216,6.284,2217,4.854,2218,7.369,2219,4.854,2220,4.854,2221,4.854,2222,6.284,2223,4.854,2224,6.284,2225,6.284,2226,6.284,2227,4.854,2228,4.854,2229,6.284,2230,6.284,2231,4.854,2232,6.284,2233,4.854,2234,6.284,2235,4.854,2236,4.854]],["title/miscellaneous/functions.html",[2205,2.182,2237,4.32]],["body/miscellaneous/functions.html",[12,0.429,26,0.011,33,1.524,109,0.011,110,0.011,144,3.46,381,3.315,623,2.806,1066,6.223,1361,5.047,2167,5.577,2170,5.577,2205,4.071,2237,5.577,2238,6.382,2239,6.382,2240,6.382,2241,5.577,2242,6.382]],["title/index.html",[12,0.23,381,1.777,2243,3.421]],["body/index.html",[4,0.12,9,0.279,26,0.012,96,4.069,109,0.009,110,0.009,162,3.317,262,2.785,413,2.97,441,4.069,481,2.047,609,4.153,628,4.638,631,2.533,746,3.682,841,5.734,849,4.456,1017,3.162,1110,3.682,1406,5.284,1412,4.069,1462,4.069,1468,5.734,1633,3.162,1672,4.069,2150,3.682,2241,5.967,2244,4.656,2245,4.656,2246,6.829,2247,4.656,2248,4.656,2249,4.656,2250,4.656,2251,4.656,2252,4.656,2253,7.252,2254,4.656,2255,7.88,2256,4.656,2257,7.88,2258,4.656,2259,4.656,2260,4.656,2261,4.656,2262,4.656,2263,6.829,2264,4.656,2265,6.116,2266,4.656,2267,4.656,2268,4.656,2269,4.656,2270,4.656,2271,4.656,2272,4.656,2273,4.656,2274,6.116,2275,4.656,2276,6.829,2277,4.656,2278,4.656,2279,4.656,2280,4.656,2281,4.656,2282,4.656,2283,4.656,2284,6.829,2285,4.656,2286,4.656,2287,4.656,2288,6.116,2289,4.656,2290,4.656,2291,4.656,2292,4.656,2293,4.656,2294,4.656,2295,4.656,2296,4.656,2297,6.116,2298,4.656,2299,4.656,2300,4.656,2301,4.656,2302,6.116,2303,4.656,2304,4.656,2305,4.656,2306,6.116,2307,6.116,2308,4.656,2309,4.656,2310,4.656,2311,4.656,2312,4.656,2313,4.656,2314,4.656,2315,4.656,2316,4.069,2317,4.656,2318,4.656,2319,4.656,2320,4.656,2321,4.656,2322,4.656,2323,4.069]],["title/modules.html",[140,2.471]],["body/modules.html",[26,0.01,109,0.01,110,0.01,139,4.271,140,2.577,150,3.739,151,3.531,152,3.739,153,3.531,154,3.98,155,3.98,156,3.98,157,3.739,158,3.531,159,3.35,1468,6.726,2324,8.506,2325,8.506,2326,8.506]],["title/overview.html",[2327,4.912]],["body/overview.html",[2,2.479,26,0.012,109,0.007,110,0.007,113,2.69,125,1.44,133,3.691,138,0.844,139,6.081,140,1.496,141,1.496,142,1.621,143,1.621,144,1.496,145,1.621,146,1.621,147,2.973,148,2.973,149,2.973,150,5.16,151,4.874,152,4.615,153,4.464,154,4.57,155,5.127,156,4.913,157,5.188,158,4.619,159,4.727,160,2.345,161,1.165,162,1.556,237,0.818,302,3.691,351,2.973,352,2.973,353,2.973,354,3.294,355,3.691,356,3.486,357,3.691,358,3.691,359,3.691,472,3.691,482,3.309,483,4.359,563,3.691,585,1.247,695,3.691,701,4.359,826,3.691,830,3.937,887,2.17,906,2.973,1036,2.973,1037,2.973,1038,2.973,1040,4.615,1054,4.135,1124,3.691,1135,3.691,1143,3.691,1184,3.691,1258,2.69,1287,2.973,1399,2.973,1400,2.973,1401,2.973,1495,2.973,1496,2.973,1497,2.973,1597,2.973,1598,2.973,1599,3.929,1627,3.691,1647,2.973,1648,2.973,1662,4.359,1826,3.691,1858,3.691,1869,2.973,1870,2.973,1918,2.973,1920,2.973,1921,2.973,1922,3.691,1973,3.691,2017,2.973,2018,2.973,2019,2.973,2100,2.973,2101,2.973,2103,2.973,2327,2.973,2328,3.402,2329,3.402,2330,3.402,2331,3.402]],["title/properties.html",[117,1.484,2173,2.989]],["body/properties.html",[9,0.392,26,0.012,109,0.011,110,0.011,117,1.966,2316,5.722,2323,5.722,2332,6.548,2333,6.548,2334,6.548]],["title/miscellaneous/variables.html",[2205,2.182,2335,4.32]],["body/miscellaneous/variables.html",[12,0.321,26,0.012,28,0.521,31,3.246,33,0.98,35,1.163,45,3.092,49,1.363,50,2.88,61,4.92,66,0.889,73,1.868,89,4.177,91,4.177,107,0.889,109,0.009,110,0.009,112,2.735,119,2.102,127,3.483,163,3.78,201,4.177,202,4.92,203,4.177,245,3.437,305,3.556,322,4.646,400,4.177,412,4.92,419,5.23,432,5.437,877,4.177,990,4.225,991,3.246,1003,5.385,1018,3.246,1210,4.533,1212,4.533,1695,4.177,1793,5.437,1795,4.92,2156,4.177,2157,4.177,2158,5.437,2159,4.177,2160,4.177,2164,4.177,2171,4.177,2205,3.049,2335,4.177,2336,4.78,2337,4.78,2338,6.222,2339,4.78,2340,4.78,2341,4.78,2342,4.78,2343,4.78,2344,4.78,2345,6.222,2346,4.78,2347,4.78,2348,4.78,2349,4.78,2350,4.78,2351,4.78,2352,4.78,2353,6.917,2354,4.78,2355,4.78,2356,4.78,2357,4.78,2358,4.78,2359,4.78,2360,4.78,2361,4.78]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":562,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/EventsService.html":{}}}],["0.0.1",{"_index":2333,"title":{},"body":{"properties.html":{}}}],["0.1",{"_index":1245,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["0.14.1",{"_index":2187,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":1241,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["0.2.0",{"_index":2202,"title":{},"body":{"dependencies.html":{}}}],["0.2588",{"_index":1237,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["0.3",{"_index":1244,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["0.3.20",{"_index":2204,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1316,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["0.5.1",{"_index":2186,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":1302,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["0.95",{"_index":1261,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["08:00",{"_index":689,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["08:00'})@isstring()@isnotempty()@maxlength(5",{"_index":635,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["1",{"_index":547,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"controllers/EventsController.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["1.0",{"_index":1238,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["1.0.0",{"_index":879,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["1.1.1",{"_index":2182,"title":{},"body":{"dependencies.html":{}}}],["1.1.25",{"_index":2175,"title":{},"body":{"dependencies.html":{}}}],["1.17.1",{"_index":2197,"title":{},"body":{"dependencies.html":{}}}],["1.5.4",{"_index":2200,"title":{},"body":{"dependencies.html":{}}}],["1.7.7",{"_index":2184,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2154,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1025,"title":{},"body":{"controllers/EventsController.html":{},"injectables/GenerateTicketPdfProvider.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"classes/TicketTypeDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":2177,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":2181,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":2179,"title":{},"body":{"dependencies.html":{}}}],["10/10",{"_index":2169,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1267,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"injectables/PaystackService.html":{},"coverage.html":{}}}],["1000",{"_index":1171,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{}}}],["10000",{"_index":1174,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["1024",{"_index":895,"title":{},"body":{"entities/Event.html":{},"entities/Ticket.html":{}}}],["10})@apiheaders(['undefined",{"_index":958,"title":{},"body":{"controllers/EventsController.html":{}}}],["10})@apiquery({name",{"_index":972,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["10})@isint()@min(1)@max(10)@isnotempty",{"_index":1908,"title":{},"body":{"classes/TicketTypeDto.html":{}}}],["11",{"_index":2328,"title":{},"body":{"overview.html":{}}}],["12",{"_index":1314,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["12345",{"_index":1032,"title":{},"body":{"controllers/EventsController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["12345'})@apiheaders(['undefined",{"_index":983,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["12345'})@apiquery({name",{"_index":2080,"title":{},"body":{"controllers/UsersController.html":{}}}],["12345'})@get('/:subscriberid')@auth(authtype.none",{"_index":1852,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["13:00",{"_index":691,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["13:00'})@isstring()@isnotempty()@maxlength(5",{"_index":629,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["14",{"_index":1014,"title":{},"body":{"controllers/EventsController.html":{}}}],["15/15",{"_index":2165,"title":{},"body":{"coverage.html":{}}}],["150",{"_index":1252,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["16",{"_index":1283,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["16th",{"_index":632,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["17",{"_index":2331,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":2192,"title":{},"body":{"dependencies.html":{}}}],["170",{"_index":1313,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["180",{"_index":1308,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["1})@apiheaders(['undefined",{"_index":2070,"title":{},"body":{"controllers/UsersController.html":{}}}],["1})@auth(authtype.none)@get",{"_index":976,"title":{},"body":{"controllers/EventsController.html":{}}}],["2",{"_index":1258,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"entities/Payment.html":{},"overview.html":{}}}],["2.0.2",{"_index":2176,"title":{},"body":{"dependencies.html":{}}}],["2.0.4",{"_index":2190,"title":{},"body":{"dependencies.html":{}}}],["2.1691.0",{"_index":2183,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":2152,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1538,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["200",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"injectables/GenerateTicketPdfProvider.html":{},"controllers/PaystackController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":946,"title":{},"body":{"controllers/EventsController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":688,"title":{},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{}}}],["2024'})@isdate()@isnotempty",{"_index":633,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["2024'})@isoptional()@isdate",{"_index":626,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["204",{"_index":955,"title":{},"body":{"controllers/EventsController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["2342",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["2343",{"_index":1771,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["2343})@isint()@isnotempty",{"_index":1768,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["2354",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["24th",{"_index":624,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["25",{"_index":1270,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["2560",{"_index":902,"title":{},"body":{"entities/Event.html":{}}}],["3",{"_index":1287,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"overview.html":{}}}],["3.1.10",{"_index":2189,"title":{},"body":{"dependencies.html":{}}}],["3.11.6",{"_index":2194,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":2178,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2161,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":693,"title":{},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{}}}],["31",{"_index":2330,"title":{},"body":{"overview.html":{}}}],["34",{"_index":1596,"title":{},"body":{"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{}}}],["34})@isint()@isnotempty",{"_index":1584,"title":{},"body":{"classes/PaymentDto.html":{}}}],["380",{"_index":1300,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["4/4",{"_index":2162,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1280,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["43",{"_index":1635,"title":{},"body":{"controllers/PaystackController.html":{}}}],["465",{"_index":1421,"title":{},"body":{"modules/MailModule.html":{}}}],["5",{"_index":906,"title":{},"body":{"entities/Event.html":{},"overview.html":{}}}],["5.1.1",{"_index":2185,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":2155,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1250,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["500",{"_index":1254,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["550",{"_index":1275,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["6.9.15",{"_index":2196,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":2163,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1836,"title":{},"body":{"injectables/StoreOtpAndExpireProvider.html":{}}}],["600",{"_index":1263,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["615",{"_index":1268,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["7",{"_index":2329,"title":{},"body":{"overview.html":{}}}],["7.4.2",{"_index":2180,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2203,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":2168,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":1299,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["77",{"_index":1550,"title":{},"body":{"classes/PatchTicketDto.html":{}}}],["77})@isint()@isnotempty",{"_index":1547,"title":{},"body":{"classes/PatchTicketDto.html":{}}}],["8.13.0",{"_index":2199,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":2166,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1277,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["800",{"_index":1221,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["96",{"_index":913,"title":{},"body":{"entities/Event.html":{},"entities/Subscriber.html":{},"entities/User.html":{}}}],["9999",{"_index":1172,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["_",{"_index":101,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":1395,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["accentcolor",{"_index":1242,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["accept",{"_index":102,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["accepts",{"_index":1694,"title":{},"body":{"injectables/PaystackService.html":{}}}],["access",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{}}}],["accesstoken",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["account",{"_index":788,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["accounttype",{"_index":785,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["active",{"_index":2350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activeuser",{"_index":990,"title":{},"body":{"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/TicketsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":112,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/BuyTicketProvider.html":{},"injectables/CreateEventProvider.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":1430,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":1293,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["address",{"_index":590,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"classes/ForgotPassswordDto.html":{},"classes/SignInDto.html":{}}}],["admin",{"_index":824,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["admin'})@isenum(role)@isnotempty",{"_index":810,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["against",{"_index":457,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["agnes",{"_index":2087,"title":{},"body":{"controllers/UsersController.html":{}}}],["allow",{"_index":1802,"title":{},"body":{"guards/RolesGuard.html":{}}}],["allunsoldticketswithtickettype",{"_index":553,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["allunsoldticketswithtickettype.length",{"_index":559,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["already",{"_index":842,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["amazing",{"_index":1462,"title":{},"body":{"injectables/MailService.html":{},"index.html":{}}}],["amount",{"_index":1215,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"injectables/MailService.html":{},"entities/Payment.html":{},"injectables/PaystackService.html":{},"injectables/TicketsService.html":{}}}],["amounts",{"_index":1695,"title":{},"body":{"injectables/PaystackService.html":{},"miscellaneous/variables.html":{}}}],["api",{"_index":943,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiconsumes",{"_index":993,"title":{},"body":{"controllers/EventsController.html":{}}}],["apiconsumes('multipart/form",{"_index":1021,"title":{},"body":{"controllers/EventsController.html":{}}}],["apiheaders",{"_index":994,"title":{},"body":{"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":995,"title":{},"body":{"controllers/EventsController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":671,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPassswordDto.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/TicketTypeDto.html":{}}}],["apiproperty({description",{"_index":615,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPassswordDto.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/TicketTypeDto.html":{}}}],["apiproperty({enum",{"_index":607,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["apiproperty({type",{"_index":758,"title":{},"body":{"classes/CreateManyTicketsDto.html":{}}}],["apipropertyoptional",{"_index":672,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["apipropertyoptional({description",{"_index":601,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["apiquery",{"_index":996,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status",{"_index":965,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('events",{"_index":1006,"title":{},"body":{"controllers/EventsController.html":{}}}],["apitags('paystack",{"_index":1631,"title":{},"body":{"controllers/PaystackController.html":{}}}],["apitags('subscribers",{"_index":1861,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["apitags('tickets",{"_index":1916,"title":{},"body":{"controllers/TicketsController.html":{}}}],["apitags('users",{"_index":2085,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":878,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":127,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":134,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":124,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2288,"title":{},"body":{"index.html":{}}}],["application/pdf",{"_index":2005,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["applications",{"_index":2251,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":139,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":133,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["april",{"_index":625,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["array",{"_index":430,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateManyTicketsDto.html":{},"injectables/PaystackService.html":{}}}],["assets/fonts/opensans",{"_index":1227,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["async",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["asynchrousnously",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["atleast",{"_index":804,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["attendance",{"_index":608,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{}}}],["attendancemode",{"_index":591,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/EventsService.html":{}}}],["audience",{"_index":1343,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["auth",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/EventsController.html":{},"modules/MailModule.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorator/role.decorator",{"_index":1004,"title":{},"body":{"controllers/EventsController.html":{}}}],["auth/enums/role",{"_index":1005,"title":{},"body":{"controllers/EventsController.html":{}}}],["auth/guards/access",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/roles/roles.guard",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":412,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":242,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticating",{"_index":408,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authentication",{"_index":400,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authenticationguard",{"_index":189,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":436,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":150,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2316,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":1015,"title":{},"body":{"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"controllers/UsersController.html":{}}}],["authorizationurl",{"_index":1552,"title":{},"body":{"entities/Payment.html":{},"injectables/PaystackService.html":{}}}],["authservice",{"_index":302,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":420,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":425,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":401,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":432,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":438,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1724,"title":{},"body":{"injectables/PaystackService.html":{}}}],["await",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1977,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"dependencies.html":{}}}],["aws.provider",{"_index":2023,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["aws.provider.ts",{"_index":1975,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["aws.provider.ts:11",{"_index":1981,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:28",{"_index":1983,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:53",{"_index":1988,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:78",{"_index":1985,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["axios",{"_index":1677,"title":{},"body":{"injectables/PaystackService.html":{},"dependencies.html":{}}}],["axios.get",{"_index":1710,"title":{},"body":{"injectables/PaystackService.html":{}}}],["axios.post",{"_index":1688,"title":{},"body":{"injectables/PaystackService.html":{}}}],["back",{"_index":1470,"title":{},"body":{"injectables/MailService.html":{},"injectables/PaystackService.html":{}}}],["backers",{"_index":2312,"title":{},"body":{"index.html":{}}}],["background",{"_index":1247,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["badrequestexception",{"_index":834,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadsService.html":{}}}],["badrequestexception('mime",{"_index":2036,"title":{},"body":{"injectables/UploadsService.html":{}}}],["badrequestexception('the",{"_index":1134,"title":{},"body":{"injectables/FindOneByIdProvider.html":{}}}],["badrequestexception('ticket",{"_index":1968,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["barcode",{"_index":1201,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["base",{"_index":1360,"title":{},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{}}}],["based",{"_index":105,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/EventsController.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["baseurl",{"_index":1521,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":448,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":471,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":469,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":470,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":365,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1016,"title":{},"body":{"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["before",{"_index":883,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["between",{"_index":1063,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ForgotPasswordProvider.html":{}}}],["between(next30daysstart",{"_index":1093,"title":{},"body":{"injectables/EventsService.html":{}}}],["between(next7daysstart",{"_index":1091,"title":{},"body":{"injectables/EventsService.html":{}}}],["between(todaystart",{"_index":1085,"title":{},"body":{"injectables/EventsService.html":{}}}],["between(tomorrowstart",{"_index":1087,"title":{},"body":{"injectables/EventsService.html":{}}}],["between(weekendstart",{"_index":1089,"title":{},"body":{"injectables/EventsService.html":{}}}],["board",{"_index":2305,"title":{},"body":{"index.html":{}}}],["body",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BuyTicketProvider.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"controllers/SubscribersController.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UsersController.html":{}}}],["body.tickettypes.tolowercase",{"_index":556,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["boolean",{"_index":1790,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{}}}],["boostrap",{"_index":2240,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["border",{"_index":1248,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["bordercolor",{"_index":1256,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["borderwidth",{"_index":1257,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["bought",{"_index":491,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"classes/PatchTicketDto.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"coverage.html":{}}}],["boys",{"_index":619,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["browse",{"_index":2326,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2324,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1996,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["buffer",{"_index":452,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/HashingProvider.html":{},"injectables/UploadToAwsProvider.html":{}}}],["building",{"_index":2247,"title":{},"body":{"index.html":{}}}],["burna",{"_index":1008,"title":{},"body":{"controllers/EventsController.html":{}}}],["buy",{"_index":1949,"title":{},"body":{"injectables/TicketsService.html":{}}}],["buyer",{"_index":1450,"title":{},"body":{"injectables/MailService.html":{},"injectables/PaystackService.html":{}}}],["buyer.email",{"_index":1690,"title":{},"body":{"injectables/PaystackService.html":{}}}],["buyer.id",{"_index":1699,"title":{},"body":{"injectables/PaystackService.html":{}}}],["buying",{"_index":475,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/TicketsService.html":{}}}],["buys",{"_index":1616,"title":{},"body":{"controllers/PaystackController.html":{}}}],["buyticket",{"_index":477,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["buyticket(queryrunner",{"_index":486,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["buyticketprovider",{"_index":472,"title":{"injectables/BuyTicketProvider.html":{}},"body":{"injectables/BuyTicketProvider.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["calculatetotal",{"_index":478,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["calculatetotal(tickets",{"_index":493,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["calculating",{"_index":495,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["callback",{"_index":1639,"title":{},"body":{"controllers/PaystackController.html":{}}}],["callback_url",{"_index":1691,"title":{},"body":{"injectables/PaystackService.html":{}}}],["called",{"_index":1613,"title":{},"body":{"controllers/PaystackController.html":{},"injectables/PaystackService.html":{}}}],["callhandler",{"_index":875,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["cascade",{"_index":919,"title":{},"body":{"entities/Event.html":{},"entities/Ticket.html":{}}}],["cascade'})@joincolumn",{"_index":1897,"title":{},"body":{"entities/Ticket.html":{}}}],["catch",{"_index":100,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["category",{"_index":592,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{}}}],["change",{"_index":566,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/UsersService.html":{}}}],["changed",{"_index":1785,"title":{},"body":{"injectables/ResetPasswordProvider.html":{},"injectables/UsersService.html":{}}}],["changeuserpassword",{"_index":567,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/UsersService.html":{}}}],["changeuserpassword(user",{"_index":571,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/UsersService.html":{}}}],["changeuserpasswordprovider",{"_index":563,"title":{"injectables/ChangeUserPasswordProvider.html":{}},"body":{"injectables/ChangeUserPasswordProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["changing",{"_index":575,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/UsersService.html":{}}}],["channel",{"_index":2279,"title":{},"body":{"index.html":{}}}],["character",{"_index":808,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":803,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["charge.success",{"_index":1742,"title":{},"body":{"injectables/PaystackService.html":{}}}],["check",{"_index":841,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/ForgotPasswordProvider.html":{},"index.html":{}}}],["checking",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["checkwhereoptions",{"_index":1113,"title":{},"body":{"injectables/EventsService.html":{}}}],["class",{"_index":64,"title":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPassswordDto.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/TicketTypeDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":585,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPassswordDto.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/TicketTypeDto.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["clear",{"_index":1783,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["cluster_appmodule",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":351,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":353,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":352,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":1036,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_exports",{"_index":1038,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_imports",{"_index":1039,"title":{},"body":{"modules/EventsModule.html":{}}}],["cluster_eventsmodule_providers",{"_index":1037,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":1399,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":1400,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":1401,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1495,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1497,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1496,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paymentsmodule",{"_index":1597,"title":{},"body":{"modules/PaymentsModule.html":{},"overview.html":{}}}],["cluster_paymentsmodule_providers",{"_index":1598,"title":{},"body":{"modules/PaymentsModule.html":{},"overview.html":{}}}],["cluster_paystackmodule",{"_index":1647,"title":{},"body":{"modules/PaystackModule.html":{},"overview.html":{}}}],["cluster_paystackmodule_imports",{"_index":1649,"title":{},"body":{"modules/PaystackModule.html":{}}}],["cluster_paystackmodule_providers",{"_index":1648,"title":{},"body":{"modules/PaystackModule.html":{},"overview.html":{}}}],["cluster_subscribersmodule",{"_index":1869,"title":{},"body":{"modules/SubscribersModule.html":{},"overview.html":{}}}],["cluster_subscribersmodule_imports",{"_index":1871,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["cluster_subscribersmodule_providers",{"_index":1870,"title":{},"body":{"modules/SubscribersModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule",{"_index":1918,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_exports",{"_index":1921,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_imports",{"_index":1919,"title":{},"body":{"modules/TicketsModule.html":{}}}],["cluster_ticketsmodule_providers",{"_index":1920,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule",{"_index":2017,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule_exports",{"_index":2018,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule_providers",{"_index":2019,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2100,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2103,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2102,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2101,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1193,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"injectables/PaystackService.html":{}}}],["color",{"_index":1259,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["colors",{"_index":1234,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["column",{"_index":897,"title":{},"body":{"entities/Event.html":{},"entities/Payment.html":{},"entities/Subscriber.html":{},"entities/Ticket.html":{},"entities/User.html":{}}}],["column('decimal",{"_index":1554,"title":{},"body":{"entities/Payment.html":{}}}],["column({nullable",{"_index":1558,"title":{},"body":{"entities/Payment.html":{},"entities/Ticket.html":{}}}],["column({type",{"_index":891,"title":{},"body":{"entities/Event.html":{},"entities/Payment.html":{},"entities/Subscriber.html":{},"entities/Ticket.html":{},"entities/User.html":{}}}],["column({unique",{"_index":1564,"title":{},"body":{"entities/Payment.html":{}}}],["come",{"_index":2271,"title":{},"body":{"index.html":{}}}],["commas",{"_index":2356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commit",{"_index":739,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["committed",{"_index":742,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["common/interceptors/data",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/pagination.module",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":1818,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["comparepassword",{"_index":449,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":451,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparing",{"_index":455,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":749,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["compodoc/compodoc",{"_index":2174,"title":{},"body":{"dependencies.html":{}}}],["conference",{"_index":2224,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["config",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"modules/MailModule.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["config.get('appconfig.mailhost",{"_index":1416,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtppassword",{"_index":1418,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtpusername",{"_index":1417,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["config/enviroment.validation",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":371,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["config/paths.config",{"_index":1453,"title":{},"body":{"injectables/MailService.html":{}}}],["config/paystack.config",{"_index":1653,"title":{},"body":{"modules/PaystackModule.html":{},"injectables/PaystackService.html":{}}}],["configmodule",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaystackModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(paystackconfig",{"_index":1655,"title":{},"body":{"modules/PaystackModule.html":{}}}],["configmodule.forroot",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"modules/MailModule.html":{},"injectables/PaystackService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["configure",{"_index":1413,"title":{},"body":{"modules/MailModule.html":{}}}],["confirmation",{"_index":1478,"title":{},"body":{"injectables/MailService.html":{}}}],["conflictexception",{"_index":504,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{},"injectables/UploadsService.html":{}}}],["conflictexception('could",{"_index":748,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["conflictexception(err",{"_index":1736,"title":{},"body":{"injectables/PaystackService.html":{}}}],["conflictexception(error",{"_index":714,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/UploadsService.html":{}}}],["connect",{"_index":718,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["connecting",{"_index":851,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["connection",{"_index":753,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["console.log",{"_index":1415,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log('before",{"_index":882,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('creating",{"_index":1725,"title":{},"body":{"injectables/PaystackService.html":{}}}],["console.log('payment",{"_index":1746,"title":{},"body":{"injectables/PaystackService.html":{}}}],["console.log('re",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('urls",{"_index":1733,"title":{},"body":{"injectables/PaystackService.html":{}}}],["console.log(error",{"_index":860,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GetUserEventsProvider.html":{}}}],["console.log(newurl",{"_index":1526,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["const",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/EventsService.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":2353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(buyticketprovider",{"_index":1935,"title":{},"body":{"injectables/TicketsService.html":{}}}],["constructor(configservice",{"_index":872,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/UploadToAwsProvider.html":{}}}],["constructor(createeventsprovider",{"_index":1052,"title":{},"body":{"injectables/EventsService.html":{}}}],["constructor(createuserprovider",{"_index":2120,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(eventsrepository",{"_index":1381,"title":{},"body":{"injectables/GetUserEventsProvider.html":{}}}],["constructor(hashingprovider",{"_index":1773,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["constructor(jwtservice",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["constructor(mailerservice",{"_index":1438,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(paystackconfiguration",{"_index":1661,"title":{},"body":{"injectables/PaystackService.html":{}}}],["constructor(private",{"_index":1799,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(reflector",{"_index":404,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(request",{"_index":1502,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(signinprovider",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(subscriberrepository",{"_index":1879,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["constructor(ticketrepository",{"_index":480,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["constructor(ticketsrepository",{"_index":1961,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["constructor(uploadtoawsprovider",{"_index":2026,"title":{},"body":{"injectables/UploadsService.html":{}}}],["constructor(usersrepository",{"_index":568,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{}}}],["constructor(usersservice",{"_index":699,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/SignInProvider.html":{}}}],["containing",{"_index":1340,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["contains",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["content",{"_index":1019,"title":{},"body":{"controllers/EventsController.html":{}}}],["contenttype",{"_index":2000,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["context",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":435,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":434,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":123,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('events",{"_index":1007,"title":{},"body":{"controllers/EventsController.html":{}}}],["controller('paystack",{"_index":1632,"title":{},"body":{"controllers/PaystackController.html":{}}}],["controller('subscribers",{"_index":1862,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["controller('tickets",{"_index":1917,"title":{},"body":{"controllers/TicketsController.html":{}}}],["controller('users",{"_index":2084,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":125,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":2286,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2150,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":437,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"injectables/CreaterUsersProviders.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PaginationProvider.html":{},"classes/PatchTicketDto.html":{},"injectables/PaystackService.html":{},"injectables/UsersService.html":{}}}],["create(createuserdto",{"_index":2126,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["createdat",{"_index":889,"title":{},"body":{"entities/Event.html":{},"entities/Payment.html":{},"entities/Ticket.html":{}}}],["createdatecolumn",{"_index":900,"title":{},"body":{"entities/Event.html":{},"entities/Payment.html":{},"entities/Ticket.html":{}}}],["createevent",{"_index":698,"title":{},"body":{"injectables/CreateEventProvider.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["createevent(createeventdto",{"_index":703,"title":{},"body":{"injectables/CreateEventProvider.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["createeventdto",{"_index":584,"title":{"classes/CreateEventDto.html":{}},"body":{"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"coverage.html":{}}}],["createeventdto.tickets",{"_index":731,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["createeventprovider",{"_index":695,"title":{"injectables/CreateEventProvider.html":{}},"body":{"injectables/CreateEventProvider.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{},"overview.html":{}}}],["createeventsprovider",{"_index":1056,"title":{},"body":{"injectables/EventsService.html":{}}}],["createhash('sha256",{"_index":1176,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{},"injectables/ResetPasswordProvider.html":{}}}],["createhmac('sha512",{"_index":1738,"title":{},"body":{"injectables/PaystackService.html":{}}}],["createmanyticketsdto",{"_index":756,"title":{"classes/CreateManyTicketsDto.html":{}},"body":{"classes/CreateManyTicketsDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":2344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":1952,"title":{},"body":{"injectables/TicketsService.html":{}}}],["creater",{"_index":2139,"title":{},"body":{"injectables/UsersService.html":{}}}],["createrusersproviders",{"_index":826,"title":{"injectables/CreaterUsersProviders.html":{}},"body":{"injectables/CreaterUsersProviders.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creates",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["createsubscriber",{"_index":1844,"title":{},"body":{"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["createsubscriber(@body",{"_index":1864,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["createsubscriber(createsubscriberdto",{"_index":1846,"title":{},"body":{"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["createsubscriberdto",{"_index":768,"title":{"classes/CreateSubscriberDto.html":{}},"body":{"classes/CreateSubscriberDto.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"coverage.html":{}}}],["createticketdto",{"_index":668,"title":{"classes/CreateTicketDto.html":{}},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateTicketDto.html":{},"classes/PatchTicketDto.html":{},"coverage.html":{}}}],["createuser",{"_index":829,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":2088,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":832,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"controllers/UsersController.html":{}}}],["createuserdto",{"_index":782,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":845,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["createuserprovider",{"_index":2124,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":589,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["creatng",{"_index":1883,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["creator",{"_index":711,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["crypto",{"_index":1165,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{},"injectables/PaystackService.html":{},"injectables/ResetPasswordProvider.html":{}}}],["ctx",{"_index":2347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1493,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentdate",{"_index":1310,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["currentpage",{"_index":1491,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["custom",{"_index":1018,"title":{},"body":{"controllers/EventsController.html":{},"injectables/GenerateTicketPdfProvider.html":{},"controllers/PaystackController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["customfont",{"_index":1231,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["data",{"_index":459,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PaystackService.html":{}}}],["data')@useinterceptors(undefined)@roles(role.eventorganiser)@post",{"_index":950,"title":{},"body":{"controllers/EventsController.html":{}}}],["data.interface",{"_index":506,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/CreateEventProvider.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{}}}],["data.interface.ts",{"_index":115,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["database",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"entities/Subscriber.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"entities/User.html":{}}}],["databaseconfig",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":185,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":700,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["date",{"_index":623,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"entities/Payment.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Ticket.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["date().gettime().tostring().trim",{"_index":2015,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["date().tolocaledatestring",{"_index":1311,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"injectables/MailService.html":{}}}],["date(date.now",{"_index":1835,"title":{},"body":{"injectables/StoreOtpAndExpireProvider.html":{}}}],["datemaps",{"_index":1083,"title":{},"body":{"injectables/EventsService.html":{}}}],["datemaps[item",{"_index":1100,"title":{},"body":{"injectables/EventsService.html":{}}}],["dateofpurchase",{"_index":1481,"title":{},"body":{"injectables/MailService.html":{}}}],["datequeries",{"_index":1097,"title":{},"body":{"injectables/EventsService.html":{}}}],["datequeries.map((item",{"_index":1099,"title":{},"body":{"injectables/EventsService.html":{}}}],["db",{"_index":458,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/SubscribersController.html":{}}}],["declarations",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoraror",{"_index":2358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorator",{"_index":1793,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["decorator/auth.decorator",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators",{"_index":130,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"classes/ForgotPassswordDto.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":2281,"title":{},"body":{"index.html":{}}}],["default",{"_index":419,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/MailModule.html":{},"classes/PaginationQueryDto.html":{},"entities/Payment.html":{},"entities/Ticket.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":403,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultroletype",{"_index":1797,"title":{},"body":{"guards/RolesGuard.html":{}}}],["defined",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":986,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/UsersController.html":{}}}],["delete('/:id",{"_index":1026,"title":{},"body":{"controllers/EventsController.html":{}}}],["delete('/:userid",{"_index":2097,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":956,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted'})@apiparam({name",{"_index":2065,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteevent",{"_index":940,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["deleteevent(@param('id",{"_index":1027,"title":{},"body":{"controllers/EventsController.html":{}}}],["deleteevent(id",{"_index":953,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["deletes",{"_index":954,"title":{},"body":{"controllers/EventsController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["deletesubscriber",{"_index":1845,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["deletesubscriber(subscriberid",{"_index":1850,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["deleteuser",{"_index":2058,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(@param('userid",{"_index":2098,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(userid",{"_index":2064,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleting",{"_index":961,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletion",{"_index":2129,"title":{},"body":{"injectables/UsersService.html":{}}}],["deny",{"_index":103,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["dependencies",{"_index":141,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["description",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1272,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"controllers/UsersController.html":{}}}],["development",{"_index":2258,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":2292,"title":{},"body":{"index.html":{}}}],["diff",{"_index":427,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["digest('hex",{"_index":1178,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{},"injectables/PaystackService.html":{},"injectables/ResetPasswordProvider.html":{}}}],["dir",{"_index":1427,"title":{},"body":{"modules/MailModule.html":{}}}],["disable",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["discord",{"_index":2278,"title":{},"body":{"index.html":{}}}],["dive",{"_index":2280,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1633,"title":{},"body":{"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["dots",{"_index":1296,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["dotted",{"_index":1294,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["draw",{"_index":1246,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["dto",{"_index":588,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPassswordDto.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/TicketTypeDto.html":{}}}],["dtos/create",{"_index":706,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/forgot",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ForgotPasswordProvider.html":{}}}],["dtos/get",{"_index":1000,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/pagination",{"_index":1507,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":1915,"title":{},"body":{"controllers/TicketsController.html":{}}}],["dtos/payment.dto",{"_index":1630,"title":{},"body":{"controllers/PaystackController.html":{},"injectables/PaystackService.html":{}}}],["dtos/refresh",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenProvider.html":{}}}],["dtos/reset",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResetPasswordProvider.html":{}}}],["dtos/sign",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SignInProvider.html":{}}}],["dummy",{"_index":240,"title":{},"body":{"injectables/AppService.html":{}}}],["e2e",{"_index":2266,"title":{},"body":{"index.html":{}}}],["each",{"_index":694,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{}}}],["eager",{"_index":925,"title":{},"body":{"entities/Event.html":{},"entities/User.html":{}}}],["echibitions",{"_index":2228,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["efficient",{"_index":2248,"title":{},"body":{"index.html":{}}}],["eight",{"_index":802,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejim",{"_index":818,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejim'})@isstring()@minlength(3)@maxlength(96",{"_index":796,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejs",{"_index":2188,"title":{},"body":{"dependencies.html":{}}}],["ejsadapter",{"_index":1408,"title":{},"body":{"modules/MailModule.html":{}}}],["eko",{"_index":648,"title":{},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{}}}],["email",{"_index":118,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{},"injectables/PaystackService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email.provider",{"_index":2110,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":1136,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:14",{"_index":1138,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:32",{"_index":1140,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["encrypted",{"_index":453,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["end",{"_index":622,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{}}}],["enddate",{"_index":1362,"title":{},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{}}}],["endpoint",{"_index":944,"title":{},"body":{"controllers/EventsController.html":{}}}],["ensures",{"_index":740,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["entered",{"_index":460,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["enterprise",{"_index":2296,"title":{},"body":{"index.html":{}}}],["entities",{"_index":887,"title":{},"body":{"entities/Event.html":{},"entities/Payment.html":{},"entities/Subscriber.html":{},"entities/Ticket.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":732,"title":{"entities/Event.html":{},"entities/Payment.html":{},"entities/Subscriber.html":{},"entities/Ticket.html":{},"entities/User.html":{}},"body":{"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"entities/Event.html":{},"entities/Payment.html":{},"entities/Subscriber.html":{},"entities/Ticket.html":{},"entities/User.html":{},"coverage.html":{}}}],["entitymanager",{"_index":1946,"title":{},"body":{"injectables/TicketsService.html":{}}}],["entries",{"_index":969,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["enum",{"_index":676,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"entities/Payment.html":{},"entities/Ticket.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":2206,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/account",{"_index":814,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["enums/attendancemode.enum",{"_index":674,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["enums/auth",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["enums/eventcategory.enum",{"_index":665,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["enums/eventpricetype.enum",{"_index":673,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["enums/paymentstatus.enum",{"_index":1577,"title":{},"body":{"entities/Payment.html":{}}}],["enums/ticket",{"_index":514,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["env",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["enviroment",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["enviromentvalidation",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":446,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/PaystackService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["error",{"_index":440,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["error('purchase",{"_index":1714,"title":{},"body":{"injectables/PaystackService.html":{}}}],["eslint",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["eslint/no",{"_index":97,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["event",{"_index":525,"title":{"entities/Event.html":{}},"body":{"injectables/BuyTicketProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTicketPdfProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/MailService.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["event'})@apiresponse({status",{"_index":945,"title":{},"body":{"controllers/EventsController.html":{}}}],["event.dto",{"_index":707,"title":{},"body":{"injectables/CreateEventProvider.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["event.dto.ts",{"_index":587,"title":{},"body":{"classes/CreateEventDto.html":{},"coverage.html":{}}}],["event.dto.ts:104",{"_index":650,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:116",{"_index":605,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:128",{"_index":654,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:139",{"_index":634,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:150",{"_index":627,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:162",{"_index":636,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:174",{"_index":630,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:191",{"_index":647,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:33",{"_index":641,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:45",{"_index":614,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:57",{"_index":644,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:69",{"_index":611,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:80",{"_index":621,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:92",{"_index":639,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.entity",{"_index":708,"title":{},"body":{"injectables/CreateEventProvider.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{}}}],["event.owner",{"_index":2045,"title":{},"body":{"entities/User.html":{}}}],["event.provider",{"_index":1043,"title":{},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["event.provider.ts",{"_index":697,"title":{},"body":{"injectables/CreateEventProvider.html":{},"coverage.html":{}}}],["event.provider.ts:18",{"_index":702,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["event.provider.ts:49",{"_index":705,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["event.tickets",{"_index":1896,"title":{},"body":{"entities/Ticket.html":{}}}],["eventattendancemode",{"_index":606,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"miscellaneous/enumerations.html":{}}}],["eventcategory",{"_index":612,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"miscellaneous/enumerations.html":{}}}],["eventenddate",{"_index":593,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["eventendtime",{"_index":594,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["eventid",{"_index":520,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"classes/TicketTypeDto.html":{}}}],["eventname",{"_index":1214,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"injectables/MailService.html":{},"injectables/PaystackService.html":{},"injectables/TicketsService.html":{}}}],["eventorganiser",{"_index":2218,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eventpricetype",{"_index":642,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"miscellaneous/enumerations.html":{}}}],["eventpurchaser",{"_index":2235,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eventquery",{"_index":978,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{}}}],["eventquery.limit",{"_index":1387,"title":{},"body":{"injectables/GetUserEventsProvider.html":{}}}],["eventquery.page",{"_index":1388,"title":{},"body":{"injectables/GetUserEventsProvider.html":{}}}],["eventquery['attendance",{"_index":1106,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventquery['category",{"_index":1102,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventquery['date'].split",{"_index":1098,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventquery['name",{"_index":1108,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventquery['name'].slice().split",{"_index":1109,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventquery['price",{"_index":1104,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventquery[key",{"_index":1096,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventresult",{"_index":729,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["events",{"_index":518,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"classes/CreateEventDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/MailService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["events.controller",{"_index":1044,"title":{},"body":{"modules/EventsModule.html":{}}}],["events.dto",{"_index":1001,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"controllers/UsersController.html":{}}}],["events.dto.ts",{"_index":1359,"title":{},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"coverage.html":{}}}],["events.dto.ts:14",{"_index":1372,"title":{},"body":{"classes/GetEventsBaseDto.html":{}}}],["events.dto.ts:21",{"_index":1369,"title":{},"body":{"classes/GetEventsBaseDto.html":{}}}],["events.dto.ts:28",{"_index":1370,"title":{},"body":{"classes/GetEventsBaseDto.html":{}}}],["events.dto.ts:35",{"_index":1366,"title":{},"body":{"classes/GetEventsBaseDto.html":{}}}],["events.dto.ts:42",{"_index":1367,"title":{},"body":{"classes/GetEventsBaseDto.html":{}}}],["events.dto.ts:49",{"_index":1371,"title":{},"body":{"classes/GetEventsBaseDto.html":{}}}],["events.dto.ts:56",{"_index":1365,"title":{},"body":{"classes/GetEventsBaseDto.html":{}}}],["events.provider",{"_index":1048,"title":{},"body":{"modules/EventsModule.html":{},"controllers/UsersController.html":{}}}],["events.provider.ts",{"_index":1379,"title":{},"body":{"injectables/GetUserEventsProvider.html":{},"coverage.html":{}}}],["events.provider.ts:14",{"_index":1382,"title":{},"body":{"injectables/GetUserEventsProvider.html":{}}}],["events.provider.ts:45",{"_index":1384,"title":{},"body":{"injectables/GetUserEventsProvider.html":{}}}],["events/events.module",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["eventscontroller",{"_index":938,"title":{"controllers/EventsController.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["eventsmodule",{"_index":151,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["eventsquery",{"_index":2078,"title":{},"body":{"controllers/UsersController.html":{}}}],["eventsrepository",{"_index":1053,"title":{},"body":{"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{}}}],["eventsservice",{"_index":483,"title":{"injectables/EventsService.html":{}},"body":{"injectables/BuyTicketProvider.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{},"overview.html":{}}}],["eventstartdate",{"_index":595,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/EventsService.html":{}}}],["eventstartdateandtime",{"_index":1012,"title":{},"body":{"controllers/EventsController.html":{}}}],["eventstarttime",{"_index":596,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["example",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventsController.html":{},"classes/ForgotPassswordDto.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"controllers/SubscribersController.html":{},"classes/TicketTypeDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["example1",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["example2",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["examples",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["exception",{"_index":853,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/SignInProvider.html":{}}}],["excetion",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["exclude",{"_index":2055,"title":{},"body":{"entities/User.html":{}}}],["execute",{"_index":1957,"title":{},"body":{"injectables/TicketsService.html":{}}}],["execution",{"_index":429,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["executioncontext",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exhibitions",{"_index":2227,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["exist",{"_index":1133,"title":{},"body":{"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["existinguser",{"_index":840,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["exists",{"_index":843,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/ResetPasswordProvider.html":{}}}],["expect",{"_index":762,"title":{},"body":{"classes/CreateManyTicketsDto.html":{}}}],["expecting",{"_index":765,"title":{},"body":{"classes/CreateManyTicketsDto.html":{}}}],["experience",{"_index":2283,"title":{},"body":{"index.html":{}}}],["expire.provider",{"_index":2112,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["expire.provider.ts",{"_index":1828,"title":{},"body":{"injectables/StoreOtpAndExpireProvider.html":{},"coverage.html":{}}}],["expire.provider.ts:10",{"_index":1831,"title":{},"body":{"injectables/StoreOtpAndExpireProvider.html":{}}}],["expire.provider.ts:29",{"_index":1833,"title":{},"body":{"injectables/StoreOtpAndExpireProvider.html":{}}}],["expires",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["expiresin",{"_index":1334,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["expiry",{"_index":1144,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["export",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/EventsController.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":704,"title":{},"body":{"injectables/CreateEventProvider.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["extends",{"_index":1377,"title":{},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"classes/PatchTicketDto.html":{}}}],["extension",{"_index":2012,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["extract",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/UploadToAwsProvider.html":{}}}],["extracting",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["failed",{"_index":1722,"title":{},"body":{"injectables/PaystackService.html":{},"miscellaneous/enumerations.html":{}}}],["failure",{"_index":1686,"title":{},"body":{"injectables/PaystackService.html":{}}}],["false",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/MailModule.html":{},"entities/Payment.html":{},"controllers/PaystackController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"entities/Subscriber.html":{},"entities/Ticket.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["false})@exclude",{"_index":2050,"title":{},"body":{"entities/User.html":{}}}],["favour",{"_index":816,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":793,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour233",{"_index":819,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{}}}],["favour233'})@isnotempty()@isstring",{"_index":1810,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour233'})@isstring()@isnotempty",{"_index":1769,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["favour233'})@isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":798,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour@gmail.com",{"_index":775,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPassswordDto.html":{},"classes/SignInDto.html":{}}}],["favour@gmail.com'})@isemail()@isnotempty",{"_index":1158,"title":{},"body":{"classes/ForgotPassswordDto.html":{},"classes/SignInDto.html":{}}}],["favour@gmail.com'})@isemail()@maxlength(96)@isnotempty",{"_index":772,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{}}}],["festivals",{"_index":2225,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fetch",{"_index":1141,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["fetched",{"_index":966,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["fetched'})@apiparam({name",{"_index":2079,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":2269,"title":{},"body":{"index.html":{}}}],["field",{"_index":2345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fields",{"_index":1970,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1998,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.mimetype",{"_index":2001,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.originalname.split('.')[0",{"_index":2006,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["filebuffer",{"_index":1989,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["fileinterceptor",{"_index":998,"title":{},"body":{"controllers/EventsController.html":{}}}],["filename",{"_index":1986,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["fileupload",{"_index":1978,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["fileupload(file",{"_index":1982,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["filter",{"_index":554,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["filter((ticket",{"_index":557,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["finally",{"_index":751,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["finalresponse",{"_index":1531,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":522,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1051,"title":{},"body":{"injectables/EventsService.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["findall(eventquery",{"_index":1059,"title":{},"body":{"injectables/EventsService.html":{}}}],["findall(userquery",{"_index":2130,"title":{},"body":{"injectables/UsersService.html":{}}}],["findallevents",{"_index":941,"title":{},"body":{"controllers/EventsController.html":{}}}],["findallevents(@query",{"_index":1030,"title":{},"body":{"controllers/EventsController.html":{}}}],["findallevents(eventquery",{"_index":962,"title":{},"body":{"controllers/EventsController.html":{}}}],["findallusers",{"_index":2059,"title":{},"body":{"controllers/UsersController.html":{}}}],["findallusers(@query",{"_index":2090,"title":{},"body":{"controllers/UsersController.html":{}}}],["findallusers(usersquery",{"_index":2069,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyid",{"_index":1128,"title":{},"body":{"injectables/FindOneByIdProvider.html":{}}}],["findbyid(id",{"_index":1130,"title":{},"body":{"injectables/FindOneByIdProvider.html":{}}}],["findeventbyid",{"_index":942,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["findeventbyid(@param('eventid",{"_index":1034,"title":{},"body":{"controllers/EventsController.html":{}}}],["findeventbyid(eventid",{"_index":979,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["finding",{"_index":1127,"title":{},"body":{"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{}}}],["findonebyemail",{"_index":1137,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":1139,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyid",{"_index":2118,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":2134,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyidprovider",{"_index":1124,"title":{"injectables/FindOneByIdProvider.html":{}},"body":{"injectables/FindOneByIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findoneuserbyemailprovider",{"_index":1135,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["finds",{"_index":964,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["finduser",{"_index":2060,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduser(@param('userid",{"_index":2093,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduser(userid",{"_index":2074,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduserbyresetotpandexpiresprovider",{"_index":2122,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyresetotpandexpirytime",{"_index":1147,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyresetotpandexpirytime(otp",{"_index":1149,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyresetotpandexpirytimeprovider",{"_index":1143,"title":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{}},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["finduserevents",{"_index":2061,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduserevents(userid",{"_index":2077,"title":{},"body":{"controllers/UsersController.html":{}}}],["fire",{"_index":443,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":792,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":786,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MailService.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["follow",{"_index":2299,"title":{},"body":{"index.html":{}}}],["font",{"_index":1222,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["fontbytes",{"_index":1229,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["fontkit",{"_index":1208,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"dependencies.html":{}}}],["fontpath",{"_index":1225,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["footer",{"_index":1309,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["forbiddenexception",{"_index":1794,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forbiddenexception('user",{"_index":1803,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forgot",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{}}}],["forgotpasssworddto",{"_index":252,"title":{"classes/ForgotPassswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"coverage.html":{}}}],["forgotpassword",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ForgotPasswordProvider.html":{}}}],["forgotpassword(@body",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(forgotpassworddto",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ForgotPasswordProvider.html":{}}}],["forgotpassworddto",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ForgotPasswordProvider.html":{}}}],["forgotpassworddto.email",{"_index":1168,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["forgotpasswordprovider",{"_index":355,"title":{"injectables/ForgotPasswordProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ForgotPasswordProvider.html":{},"coverage.html":{},"overview.html":{}}}],["format",{"_index":880,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["formatting",{"_index":877,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["forwardref",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CreaterUsersProviders.html":{},"modules/EventsModule.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["fot",{"_index":1361,"title":{},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"miscellaneous/functions.html":{}}}],["found",{"_index":1123,"title":{},"body":{"injectables/EventsService.html":{},"injectables/PaystackService.html":{},"guards/RolesGuard.html":{}}}],["framework",{"_index":2246,"title":{},"body":{"index.html":{}}}],["free",{"_index":616,"title":{},"body":{"classes/CreateEventDto.html":{},"miscellaneous/enumerations.html":{}}}],["free'})@isenum(eventpricetype)@isnotempty",{"_index":643,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["fs",{"_index":1206,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["fs.readfilesync(fontpath",{"_index":1230,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["full",{"_index":2295,"title":{},"body":{"index.html":{}}}],["function",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":2237,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuunction",{"_index":574,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{}}}],["gateway",{"_index":1461,"title":{},"body":{"injectables/MailService.html":{}}}],["gaurding",{"_index":2359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["general",{"_index":692,"title":{},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"classes/TicketTypeDto.html":{}}}],["general'})@isarray()@isnotempty()@validatenested({each",{"_index":1587,"title":{},"body":{"classes/PaymentDto.html":{}}}],["general'})@isnotempty()@type(undefined",{"_index":1910,"title":{},"body":{"classes/TicketTypeDto.html":{}}}],["generate",{"_index":467,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TicketsService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["generated",{"_index":2038,"title":{},"body":{"injectables/UploadsService.html":{}}}],["generatefilename",{"_index":1979,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatefilename(file",{"_index":1984,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generateqrcode",{"_index":1187,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["generateqrcode(ticketid",{"_index":1189,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["generates",{"_index":1199,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["generateticketpdf",{"_index":1188,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"injectables/TicketsService.html":{}}}],["generateticketpdf(id",{"_index":1937,"title":{},"body":{"injectables/TicketsService.html":{}}}],["generateticketpdf(ticketdata",{"_index":1196,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["generateticketpdfprovider",{"_index":1184,"title":{"injectables/GenerateTicketPdfProvider.html":{}},"body":{"injectables/GenerateTicketPdfProvider.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["generatetokenprovider",{"_index":1758,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":1328,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":1331,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":356,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generating",{"_index":1191,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PaystackController.html":{},"injectables/TicketsService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["get('/:eventid",{"_index":1033,"title":{},"body":{"controllers/EventsController.html":{}}}],["get('/:subscriberid",{"_index":1866,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["get('/:userid",{"_index":2092,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid/events",{"_index":2094,"title":{},"body":{"controllers/UsersController.html":{}}}],["getauthheader",{"_index":1657,"title":{},"body":{"injectables/PaystackService.html":{}}}],["getdateranges",{"_index":1066,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["geteventsbasedto",{"_index":1357,"title":{"classes/GetEventsBaseDto.html":{}},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"coverage.html":{}}}],["geteventsdto",{"_index":963,"title":{"classes/GetEventsDto.html":{}},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["gethello",{"_index":129,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gettickets",{"_index":1932,"title":{},"body":{"injectables/TicketsService.html":{}}}],["gettickets(queryrunner",{"_index":1939,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getting",{"_index":381,"title":{"index.html":{}},"body":{"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/PaystackService.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["getuserevents",{"_index":1380,"title":{},"body":{"injectables/GetUserEventsProvider.html":{}}}],["getuserevents(userid",{"_index":1383,"title":{},"body":{"injectables/GetUserEventsProvider.html":{}}}],["getusereventsprovider",{"_index":1040,"title":{"injectables/GetUserEventsProvider.html":{}},"body":{"modules/EventsModule.html":{},"injectables/GetUserEventsProvider.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["getusersbasedto",{"_index":1389,"title":{"classes/GetUsersBaseDto.html":{}},"body":{"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"coverage.html":{}}}],["getusersdto",{"_index":1393,"title":{"classes/GetUsersDto.html":{}},"body":{"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["global",{"_index":1403,"title":{},"body":{"modules/MailModule.html":{}}}],["gotten",{"_index":1764,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["grab",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["graph",{"_index":2289,"title":{},"body":{"index.html":{}}}],["grow",{"_index":2309,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["guarding",{"_index":2352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["handle",{"_index":852,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"controllers/PaystackController.html":{}}}],["handlepaymentwebhook",{"_index":1608,"title":{},"body":{"controllers/PaystackController.html":{}}}],["handlepaymentwebhook(body",{"_index":1610,"title":{},"body":{"controllers/PaystackController.html":{}}}],["hands",{"_index":2282,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2272,"title":{},"body":{"index.html":{}}}],["hased",{"_index":1778,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["hash",{"_index":1737,"title":{},"body":{"injectables/PaystackService.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashed",{"_index":465,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashedotp",{"_index":1175,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{},"injectables/ResetPasswordProvider.html":{}}}],["hashedpassword",{"_index":1780,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["hashing",{"_index":464,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashing.provider",{"_index":466,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":354,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":450,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":462,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashprovider",{"_index":1166,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{},"injectables/ResetPasswordProvider.html":{}}}],["hasrole",{"_index":1804,"title":{},"body":{"guards/RolesGuard.html":{}}}],["hdfbwojefbnqpkfbjoqfehfewfeqwf234jr",{"_index":1754,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["hdfbwojefbnqpkfbjoqfehfewfeqwf234jr'})@isnotempty()@isstring",{"_index":1752,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["header",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/EventsController.html":{},"injectables/GenerateTicketPdfProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"controllers/UsersController.html":{}}}],["headers",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{}}}],["headers('x",{"_index":1645,"title":{},"body":{"controllers/PaystackController.html":{}}}],["height",{"_index":1255,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["hello",{"_index":132,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["help",{"_index":2293,"title":{},"body":{"index.html":{}}}],["here",{"_index":746,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{},"index.html":{}}}],["hive",{"_index":1456,"title":{},"body":{"injectables/MailService.html":{}}}],["hive's",{"_index":1474,"title":{},"body":{"injectables/MailService.html":{}}}],["host",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["hotel",{"_index":1010,"title":{},"body":{"controllers/EventsController.html":{}}}],["hotels",{"_index":685,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["hotels'})@isoptional()@isstring()@maxlength(1024",{"_index":649,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["http://localhost:3000/api/v1/tickets?${ticketid",{"_index":1322,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["http://localhost:3000/events/${paymentdto.eventid}/get",{"_index":1692,"title":{},"body":{"injectables/PaystackService.html":{}}}],["http://localhost:3001",{"_index":1467,"title":{},"body":{"injectables/MailService.html":{}}}],["httpcode",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaystackController.html":{}}}],["httpcode(httpstatus.ok",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaystackController.html":{}}}],["httpexception",{"_index":1676,"title":{},"body":{"injectables/PaystackService.html":{}}}],["httpexception('invalid",{"_index":1740,"title":{},"body":{"injectables/PaystackService.html":{}}}],["https://aws",{"_index":637,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["https://nestjs.com",{"_index":2320,"title":{},"body":{"index.html":{}}}],["https://www.starboy.com",{"_index":687,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["https://www.starboy.com'})@isoptional()@isstring()@maxlength(1024",{"_index":653,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["https:aws",{"_index":1011,"title":{},"body":{"controllers/EventsController.html":{}}}],["httpstatus",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{}}}],["httpstatus.bad_request",{"_index":1743,"title":{},"body":{"injectables/PaystackService.html":{}}}],["httpstatus.forbidden",{"_index":1741,"title":{},"body":{"injectables/PaystackService.html":{}}}],["ibewfib9",{"_index":1642,"title":{},"body":{"controllers/PaystackController.html":{}}}],["id",{"_index":122,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreaterUsersProviders.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/MailService.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiparam({name",{"_index":981,"title":{},"body":{"controllers/EventsController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["id'})@apiresponse({status",{"_index":980,"title":{},"body":{"controllers/EventsController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["id.provider",{"_index":2115,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":1126,"title":{},"body":{"injectables/FindOneByIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:14",{"_index":1129,"title":{},"body":{"injectables/FindOneByIdProvider.html":{}}}],["id.provider.ts:32",{"_index":1131,"title":{},"body":{"injectables/FindOneByIdProvider.html":{}}}],["identifier",{"_index":982,"title":{},"body":{"controllers/EventsController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["ids",{"_index":1956,"title":{},"body":{"injectables/TicketsService.html":{}}}],["iloghaluagneskc@gmail.com",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["image",{"_index":597,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["image.png",{"_index":683,"title":{},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{}}}],["image.png'})@isurl()@isoptional()@maxlength(1024",{"_index":638,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["image/jpeg",{"_index":2033,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpg'].includes(file.mimetype",{"_index":2035,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/png",{"_index":2034,"title":{},"body":{"injectables/UploadsService.html":{}}}],["imageurl",{"_index":723,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["implements",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["importation",{"_index":1410,"title":{},"body":{"modules/MailModule.html":{}}}],["importing",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["in')@auth(authtype.none)@httpcode(httpstatus.ok",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(eventquery['attendance'].slice().split",{"_index":1107,"title":{},"body":{"injectables/EventsService.html":{}}}],["in(eventquery['category'].slice().split",{"_index":1103,"title":{},"body":{"injectables/EventsService.html":{}}}],["in(eventquery['price'].slice().split",{"_index":1105,"title":{},"body":{"injectables/EventsService.html":{}}}],["in.dto",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["in.dto.ts",{"_index":1808,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:17",{"_index":1809,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:28",{"_index":1811,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.provider",{"_index":368,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1813,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:17",{"_index":1815,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:47",{"_index":1816,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["indetifying",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":2068,"title":{},"body":{"controllers/UsersController.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inhjecting",{"_index":838,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["initialized",{"_index":1941,"title":{},"body":{"injectables/TicketsService.html":{}}}],["initializepayment",{"_index":1658,"title":{},"body":{"injectables/PaystackService.html":{}}}],["initializepayment(paymentdto",{"_index":1666,"title":{},"body":{"injectables/PaystackService.html":{}}}],["initializes",{"_index":1622,"title":{},"body":{"controllers/PaystackController.html":{}}}],["initializing",{"_index":1668,"title":{},"body":{"injectables/PaystackService.html":{}}}],["inject",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTokensProvider.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(forwardref",{"_index":839,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["inject(paystackconfig.key",{"_index":1682,"title":{},"body":{"injectables/PaystackService.html":{}}}],["inject(request",{"_index":1511,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":53,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PaymentsService.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PaymentsService.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":237,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PaymentsService.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":135,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":508,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UsersService.html":{}}}],["injectrepository(event",{"_index":1068,"title":{},"body":{"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{}}}],["injectrepository(subscriber",{"_index":1888,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["injectrepository(ticket",{"_index":517,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["injectrepository(user",{"_index":578,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/UsersService.html":{}}}],["inlinecssenabled",{"_index":1431,"title":{},"body":{"modules/MailModule.html":{}}}],["inorder",{"_index":1509,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["inperson",{"_index":2221,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["input",{"_index":456,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["installcompile",{"_index":2256,"title":{},"body":{"index.html":{}}}],["instance",{"_index":444,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["integer",{"_index":1170,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{},"entities/Ticket.html":{}}}],["interact",{"_index":2290,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":871,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":874,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interceptor",{"_index":870,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":111,"title":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"coverage.html":{}}}],["interfaces",{"_index":113,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/active",{"_index":1341,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["interfaces/paginated.interface",{"_index":1510,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["intersectiontype",{"_index":1373,"title":{},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{}}}],["invalid",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["inversejoincolumn",{"_index":1571,"title":{},"body":{"entities/Payment.html":{}}}],["isarray",{"_index":655,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{}}}],["isdate",{"_index":656,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{}}}],["isdate()@isoptional",{"_index":1368,"title":{},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetUsersBaseDto.html":{}}}],["isemail",{"_index":774,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPassswordDto.html":{},"classes/SignInDto.html":{}}}],["isenum",{"_index":657,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{}}}],["isenum(accounttype",{"_index":823,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(eventattendancemode",{"_index":681,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isenum(eventcategory",{"_index":678,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isenum(eventpricetype",{"_index":679,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isenum(role",{"_index":825,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isequal",{"_index":1819,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isglobal",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":781,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"classes/ResetPasswordDto.html":{},"classes/TicketTypeDto.html":{}}}],["isint()@isnotempty",{"_index":777,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["island",{"_index":603,"title":{},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{}}}],["isnotempty",{"_index":658,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPassswordDto.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/TicketTypeDto.html":{}}}],["isoptional",{"_index":659,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@ispositive",{"_index":1539,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":1543,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":660,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":779,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isstring()@isoptional",{"_index":1364,"title":{},"body":{"classes/GetEventsBaseDto.html":{}}}],["issuer",{"_index":1345,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["isurl",{"_index":661,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["item",{"_index":1112,"title":{},"body":{"injectables/EventsService.html":{}}}],["item.id",{"_index":544,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["item.length",{"_index":543,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["item.type",{"_index":540,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["items",{"_index":759,"title":{},"body":{"classes/CreateManyTicketsDto.html":{},"classes/PaginationQueryDto.html":{}}}],["itemsperpage",{"_index":1489,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["jbfwihfubfjkebiejhfbw",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["job",{"_index":2302,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2304,"title":{},"body":{"index.html":{}}}],["joi",{"_index":2191,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1110,"title":{},"body":{"injectables/EventsService.html":{},"modules/MailModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":1428,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":1570,"title":{},"body":{"entities/Payment.html":{},"entities/Ticket.html":{}}}],["jointable",{"_index":1575,"title":{},"body":{"entities/Payment.html":{}}}],["jsbarcode",{"_index":2193,"title":{},"body":{"dependencies.html":{}}}],["jsbfiwhvfquobdfj",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jwtconfig",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jwtconfiguration",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jwtmodule",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["kamil",{"_index":2317,"title":{},"body":{"index.html":{}}}],["kelechi",{"_index":2086,"title":{},"body":{"controllers/UsersController.html":{}}}],["key",{"_index":1095,"title":{},"body":{"injectables/EventsService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["keyof",{"_index":2346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyword",{"_index":418,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["kobo",{"_index":1696,"title":{},"body":{"injectables/PaystackService.html":{}}}],["labels",{"_index":1281,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["labelx",{"_index":1276,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["lagos",{"_index":602,"title":{},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{}}}],["last",{"_index":795,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":787,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["later",{"_index":850,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["learn",{"_index":2275,"title":{},"body":{"index.html":{}}}],["left",{"_index":529,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["legend",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":894,"title":{},"body":{"entities/Event.html":{},"entities/Subscriber.html":{},"entities/Ticket.html":{},"entities/User.html":{}}}],["let's",{"_index":1469,"title":{},"body":{"injectables/MailService.html":{}}}],["letter",{"_index":806,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lib",{"_index":1205,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"dependencies.html":{}}}],["lib/fontkit",{"_index":1209,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"dependencies.html":{}}}],["license",{"_index":2323,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":2307,"title":{},"body":{"index.html":{}}}],["limit",{"_index":968,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["line",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTicketPdfProvider.html":{}}}],["linespacing",{"_index":1279,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["link",{"_index":652,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"controllers/PaystackController.html":{},"injectables/TicketsService.html":{}}}],["linkedin",{"_index":2300,"title":{},"body":{"index.html":{}}}],["links",{"_index":1485,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":761,"title":{},"body":{"classes/CreateManyTicketsDto.html":{}}}],["literal",{"_index":1197,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"interfaces/Paginated.html":{}}}],["load",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"injectables/GenerateTicketPdfProvider.html":{}}}],["lock",{"_index":545,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["locked",{"_index":503,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/PaystackService.html":{},"miscellaneous/enumerations.html":{}}}],["lockedat",{"_index":1894,"title":{},"body":{"entities/Ticket.html":{}}}],["lockedtickets",{"_index":549,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["locking",{"_index":502,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["locktickets",{"_index":479,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["locktickets(queryrunner",{"_index":499,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["logged",{"_index":116,"title":{},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{}}}],["loginurl",{"_index":1466,"title":{},"body":{"injectables/MailService.html":{}}}],["longer",{"_index":1156,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{}}}],["looking",{"_index":2301,"title":{},"body":{"index.html":{}}}],["loop",{"_index":441,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["mail",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/ForgotPasswordProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PaystackService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["mail'})@apiresponse({status",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SubscribersController.html":{}}}],["mail/mail.module",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["mailer",{"_index":1414,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["mailermodule",{"_index":1405,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":1411,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":1439,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":152,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules/SubscribersModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":830,"title":{"injectables/MailService.html":{}},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/ForgotPasswordProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PaystackService.html":{},"injectables/SubscribersService.html":{},"coverage.html":{},"overview.html":{}}}],["makes",{"_index":426,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/MailModule.html":{}}}],["many",{"_index":528,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"classes/CreateManyTicketsDto.html":{},"coverage.html":{}}}],["manytomany",{"_index":1576,"title":{},"body":{"entities/Payment.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":1568,"title":{},"body":{"entities/Payment.html":{}}}],["manytoone",{"_index":933,"title":{},"body":{"entities/Event.html":{},"entities/Ticket.html":{}}}],["manytoone(undefined",{"_index":916,"title":{},"body":{"entities/Event.html":{},"entities/Ticket.html":{}}}],["map",{"_index":421,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":885,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((item",{"_index":537,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["map((tickettype",{"_index":533,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["matches",{"_index":812,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":821,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":110,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":1528,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["max",{"_index":1591,"title":{},"body":{"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{}}}],["max(10",{"_index":1595,"title":{},"body":{"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{}}}],["maxlength",{"_index":662,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":684,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["maxlength(2560",{"_index":682,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["maxlength(5",{"_index":690,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["maxlength(96",{"_index":776,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{}}}],["means",{"_index":414,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["meets",{"_index":1791,"title":{},"body":{"guards/RolesGuard.html":{}}}],["message",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/EventsService.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/PaystackService.html":{},"injectables/ResetPasswordProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["meta",{"_index":1486,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":428,"title":{},"body":{"guards/AuthenticationGuard.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PaystackService.html":{},"dependencies.html":{}}}],["method",{"_index":431,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["methods",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mimetype",{"_index":2032,"title":{},"body":{"injectables/UploadsService.html":{}}}],["min",{"_index":1592,"title":{},"body":{"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{}}}],["min(1",{"_index":1594,"title":{},"body":{"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{}}}],["minimum",{"_index":801,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":813,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":817,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":820,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":2205,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["mit",{"_index":2306,"title":{},"body":{"index.html":{}}}],["mode",{"_index":609,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"index.html":{}}}],["modified",{"_index":492,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"controllers/PaystackController.html":{}}}],["modify",{"_index":1684,"title":{},"body":{"injectables/PaystackService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["modifying",{"_index":1944,"title":{},"body":{"injectables/TicketsService.html":{}}}],["modifynum",{"_index":1210,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"injectables/MailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modifynum(string(amount",{"_index":1291,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["modifynum(string(totalamount",{"_index":1480,"title":{},"body":{"injectables/MailService.html":{}}}],["module",{"_index":138,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["modules",{"_index":140,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":1407,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":1409,"title":{},"body":{"modules/MailModule.html":{}}}],["modying",{"_index":490,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["moment",{"_index":848,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["more",{"_index":2276,"title":{},"body":{"index.html":{}}}],["morethan",{"_index":1151,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{}}}],["morethan(new",{"_index":1153,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{}}}],["multipart/form",{"_index":1020,"title":{},"body":{"controllers/EventsController.html":{}}}],["music",{"_index":677,"title":{},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{},"miscellaneous/enumerations.html":{}}}],["music'})@isenum(eventcategory)@isnotempty",{"_index":613,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["myśliwiec",{"_index":2318,"title":{},"body":{"index.html":{}}}],["name",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"entities/Payment.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["name.replace(/|s/g",{"_index":2010,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["need",{"_index":1412,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["nest",{"_index":2241,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["nested",{"_index":766,"title":{},"body":{"classes/CreateManyTicketsDto.html":{}}}],["nestframework",{"_index":2322,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":881,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":1406,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"modules/MailModule.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":999,"title":{},"body":{"controllers/EventsController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventsController.html":{},"classes/ForgotPassswordDto.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"controllers/SubscribersController.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreaterUsersProviders.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/GetUserEventsProvider.html":{},"modules/PaymentsModule.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"modules/TicketsModule.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GetUserEventsProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newly",{"_index":952,"title":{},"body":{"controllers/EventsController.html":{}}}],["newpassword",{"_index":572,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/UsersService.html":{}}}],["newsletter",{"_index":1446,"title":{},"body":{"injectables/MailService.html":{},"injectables/SubscribersService.html":{}}}],["newticket",{"_index":733,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["newtickets",{"_index":713,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["newtickets.push(ticketresult",{"_index":737,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["newurl",{"_index":1524,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${nextpage",{"_index":1535,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${paginationquery.page",{"_index":1534,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${prevpage",{"_index":1536,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${totalpages",{"_index":1533,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=1",{"_index":1532,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":854,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["newuser.accounttype",{"_index":866,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["newuser.email",{"_index":864,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["newuser.firstname",{"_index":862,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["newuser.id",{"_index":861,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["newuser.lastname",{"_index":863,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["newuser.role",{"_index":865,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["newuserobj",{"_index":579,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{}}}],["next",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe",{"_index":884,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["next30days",{"_index":1092,"title":{},"body":{"injectables/EventsService.html":{}}}],["next30daysend",{"_index":1082,"title":{},"body":{"injectables/EventsService.html":{}}}],["next30daysstart",{"_index":1081,"title":{},"body":{"injectables/EventsService.html":{}}}],["next7days",{"_index":1090,"title":{},"body":{"injectables/EventsService.html":{}}}],["next7daysend",{"_index":1080,"title":{},"body":{"injectables/EventsService.html":{}}}],["next7daysstart",{"_index":1079,"title":{},"body":{"injectables/EventsService.html":{}}}],["nextpage",{"_index":1529,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["nigeria",{"_index":686,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["nigeria'})@isoptional()@isstring()@maxlength(1024",{"_index":604,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["node.js",{"_index":2245,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":2195,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":2219,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":1062,"title":{},"body":{"injectables/EventsService.html":{}}}],["notfoundexception(`event",{"_index":1122,"title":{},"body":{"injectables/EventsService.html":{}}}],["notfoundexception(error",{"_index":1120,"title":{},"body":{"injectables/EventsService.html":{}}}],["npm",{"_index":2255,"title":{},"body":{"index.html":{}}}],["null",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":893,"title":{},"body":{"entities/Event.html":{},"entities/Payment.html":{},"entities/Subscriber.html":{},"entities/Ticket.html":{},"entities/User.html":{}}}],["num",{"_index":2354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["num.length",{"_index":2355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":121,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/BuyTicketProvider.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"injectables/PaystackService.html":{},"classes/ResetPasswordDto.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number(ticket.price",{"_index":561,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["obj",{"_index":767,"title":{},"body":{"classes/CreateManyTicketsDto.html":{}}}],["object",{"_index":1339,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["object.keys(eventquery).foreach((key",{"_index":1094,"title":{},"body":{"injectables/EventsService.html":{}}}],["object.keys(whereoptions).length",{"_index":1114,"title":{},"body":{"injectables/EventsService.html":{}}}],["objectliteral",{"_index":1508,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":409,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["oct",{"_index":1013,"title":{},"body":{"controllers/EventsController.html":{}}}],["offer",{"_index":2303,"title":{},"body":{"index.html":{}}}],["official",{"_index":2284,"title":{},"body":{"index.html":{}}}],["onboarding",{"_index":1457,"title":{},"body":{"injectables/MailService.html":{}}}],["ondelete",{"_index":918,"title":{},"body":{"entities/Event.html":{},"entities/Ticket.html":{}}}],["one",{"_index":805,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PaginationProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["onetomany",{"_index":934,"title":{},"body":{"entities/Event.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":923,"title":{},"body":{"entities/Event.html":{},"entities/User.html":{}}}],["ongoing",{"_index":680,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["ongoing'})@isenum(eventattendancemode)@isnotempty",{"_index":610,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["online",{"_index":2222,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["open",{"_index":2308,"title":{},"body":{"index.html":{}}}],["opensans",{"_index":1223,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["optional",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Payment.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":1115,"title":{},"body":{"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{}}}],["options.relations",{"_index":1518,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.select",{"_index":1519,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.where",{"_index":1520,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["otp",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/MailService.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["out",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":2327,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":712,"title":{},"body":{"injectables/CreateEventProvider.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{}}}],["ownerid",{"_index":1969,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["package",{"_index":2173,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":973,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GetUserEventsProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["page.drawimage(qrcodeimageembed",{"_index":1307,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawrectangle",{"_index":1249,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawtext('amount",{"_index":1285,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawtext('event",{"_index":1282,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawtext('ticket",{"_index":1286,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawtext('type",{"_index":1284,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawtext(`${eventname",{"_index":1265,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawtext(`generated",{"_index":1312,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawtext(`n",{"_index":1290,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawtext(dots",{"_index":1298,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawtext(eventname",{"_index":1288,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawtext(id",{"_index":1292,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.drawtext(type",{"_index":1289,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["page.setfont(customfont",{"_index":1233,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pages",{"_index":1488,"title":{},"body":{"interfaces/Paginated.html":{}}}],["paginated",{"_index":1029,"title":{"interfaces/Paginated.html":{}},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paginated'})@apiquery({name",{"_index":967,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["paginating",{"_index":1506,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1069,"title":{},"body":{"injectables/EventsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/UsersService.html":{}}}],["paginationation",{"_index":1385,"title":{},"body":{"injectables/GetUserEventsProvider.html":{}}}],["paginationmodule",{"_index":153,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":1054,"title":{"injectables/PaginationProvider.html":{}},"body":{"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":1501,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery(paginationquery",{"_index":1504,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":1516,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":1515,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":1374,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["paid",{"_index":2232,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["param",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["param('subscriberid",{"_index":1867,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["param('userid",{"_index":2095,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":987,"title":{},"body":{"controllers/EventsController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":2294,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1549,"title":{},"body":{"classes/PatchTicketDto.html":{}}}],["partialtype(createticketdto",{"_index":1546,"title":{},"body":{"classes/PatchTicketDto.html":{}}}],["particular",{"_index":530,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"controllers/EventsController.html":{}}}],["parties",{"_index":2226,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pass",{"_index":1422,"title":{},"body":{"modules/MailModule.html":{}}}],["passing",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["password",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/MailService.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password'})@apiresponse({status",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/ResetPasswordProvider.html":{}}}],["password.dto.ts",{"_index":1157,"title":{},"body":{"classes/ForgotPassswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:17",{"_index":1159,"title":{},"body":{"classes/ForgotPassswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:28",{"_index":1770,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.provider",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["password.provider.ts",{"_index":565,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/ResetPasswordProvider.html":{},"coverage.html":{}}}],["password.provider.ts:10",{"_index":569,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{}}}],["password.provider.ts:11",{"_index":1774,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["password.provider.ts:18",{"_index":1161,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["password.provider.ts:29",{"_index":573,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{}}}],["password.provider.ts:34",{"_index":1775,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["password.provider.ts:48",{"_index":1162,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["password1",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["passwords",{"_index":1397,"title":{},"body":{"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["patch",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{}}}],["patch('/reset",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["patchticketdto",{"_index":519,"title":{"classes/PatchTicketDto.html":{}},"body":{"injectables/BuyTicketProvider.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["path",{"_index":1207,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["path.extname(file.originalname",{"_index":2013,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["path.join",{"_index":1226,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["path.join(root_path",{"_index":1463,"title":{},"body":{"injectables/MailService.html":{}}}],["payforticket",{"_index":1609,"title":{},"body":{"controllers/PaystackController.html":{}}}],["payforticket(paymentdto",{"_index":1621,"title":{},"body":{"controllers/PaystackController.html":{}}}],["paylink",{"_index":1669,"title":{},"body":{"injectables/PaystackService.html":{}}}],["payload",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{}}}],["payment",{"_index":935,"title":{"entities/Payment.html":{}},"body":{"entities/Event.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"classes/TicketTypeDto.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["payment')@roles(role.eventpurchaser",{"_index":1625,"title":{},"body":{"controllers/PaystackController.html":{}}}],["payment.entity",{"_index":1602,"title":{},"body":{"modules/PaymentsModule.html":{}}}],["payment.event",{"_index":936,"title":{},"body":{"entities/Event.html":{}}}],["payment.status",{"_index":1716,"title":{},"body":{"injectables/PaystackService.html":{}}}],["payment_tickets",{"_index":1569,"title":{},"body":{"entities/Payment.html":{}}}],["paymentdata",{"_index":1744,"title":{},"body":{"injectables/PaystackService.html":{}}}],["paymentdata.data.status",{"_index":1747,"title":{},"body":{"injectables/PaystackService.html":{}}}],["paymentdto",{"_index":488,"title":{"classes/PaymentDto.html":{}},"body":{"injectables/BuyTicketProvider.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"classes/TicketTypeDto.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["paymentdto.eventid",{"_index":1700,"title":{},"body":{"injectables/PaystackService.html":{}}}],["paymentdto.tickettypes",{"_index":532,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["paymentid",{"_index":1580,"title":{},"body":{"entities/Payment.html":{}}}],["payments",{"_index":937,"title":{},"body":{"entities/Event.html":{}}}],["payments/enums/paymentstatus.enum",{"_index":1680,"title":{},"body":{"injectables/PaystackService.html":{}}}],["payments/payment.entity",{"_index":1679,"title":{},"body":{"injectables/PaystackService.html":{}}}],["payments/payments.module",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["paymentsmodule",{"_index":154,"title":{"modules/PaymentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentsModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentsservice",{"_index":1599,"title":{"injectables/PaymentsService.html":{}},"body":{"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"coverage.html":{},"overview.html":{}}}],["paymentstatus",{"_index":1566,"title":{},"body":{"entities/Payment.html":{},"injectables/PaystackService.html":{},"miscellaneous/enumerations.html":{}}}],["paymentstatus.failed",{"_index":1723,"title":{},"body":{"injectables/PaystackService.html":{}}}],["paymentstatus.pending",{"_index":1579,"title":{},"body":{"entities/Payment.html":{},"injectables/PaystackService.html":{}}}],["paymentstatus.success",{"_index":1717,"title":{},"body":{"injectables/PaystackService.html":{}}}],["paymentwebhook",{"_index":1659,"title":{},"body":{"injectables/PaystackService.html":{}}}],["paymentwebhook(body",{"_index":1670,"title":{},"body":{"injectables/PaystackService.html":{}}}],["paymet",{"_index":1734,"title":{},"body":{"injectables/PaystackService.html":{}}}],["pays",{"_index":1614,"title":{},"body":{"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["paystack",{"_index":1607,"title":{},"body":{"controllers/PaystackController.html":{},"injectables/PaystackService.html":{}}}],["paystack's",{"_index":1620,"title":{},"body":{"controllers/PaystackController.html":{}}}],["paystack.controller",{"_index":1651,"title":{},"body":{"modules/PaystackModule.html":{}}}],["paystack/dtos/payment.dto",{"_index":512,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/TicketsService.html":{}}}],["paystack/paystack.module",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["paystackconfig",{"_index":1652,"title":{},"body":{"modules/PaystackModule.html":{},"injectables/PaystackService.html":{}}}],["paystackconfiguration",{"_index":1664,"title":{},"body":{"injectables/PaystackService.html":{}}}],["paystackcontroller",{"_index":1605,"title":{"controllers/PaystackController.html":{}},"body":{"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"coverage.html":{}}}],["paystackmodule",{"_index":155,"title":{"modules/PaystackModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaystackModule.html":{},"modules.html":{},"overview.html":{}}}],["paystackservice",{"_index":1627,"title":{"injectables/PaystackService.html":{}},"body":{"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"coverage.html":{},"overview.html":{}}}],["pdf",{"_index":1200,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"injectables/PaystackService.html":{},"injectables/TicketsService.html":{},"dependencies.html":{}}}],["pdf.provider",{"_index":1929,"title":{},"body":{"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["pdf.provider.ts",{"_index":1186,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"coverage.html":{}}}],["pdf.provider.ts:176",{"_index":1190,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pdf.provider.ts:18",{"_index":1198,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pdfbytes",{"_index":1317,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pdfdoc",{"_index":1216,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pdfdoc.addpage([600",{"_index":1220,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pdfdoc.embedfont(fontbytes",{"_index":1232,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pdfdoc.embedpng(qrcodeimage",{"_index":1306,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pdfdoc.registerfontkit(fontkit",{"_index":1219,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pdfdoc.save",{"_index":1318,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pdfdocument",{"_index":1203,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pdfdocument.create",{"_index":1217,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["pdfs",{"_index":1726,"title":{},"body":{"injectables/PaystackService.html":{}}}],["pdfs.map",{"_index":1730,"title":{},"body":{"injectables/PaystackService.html":{}}}],["pending",{"_index":2234,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":971,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["permission",{"_index":1806,"title":{},"body":{"guards/RolesGuard.html":{}}}],["person",{"_index":617,"title":{},"body":{"classes/CreateEventDto.html":{},"miscellaneous/enumerations.html":{}}}],["pg",{"_index":2198,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":849,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"index.html":{}}}],["png",{"_index":1323,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["port",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["position",{"_index":974,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["post",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["post('/')@auth(authtype.none)@apioperation({summary",{"_index":2062,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/forgot",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/initialize",{"_index":1636,"title":{},"body":{"controllers/PaystackController.html":{}}}],["post('/sign",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhook",{"_index":1644,"title":{},"body":{"controllers/PaystackController.html":{}}}],["post('refresh",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":1513,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["precision",{"_index":1555,"title":{},"body":{"entities/Payment.html":{}}}],["prefix",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":1494,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["prevpage",{"_index":1530,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["price",{"_index":497,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"classes/CreateEventDto.html":{},"classes/CreateTicketDto.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"entities/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["pricetype",{"_index":598,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/EventsService.html":{}}}],["primarycolor",{"_index":1235,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["primarygeneratedcolumn",{"_index":910,"title":{},"body":{"entities/Event.html":{},"entities/Payment.html":{},"entities/Subscriber.html":{},"entities/Ticket.html":{},"entities/User.html":{}}}],["private",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":847,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["process.cwd",{"_index":2360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["processed",{"_index":1749,"title":{},"body":{"injectables/PaystackService.html":{}}}],["production",{"_index":2261,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":2244,"title":{},"body":{"index.html":{}}}],["project",{"_index":2253,"title":{},"body":{"index.html":{}}}],["promise",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/EventsService.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":1319,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["promise.all",{"_index":1349,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/PaystackService.html":{}}}],["promise.resolve(instance.canactivate(context",{"_index":445,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":117,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"entities/Event.html":{},"classes/ForgotPassswordDto.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetUsersBaseDto.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"entities/Subscriber.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":416,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["provide",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provider",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationProvider.html":{},"entities/Payment.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["providerreference",{"_index":1553,"title":{},"body":{"entities/Payment.html":{},"injectables/PaystackService.html":{}}}],["providers",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth/auth.service",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":366,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/buy",{"_index":1925,"title":{},"body":{"modules/TicketsModule.html":{}}}],["providers/change",{"_index":2114,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/create",{"_index":1042,"title":{},"body":{"modules/EventsModule.html":{}}}],["providers/creater",{"_index":2107,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/events.service",{"_index":997,"title":{},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{}}}],["providers/find",{"_index":2109,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/forgot",{"_index":372,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/generate",{"_index":369,"title":{},"body":{"modules/AuthModule.html":{},"modules/TicketsModule.html":{}}}],["providers/get",{"_index":1047,"title":{},"body":{"modules/EventsModule.html":{}}}],["providers/hashing.provider",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.service",{"_index":1404,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/pagination.provider",{"_index":1499,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/payments.service",{"_index":1601,"title":{},"body":{"modules/PaymentsModule.html":{}}}],["providers/paystack.service",{"_index":1628,"title":{},"body":{"controllers/PaystackController.html":{},"modules/PaystackModule.html":{}}}],["providers/refresh",{"_index":375,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/reset",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":367,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/store",{"_index":2111,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/subscribers.service",{"_index":1859,"title":{},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{}}}],["providers/tickets.service",{"_index":1914,"title":{},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{}}}],["providers/update",{"_index":1928,"title":{},"body":{"modules/TicketsModule.html":{}}}],["providers/upload",{"_index":2022,"title":{},"body":{"modules/UploadsModule.html":{}}}],["providers/uploads.service",{"_index":2021,"title":{},"body":{"modules/UploadsModule.html":{}}}],["providers/users.service",{"_index":2083,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["psswrbnnind123",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["public",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["purchase",{"_index":1477,"title":{},"body":{"injectables/MailService.html":{},"injectables/PaystackService.html":{},"injectables/TicketsService.html":{}}}],["qr",{"_index":1192,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["qrcode",{"_index":1195,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"dependencies.html":{}}}],["qrcode.tobuffer",{"_index":1321,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["qrcodeimage",{"_index":1303,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["qrcodeimageembed",{"_index":1305,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["quamtity",{"_index":534,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["quantity",{"_index":1593,"title":{},"body":{"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{}}}],["queries",{"_index":1484,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["query",{"_index":715,"title":{},"body":{"injectables/CreateEventProvider.html":{},"controllers/EventsController.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaystackService.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["query'})@apibody({description",{"_index":1847,"title":{},"body":{"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["query.dto",{"_index":1376,"title":{},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":1537,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:13",{"_index":1540,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:20",{"_index":1542,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":487,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{},"injectables/TicketsService.html":{}}}],["queryrunner.committransaction",{"_index":743,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["queryrunner.connect",{"_index":719,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["queryrunner.manager",{"_index":1705,"title":{},"body":{"injectables/PaystackService.html":{}}}],["queryrunner.manager.create(event",{"_index":727,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["queryrunner.manager.create(ticket",{"_index":734,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["queryrunner.manager.findone(payment",{"_index":1713,"title":{},"body":{"injectables/PaystackService.html":{}}}],["queryrunner.manager.save(event",{"_index":730,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["queryrunner.manager.save(newticket",{"_index":736,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["queryrunner.manager.save(payment",{"_index":1698,"title":{},"body":{"injectables/PaystackService.html":{}}}],["queryrunner.release",{"_index":755,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":747,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["queryrunner.starttransaction",{"_index":721,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["questions",{"_index":2277,"title":{},"body":{"index.html":{}}}],["random",{"_index":1169,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["randomint",{"_index":1164,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["randomint(1000",{"_index":1173,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["ranges",{"_index":2242,"title":{},"body":{"miscellaneous/functions.html":{}}}],["read",{"_index":2314,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":2291,"title":{},"body":{"index.html":{}}}],["record",{"_index":423,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/PaystackService.html":{}}}],["reference",{"_index":1641,"title":{},"body":{"controllers/PaystackController.html":{},"injectables/PaystackService.html":{}}}],["referencedcolumnname",{"_index":1581,"title":{},"body":{"entities/Payment.html":{}}}],["reflect",{"_index":2201,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":405,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{}}}],["refreshing",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/SignInProvider.html":{}}}],["refreshtokendto",{"_index":272,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":1763,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["refreshtokenprovider",{"_index":357,"title":{"injectables/RefreshTokenProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtokens",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["refreshtokens(@body",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(refreshtokendto",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["regards",{"_index":1776,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["register",{"_index":1218,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["registering",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["regular.ttf",{"_index":1224,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["reject",{"_index":1320,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["reject(err",{"_index":1324,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["rejectunauthorized",{"_index":1424,"title":{},"body":{"modules/MailModule.html":{}}}],["relations",{"_index":1116,"title":{},"body":{"injectables/EventsService.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["relationship",{"_index":921,"title":{},"body":{"entities/Event.html":{}}}],["release",{"_index":754,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["relsease",{"_index":752,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["remove",{"_index":2007,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["removing",{"_index":1854,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["repeat(40",{"_index":1297,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["repo",{"_index":1965,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["repository",{"_index":481,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.count",{"_index":1527,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":1512,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["req",{"_index":104,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{}}}],["request",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/CreaterUsersProviders.html":{},"controllers/EventsController.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":108,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request.user",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":1541,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["requesttimeoutexception",{"_index":576,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/PaystackService.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('could",{"_index":722,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["requesttimeoutexception(err",{"_index":1967,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["requesttimeoutexception(error",{"_index":583,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersService.html":{}}}],["required",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyTicketsDto.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["requiredroles",{"_index":1800,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1805,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requirements",{"_index":1792,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EventsModule.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["resetexpires",{"_index":1834,"title":{},"body":{"injectables/StoreOtpAndExpireProvider.html":{}}}],["resetotp",{"_index":580,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/User.html":{}}}],["resetotp.tostring",{"_index":1183,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["resetotpexpire",{"_index":581,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/User.html":{}}}],["resetpassword",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ResetPasswordProvider.html":{}}}],["resetpassword(@body",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(resetpassworddto",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ResetPasswordProvider.html":{}}}],["resetpassworddto",{"_index":283,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"coverage.html":{}}}],["resetpassworddto.password",{"_index":1782,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["resetpasswordprovider",{"_index":358,"title":{"injectables/ResetPasswordProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ResetPasswordProvider.html":{},"coverage.html":{},"overview.html":{}}}],["resets",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetting",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ResetPasswordProvider.html":{}}}],["resfresh",{"_index":1757,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["resolve(buffer",{"_index":1325,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["resource",{"_index":1807,"title":{},"body":{"guards/RolesGuard.html":{}}}],["resources",{"_index":2270,"title":{},"body":{"index.html":{}}}],["response",{"_index":869,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"interfaces/Paginated.html":{},"injectables/PaystackService.html":{}}}],["response.data",{"_index":1709,"title":{},"body":{"injectables/PaystackService.html":{}}}],["response.data.data.authorization_url",{"_index":1702,"title":{},"body":{"injectables/PaystackService.html":{}}}],["response.data.data.metadata",{"_index":1712,"title":{},"body":{"injectables/PaystackService.html":{}}}],["response.data.data.reference",{"_index":1701,"title":{},"body":{"injectables/PaystackService.html":{}}}],["response.data.data.status",{"_index":1715,"title":{},"body":{"injectables/PaystackService.html":{}}}],["response.interceptor",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":868,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:14",{"_index":873,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:32",{"_index":876,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["responses",{"_index":1634,"title":{},"body":{"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["results",{"_index":109,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":107,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":970,"title":{},"body":{"controllers/EventsController.html":{},"interfaces/Paginated.html":{},"controllers/UsersController.html":{}}}],["returns",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["revert",{"_index":1685,"title":{},"body":{"injectables/PaystackService.html":{}}}],["rgb",{"_index":1204,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["rgb(0.2",{"_index":1240,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["rgb(0.5",{"_index":1315,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["rgb(0.5137",{"_index":1236,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["rgb(0.7",{"_index":1301,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["rgb(0.8",{"_index":1243,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["rgb(0.95",{"_index":1260,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["rgb(1",{"_index":1271,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["role",{"_index":119,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"controllers/EventsController.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PaystackController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"controllers/TicketsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":1798,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":1003,"title":{},"body":{"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/TicketsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.eventorganiser",{"_index":1023,"title":{},"body":{"controllers/EventsController.html":{}}}],["roles(role.eventpurchaser",{"_index":1637,"title":{},"body":{"controllers/PaystackController.html":{}}}],["roles_key",{"_index":1795,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":193,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rollback",{"_index":745,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["root",{"_index":2361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["root/utils/getdateranges",{"_index":1067,"title":{},"body":{"injectables/EventsService.html":{}}}],["root_path",{"_index":1212,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"injectables/MailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":128,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["run",{"_index":2257,"title":{},"body":{"index.html":{}}}],["runner",{"_index":716,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["rxjs",{"_index":410,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["s3",{"_index":1990,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["salt",{"_index":468,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":461,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreaterUsersProviders.html":{}}}],["save",{"_index":857,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/PaystackService.html":{}}}],["saving",{"_index":728,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["scalable",{"_index":2249,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1556,"title":{},"body":{"entities/Payment.html":{}}}],["scope",{"_index":505,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["scope.default",{"_index":516,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["sdk",{"_index":1991,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["secondarycolor",{"_index":1239,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["secret",{"_index":1347,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["section",{"_index":1273,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["secure",{"_index":1420,"title":{},"body":{"modules/MailModule.html":{}}}],["select",{"_index":1117,"title":{},"body":{"injectables/EventsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["send",{"_index":1181,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["sending",{"_index":1163,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{},"injectables/MailService.html":{}}}],["sendresetotp",{"_index":1434,"title":{},"body":{"injectables/MailService.html":{}}}],["sendresetotp(user",{"_index":1441,"title":{},"body":{"injectables/MailService.html":{}}}],["sends",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SubscribersController.html":{}}}],["sendsubscribermail",{"_index":1435,"title":{},"body":{"injectables/MailService.html":{}}}],["sendsubscribermail(subscriber",{"_index":1443,"title":{},"body":{"injectables/MailService.html":{}}}],["sendticketbuyermail",{"_index":1436,"title":{},"body":{"injectables/MailService.html":{}}}],["sendticketbuyermail(user",{"_index":1447,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserwelcome",{"_index":1437,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserwelcome(user",{"_index":1451,"title":{},"body":{"injectables/MailService.html":{}}}],["sent",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ForgotPasswordProvider.html":{}}}],["separator",{"_index":1295,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["server",{"_index":1672,"title":{},"body":{"injectables/PaystackService.html":{},"index.html":{}}}],["service",{"_index":136,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BuyTicketProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["set(setdata",{"_index":1954,"title":{},"body":{"injectables/TicketsService.html":{}}}],["setdata",{"_index":1951,"title":{},"body":{"injectables/TicketsService.html":{}}}],["setmetadata(auth_type_key",{"_index":2351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":2357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":2254,"title":{},"body":{"index.html":{}}}],["show",{"_index":675,"title":{},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{}}}],["show'})@isstring()@isnotempty",{"_index":640,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["show'})@isstring()@maxlength(2560",{"_index":620,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["shows",{"_index":1856,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["side",{"_index":2250,"title":{},"body":{"index.html":{}}}],["sigining",{"_index":1814,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["sign",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{},"classes/SignInDto.html":{}}}],["signature",{"_index":1611,"title":{},"body":{"controllers/PaystackController.html":{},"injectables/PaystackService.html":{}}}],["signed",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{}}}],["signin",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":289,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":1821,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signing",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":359,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signs",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{}}}],["signtoken",{"_index":1329,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":1333,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["size",{"_index":1269,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["skip",{"_index":1514,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["sold",{"_index":1718,"title":{},"body":{"injectables/PaystackService.html":{},"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"modules/PaymentsModule.html":{},"injectables/PaymentsService.html":{},"controllers/PaystackController.html":{},"modules/PaystackModule.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":2009,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["special",{"_index":807,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["sponsors",{"_index":2311,"title":{},"body":{"index.html":{}}}],["sports",{"_index":2230,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../account",{"_index":2207,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../active",{"_index":2336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":2339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../attendancemode.enum.ts",{"_index":2210,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth",{"_index":2209,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constant.ts",{"_index":2338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":2337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../eventcategory.enum.ts",{"_index":2211,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../eventpricetype.enum.ts",{"_index":2212,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2238,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../paths.config.ts",{"_index":2343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../paymentstatus.enum.ts",{"_index":2213,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role",{"_index":2214,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.constant.ts",{"_index":2342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":2341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ticket",{"_index":2215,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":126,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:25",{"_index":131,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":238,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:12",{"_index":239,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:117",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:159",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:199",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:77",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":2106,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":360,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["src/auth/constants/auth.constant",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["src/auth/constants/auth.constant.ts",{"_index":2156,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/constants/role.constant",{"_index":1796,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/constants/role.constant.ts",{"_index":2157,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/active",{"_index":991,"title":{},"body":{"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/TicketsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/auth.decorator",{"_index":1002,"title":{},"body":{"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorator/auth.decorator.ts",{"_index":2159,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/role.decorator",{"_index":1629,"title":{},"body":{"controllers/PaystackController.html":{},"controllers/TicketsController.html":{}}}],["src/auth/decorator/role.decorator.ts",{"_index":2160,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/forgot",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"classes/ForgotPassswordDto.html":{},"coverage.html":{}}}],["src/auth/dtos/refresh",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/reset",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/auth/dtos/sign",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/enums/auth",{"_index":411,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/enums/role",{"_index":815,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/PaystackController.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":399,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:33",{"_index":406,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:59",{"_index":407,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/roles/roles.guard.ts",{"_index":1786,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles/roles.guard.ts:16",{"_index":1787,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles/roles.guard.ts:31",{"_index":1788,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/interfaces/active",{"_index":114,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/BuyTicketProvider.html":{},"injectables/CreateEventProvider.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["src/auth/providers/auth/auth.service.ts",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth/auth.service.ts:15",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth/auth.service.ts:50",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth/auth.service.ts:59",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth/auth.service.ts:68",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth/auth.service.ts:77",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":447,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":463,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:27",{"_index":454,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/forgot",{"_index":1160,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{},"coverage.html":{}}}],["src/auth/providers/generate",{"_index":1326,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":836,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":1394,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:12",{"_index":1398,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:19",{"_index":1396,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1755,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["src/auth/providers/reset",{"_index":1772,"title":{},"body":{"injectables/ResetPasswordProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1812,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":867,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":1375,"title":{},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":1064,"title":{},"body":{"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/UsersService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":1483,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":1046,"title":{},"body":{"modules/EventsModule.html":{},"modules/UsersModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":1498,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":1065,"title":{},"body":{"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/UsersService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":1500,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:14",{"_index":1503,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:34",{"_index":1505,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/config/paths.config",{"_index":1213,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["src/config/paths.config.ts",{"_index":2164,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/events/dtos/create",{"_index":586,"title":{},"body":{"classes/CreateEventDto.html":{},"coverage.html":{}}}],["src/events/dtos/get",{"_index":1358,"title":{},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/events/enums/attendancemode.enum.ts",{"_index":2220,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/events/enums/eventcategory.enum.ts",{"_index":2223,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/events/enums/eventpricetype.enum.ts",{"_index":2231,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/events/event.entity",{"_index":1907,"title":{},"body":{"entities/Ticket.html":{},"entities/User.html":{}}}],["src/events/event.entity.ts",{"_index":888,"title":{},"body":{"entities/Event.html":{},"coverage.html":{}}}],["src/events/event.entity.ts:105",{"_index":896,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:111",{"_index":931,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:117",{"_index":908,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:123",{"_index":909,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:129",{"_index":907,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:135",{"_index":905,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:141",{"_index":920,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:147",{"_index":926,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:24",{"_index":911,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:35",{"_index":915,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:45",{"_index":899,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:55",{"_index":922,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:65",{"_index":898,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:75",{"_index":903,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:81",{"_index":901,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:87",{"_index":928,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:93",{"_index":912,"title":{},"body":{"entities/Event.html":{}}}],["src/events/event.entity.ts:99",{"_index":930,"title":{},"body":{"entities/Event.html":{}}}],["src/events/events.controller.ts",{"_index":939,"title":{},"body":{"controllers/EventsController.html":{},"coverage.html":{}}}],["src/events/events.controller.ts:125",{"_index":951,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:165",{"_index":960,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:198",{"_index":977,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:234",{"_index":985,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.module",{"_index":1927,"title":{},"body":{"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["src/events/events.module.ts",{"_index":1041,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/events/providers/create",{"_index":696,"title":{},"body":{"injectables/CreateEventProvider.html":{},"coverage.html":{}}}],["src/events/providers/events.service",{"_index":511,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["src/events/providers/events.service.ts",{"_index":1050,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{}}}],["src/events/providers/events.service.ts:200",{"_index":1061,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/providers/events.service.ts:21",{"_index":1055,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/providers/events.service.ts:53",{"_index":1057,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/providers/events.service.ts:70",{"_index":1058,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/providers/events.service.ts:87",{"_index":1060,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/providers/get",{"_index":1378,"title":{},"body":{"injectables/GetUserEventsProvider.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/mail/mail.module",{"_index":1875,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["src/mail/mail.module.ts",{"_index":1402,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.service",{"_index":837,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/PaystackService.html":{},"injectables/SubscribersService.html":{}}}],["src/mail/providers/mail.service.ts",{"_index":1433,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/providers/mail.service.ts:13",{"_index":1440,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:29",{"_index":1452,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:48",{"_index":1442,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:66",{"_index":1444,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:85",{"_index":1449,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/templates/resetotp.ejs",{"_index":1472,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/templates/subscription.ejs",{"_index":1475,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/templates/ticketbought.ejs",{"_index":1479,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/templates/welcome.ejs",{"_index":1464,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":2167,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/payments/enums/paymentstatus.enum.ts",{"_index":2233,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/payments/payment.entity.ts",{"_index":1551,"title":{},"body":{"entities/Payment.html":{},"coverage.html":{}}}],["src/payments/payment.entity.ts:19",{"_index":1562,"title":{},"body":{"entities/Payment.html":{}}}],["src/payments/payment.entity.ts:26",{"_index":1567,"title":{},"body":{"entities/Payment.html":{}}}],["src/payments/payment.entity.ts:29",{"_index":1563,"title":{},"body":{"entities/Payment.html":{}}}],["src/payments/payment.entity.ts:32",{"_index":1565,"title":{},"body":{"entities/Payment.html":{}}}],["src/payments/payment.entity.ts:35",{"_index":1559,"title":{},"body":{"entities/Payment.html":{}}}],["src/payments/payment.entity.ts:38",{"_index":1557,"title":{},"body":{"entities/Payment.html":{}}}],["src/payments/payment.entity.ts:41",{"_index":1561,"title":{},"body":{"entities/Payment.html":{}}}],["src/payments/payment.entity.ts:44",{"_index":1574,"title":{},"body":{"entities/Payment.html":{}}}],["src/payments/payment.entity.ts:47",{"_index":1560,"title":{},"body":{"entities/Payment.html":{}}}],["src/payments/payment.entity.ts:50",{"_index":1573,"title":{},"body":{"entities/Payment.html":{}}}],["src/payments/payment.entity.ts:58",{"_index":1572,"title":{},"body":{"entities/Payment.html":{}}}],["src/payments/payments.module.ts",{"_index":1600,"title":{},"body":{"modules/PaymentsModule.html":{}}}],["src/payments/providers/payments.service.ts",{"_index":1604,"title":{},"body":{"injectables/PaymentsService.html":{},"coverage.html":{}}}],["src/paystack/dtos/payment.dto.ts",{"_index":1582,"title":{},"body":{"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{},"coverage.html":{}}}],["src/paystack/dtos/payment.dto.ts:28",{"_index":1909,"title":{},"body":{"classes/TicketTypeDto.html":{}}}],["src/paystack/dtos/payment.dto.ts:39",{"_index":1911,"title":{},"body":{"classes/TicketTypeDto.html":{}}}],["src/paystack/dtos/payment.dto.ts:55",{"_index":1585,"title":{},"body":{"classes/PaymentDto.html":{}}}],["src/paystack/dtos/payment.dto.ts:68",{"_index":1588,"title":{},"body":{"classes/PaymentDto.html":{}}}],["src/paystack/paystack.controller.ts",{"_index":1606,"title":{},"body":{"controllers/PaystackController.html":{},"coverage.html":{}}}],["src/paystack/paystack.controller.ts:132",{"_index":1618,"title":{},"body":{"controllers/PaystackController.html":{}}}],["src/paystack/paystack.controller.ts:87",{"_index":1626,"title":{},"body":{"controllers/PaystackController.html":{}}}],["src/paystack/paystack.module.ts",{"_index":1650,"title":{},"body":{"modules/PaystackModule.html":{}}}],["src/paystack/providers/paystack.service.ts",{"_index":1656,"title":{},"body":{"injectables/PaystackService.html":{},"coverage.html":{}}}],["src/paystack/providers/paystack.service.ts:169",{"_index":1674,"title":{},"body":{"injectables/PaystackService.html":{}}}],["src/paystack/providers/paystack.service.ts:27",{"_index":1663,"title":{},"body":{"injectables/PaystackService.html":{}}}],["src/paystack/providers/paystack.service.ts:286",{"_index":1671,"title":{},"body":{"injectables/PaystackService.html":{}}}],["src/paystack/providers/paystack.service.ts:73",{"_index":1665,"title":{},"body":{"injectables/PaystackService.html":{}}}],["src/paystack/providers/paystack.service.ts:83",{"_index":1667,"title":{},"body":{"injectables/PaystackService.html":{}}}],["src/subscribers/dtos/create",{"_index":769,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"coverage.html":{}}}],["src/subscribers/providers/subscribers.service.ts",{"_index":1877,"title":{},"body":{"injectables/SubscribersService.html":{},"coverage.html":{}}}],["src/subscribers/providers/subscribers.service.ts:12",{"_index":1880,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["src/subscribers/providers/subscribers.service.ts:36",{"_index":1882,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["src/subscribers/providers/subscribers.service.ts:55",{"_index":1886,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["src/subscribers/subscriber.entity",{"_index":1454,"title":{},"body":{"injectables/MailService.html":{}}}],["src/subscribers/subscriber.entity.ts",{"_index":1837,"title":{},"body":{"entities/Subscriber.html":{},"coverage.html":{}}}],["src/subscribers/subscriber.entity.ts:17",{"_index":1839,"title":{},"body":{"entities/Subscriber.html":{}}}],["src/subscribers/subscriber.entity.ts:9",{"_index":1840,"title":{},"body":{"entities/Subscriber.html":{}}}],["src/subscribers/subscribers.controller.ts",{"_index":1842,"title":{},"body":{"controllers/SubscribersController.html":{},"coverage.html":{}}}],["src/subscribers/subscribers.controller.ts:70",{"_index":1849,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.controller.ts:95",{"_index":1853,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.module.ts",{"_index":1872,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["src/tickets/dtos/create",{"_index":669,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateTicketDto.html":{},"coverage.html":{}}}],["src/tickets/dtos/patch",{"_index":1544,"title":{},"body":{"classes/PatchTicketDto.html":{},"coverage.html":{}}}],["src/tickets/enums/ticket",{"_index":2236,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/tickets/providers/buy",{"_index":473,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"coverage.html":{}}}],["src/tickets/providers/generate",{"_index":1185,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"coverage.html":{}}}],["src/tickets/providers/tickets.service",{"_index":1678,"title":{},"body":{"injectables/PaystackService.html":{}}}],["src/tickets/providers/tickets.service.ts",{"_index":1931,"title":{},"body":{"injectables/TicketsService.html":{},"coverage.html":{}}}],["src/tickets/providers/tickets.service.ts:16",{"_index":1936,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/providers/tickets.service.ts:44",{"_index":1940,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/providers/tickets.service.ts:58",{"_index":1947,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/providers/tickets.service.ts:82",{"_index":1943,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/providers/tickets.service.ts:94",{"_index":1938,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/providers/update",{"_index":1960,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{},"coverage.html":{}}}],["src/tickets/ticket.entity",{"_index":666,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"entities/Event.html":{}}}],["src/tickets/ticket.entity.ts",{"_index":1893,"title":{},"body":{"entities/Ticket.html":{},"coverage.html":{}}}],["src/tickets/ticket.entity.ts:20",{"_index":1899,"title":{},"body":{"entities/Ticket.html":{}}}],["src/tickets/ticket.entity.ts:26",{"_index":1905,"title":{},"body":{"entities/Ticket.html":{}}}],["src/tickets/ticket.entity.ts:32",{"_index":1902,"title":{},"body":{"entities/Ticket.html":{}}}],["src/tickets/ticket.entity.ts:39",{"_index":1903,"title":{},"body":{"entities/Ticket.html":{}}}],["src/tickets/ticket.entity.ts:42",{"_index":1895,"title":{},"body":{"entities/Ticket.html":{}}}],["src/tickets/ticket.entity.ts:45",{"_index":1906,"title":{},"body":{"entities/Ticket.html":{}}}],["src/tickets/ticket.entity.ts:53",{"_index":1904,"title":{},"body":{"entities/Ticket.html":{}}}],["src/tickets/ticket.entity.ts:56",{"_index":1900,"title":{},"body":{"entities/Ticket.html":{}}}],["src/tickets/ticket.entity.ts:60",{"_index":1898,"title":{},"body":{"entities/Ticket.html":{}}}],["src/tickets/ticket.entity.ts:64",{"_index":1901,"title":{},"body":{"entities/Ticket.html":{}}}],["src/tickets/tickets.controller.ts",{"_index":1913,"title":{},"body":{"controllers/TicketsController.html":{},"coverage.html":{}}}],["src/tickets/tickets.module",{"_index":1654,"title":{},"body":{"modules/PaystackModule.html":{}}}],["src/tickets/tickets.module.ts",{"_index":1923,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/uploads/providers/upload",{"_index":1974,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service",{"_index":709,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["src/uploads/providers/uploads.service.ts",{"_index":2024,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts:13",{"_index":2027,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/providers/uploads.service.ts:36",{"_index":2029,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/providers/uploads.service.ts:58",{"_index":2030,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/uploads.module",{"_index":1045,"title":{},"body":{"modules/EventsModule.html":{},"modules/PaystackModule.html":{}}}],["src/uploads/uploads.module.ts",{"_index":2020,"title":{},"body":{"modules/UploadsModule.html":{}}}],["src/users/dtos/create",{"_index":783,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":1390,"title":{},"body":{"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"coverage.html":{}}}],["src/users/enums/account",{"_index":2217,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/providers/change",{"_index":564,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"coverage.html":{}}}],["src/users/providers/creater",{"_index":827,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":1125,"title":{},"body":{"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"coverage.html":{}}}],["src/users/providers/store",{"_index":1827,"title":{},"body":{"injectables/StoreOtpAndExpireProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":510,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":2117,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:100",{"_index":2138,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:109",{"_index":2136,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:121",{"_index":2125,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:133",{"_index":2135,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:142",{"_index":2131,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:166",{"_index":2128,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:21",{"_index":2123,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:81",{"_index":2127,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:90",{"_index":2133,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":932,"title":{},"body":{"entities/Event.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["src/users/user.entity.ts",{"_index":2042,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":2048,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":2047,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:27",{"_index":2049,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:35",{"_index":2044,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:44",{"_index":2051,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:51",{"_index":2043,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:58",{"_index":2054,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:65",{"_index":2052,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:71",{"_index":2053,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:76",{"_index":2046,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":2057,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:133",{"_index":2072,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:169",{"_index":2076,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:221",{"_index":2082,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:260",{"_index":2067,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:89",{"_index":2063,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/TicketsModule.html":{}}}],["src/users/users.module.ts",{"_index":2104,"title":{},"body":{"modules/UsersModule.html":{}}}],["stamp",{"_index":2014,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["star",{"_index":618,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["starboys",{"_index":1009,"title":{},"body":{"controllers/EventsController.html":{}}}],["start",{"_index":631,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"entities/Event.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"injectables/PaystackService.html":{},"index.html":{}}}],["start:dev",{"_index":2260,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2262,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":1363,"title":{},"body":{"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{}}}],["started",{"_index":2243,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2252,"title":{},"body":{"index.html":{}}}],["starty",{"_index":1274,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["statements",{"_index":2151,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":402,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["status",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"entities/Payment.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"controllers/SubscribersController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":515,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/PaystackService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["status.enum.ts",{"_index":2216,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":2297,"title":{},"body":{"index.html":{}}}],["step",{"_index":546,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["store",{"_index":1179,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{},"injectables/UsersService.html":{}}}],["stored",{"_index":1146,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersService.html":{}}}],["storeotpandexpire",{"_index":1830,"title":{},"body":{"injectables/StoreOtpAndExpireProvider.html":{}}}],["storeotpandexpire(user",{"_index":1832,"title":{},"body":{"injectables/StoreOtpAndExpireProvider.html":{}}}],["storeotpandexpireprovider",{"_index":1826,"title":{"injectables/StoreOtpAndExpireProvider.html":{}},"body":{"injectables/StoreOtpAndExpireProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["storeotpandexpiresprovider",{"_index":2121,"title":{},"body":{"injectables/UsersService.html":{}}}],["storetokenotpandotpexpire",{"_index":2119,"title":{},"body":{"injectables/UsersService.html":{}}}],["storetokenotpandotpexpire(user",{"_index":2137,"title":{},"body":{"injectables/UsersService.html":{}}}],["storing",{"_index":1829,"title":{},"body":{"injectables/StoreOtpAndExpireProvider.html":{},"injectables/UsersService.html":{}}}],["strict",{"_index":1432,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/GenerateTicketPdfProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"entities/Payment.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":750,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["string(paymentdto.eventid",{"_index":527,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["strip",{"_index":1262,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["sub",{"_index":120,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["subject",{"_index":1459,"title":{},"body":{"injectables/MailService.html":{}}}],["subscribe",{"_index":1445,"title":{},"body":{"injectables/MailService.html":{}}}],["subscribed",{"_index":1884,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["subscriber",{"_index":771,"title":{"entities/Subscriber.html":{}},"body":{"classes/CreateSubscriberDto.html":{},"injectables/MailService.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"coverage.html":{}}}],["subscriber.dto",{"_index":1860,"title":{},"body":{"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["subscriber.dto.ts",{"_index":770,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"coverage.html":{}}}],["subscriber.dto.ts:18",{"_index":773,"title":{},"body":{"classes/CreateSubscriberDto.html":{}}}],["subscriber.email",{"_index":1473,"title":{},"body":{"injectables/MailService.html":{}}}],["subscriber.entity",{"_index":1874,"title":{},"body":{"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{}}}],["subscriber.id",{"_index":1476,"title":{},"body":{"injectables/MailService.html":{}}}],["subscriberid",{"_index":1851,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["subscriberrepository",{"_index":1881,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["subscribers",{"_index":1843,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["subscribers.controller",{"_index":1873,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["subscribers/subscribers.module",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["subscriberscontroller",{"_index":1841,"title":{"controllers/SubscribersController.html":{}},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"coverage.html":{}}}],["subscriberservice",{"_index":1863,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["subscribersmodule",{"_index":156,"title":{"modules/SubscribersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubscribersModule.html":{},"modules.html":{},"overview.html":{}}}],["subscribersservice",{"_index":1858,"title":{"injectables/SubscribersService.html":{}},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"injectables/SubscribersService.html":{},"coverage.html":{},"overview.html":{}}}],["subscription",{"_index":1855,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["success",{"_index":1643,"title":{},"body":{"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"miscellaneous/enumerations.html":{}}}],["successful",{"_index":738,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/EventsService.html":{},"injectables/PaystackService.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/ForgotPasswordProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/ResetPasswordProvider.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully'})@apibody({description",{"_index":947,"title":{},"body":{"controllers/EventsController.html":{},"controllers/PaystackController.html":{}}}],["successfully'})@apiparam({name",{"_index":957,"title":{},"body":{"controllers/EventsController.html":{}}}],["successfully'})@apiresponse({status",{"_index":1615,"title":{},"body":{"controllers/PaystackController.html":{}}}],["sum",{"_index":560,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["summary",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateTicketDto.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"entities/Ticket.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1468,"title":{},"body":{"injectables/MailService.html":{},"index.html":{},"modules.html":{}}}],["supported",{"_index":2037,"title":{},"body":{"injectables/UploadsService.html":{}}}],["svg",{"_index":2325,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":1335,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["t.id",{"_index":1720,"title":{},"body":{"injectables/PaystackService.html":{}}}],["table",{"_index":1838,"title":{},"body":{"entities/Subscriber.html":{},"entities/Ticket.html":{},"entities/User.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2172,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1517,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["team",{"_index":1458,"title":{},"body":{"injectables/MailService.html":{}}}],["tells",{"_index":763,"title":{},"body":{"classes/CreateManyTicketsDto.html":{}}}],["template",{"_index":1426,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":1429,"title":{},"body":{"modules/MailModule.html":{}}}],["test",{"_index":2265,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":2268,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2267,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2263,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":2310,"title":{},"body":{"index.html":{}}}],["theater",{"_index":2229,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["this.accesstokenguard",{"_index":424,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.appservice.gethello",{"_index":137,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.forgotpassword(forgotpassworddto",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(refreshtokendto",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(resetpassworddto",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":439,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.buyticketprovider.buyticket(queryrunner",{"_index":1950,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.calculatetotal(lockedtickets",{"_index":552,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["this.changeuserpasswordprovider.changeuserpassword",{"_index":2144,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":886,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.configservice.get('appconfig.awsbucketname",{"_index":1997,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.configservice.get('appconfig.awscloudfronturl')}/${name",{"_index":2040,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.createeventsprovider.createevent",{"_index":1070,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":2140,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":717,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["this.eventsrepository",{"_index":1119,"title":{},"body":{"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{}}}],["this.eventsrepository.delete(id",{"_index":1071,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository.findoneby",{"_index":1121,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsservice.createevent(createeventdto",{"_index":1024,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.deleteevent(id",{"_index":1028,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findall(eventquery",{"_index":1031,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findeventbyid",{"_index":526,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["this.eventsservice.findeventbyid(eventid",{"_index":1035,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.extractrequestfromheader(request",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findonebyidprovider.findbyid(id",{"_index":2145,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findoneuserbyemailprovider.findonebyemail(email",{"_index":2141,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.finduserbyresetotpandexpiresprovider.finduserbyresetotpandexpirytime",{"_index":2143,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.forgotpasswordprovider.forgotpassword(forgotpassworddto",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatefilename(file",{"_index":1999,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.generateqrcode(id",{"_index":1304,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["this.generateticketpdfprovider.generateticketpdf",{"_index":1959,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1766,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.getauthheader",{"_index":1697,"title":{},"body":{"injectables/PaystackService.html":{}}}],["this.getusereventsprovider.getuserevents(userid",{"_index":2096,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.hashingprovider.comparepassword",{"_index":1820,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword",{"_index":1781,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":856,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["this.jwtconfiguration",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":1352,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":1344,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":1346,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":1356,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":1348,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtservice.signasync",{"_index":1342,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verify",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtservice.verifyasync",{"_index":1762,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.locktickets",{"_index":550,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["this.mailerservice.sendmail",{"_index":1455,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendresetotp(user",{"_index":1182,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["this.mailservice.sendsubscribermail(subscriber",{"_index":1891,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["this.mailservice.sendticketbuyermail",{"_index":1735,"title":{},"body":{"injectables/PaystackService.html":{}}}],["this.mailservice.senduserwelcome(newuser",{"_index":859,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["this.paginationprovider.paginationquery",{"_index":1118,"title":{},"body":{"injectables/EventsService.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/UsersService.html":{}}}],["this.paystackconfiguration.baseurl}/transaction/initialize",{"_index":1689,"title":{},"body":{"injectables/PaystackService.html":{}}}],["this.paystackconfiguration.baseurl}/transaction/verify/${reference",{"_index":1711,"title":{},"body":{"injectables/PaystackService.html":{}}}],["this.paystackconfiguration.secret",{"_index":1683,"title":{},"body":{"injectables/PaystackService.html":{}}}],["this.paystackservice.initializepayment(paymentdto",{"_index":1638,"title":{},"body":{"controllers/PaystackController.html":{}}}],["this.paystackservice.paymentwebhook(body",{"_index":1646,"title":{},"body":{"controllers/PaystackController.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":433,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":1801,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.refreshtokenprovider.refreshtokens(refreshtokendto",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":1523,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1522,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.resetpasswordprovider.resetpassword(resetpassworddto",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signinprovider.signin(signindto",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":1350,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":1355,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.storeotpandexpiresprovider.storeotpandexpire(user",{"_index":2142,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.subscriberrepository.create(createsubscriberdto",{"_index":1889,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["this.subscriberrepository.delete(id",{"_index":1892,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["this.subscriberrepository.save(subscriber",{"_index":1890,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["this.subscriberservice.createsubscriber(createsubscriberdto",{"_index":1865,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.subscriberservice.unsubscribeemail(subscriberid",{"_index":1868,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.ticketsrepository.findoneby",{"_index":1966,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["this.ticketsrepository.save(ticket",{"_index":1972,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["this.ticketsservice.generateticketpdf",{"_index":1728,"title":{},"body":{"injectables/PaystackService.html":{}}}],["this.ticketsservice.gettickets(queryrunner",{"_index":1687,"title":{},"body":{"injectables/PaystackService.html":{}}}],["this.ticketsservice.updateticketsstatus",{"_index":1704,"title":{},"body":{"injectables/PaystackService.html":{}}}],["this.updateboughtticketprovider.updateticket(ticketid",{"_index":1958,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.uploadsservice.uploadfile(file",{"_index":724,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["this.uploadsservice.uploadticketfile(pdf",{"_index":1731,"title":{},"body":{"injectables/PaystackService.html":{}}}],["this.uploadtoawsprovider.fileupload(file",{"_index":2039,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadtoawsprovider.uploadticketfile",{"_index":2041,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.usersrepository",{"_index":2148,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":855,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["this.usersrepository.delete(userid",{"_index":2149,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":1152,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{}}}],["this.usersrepository.findone",{"_index":844,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["this.usersrepository.findoneby",{"_index":1132,"title":{},"body":{"injectables/FindOneByIdProvider.html":{}}}],["this.usersrepository.save(newuser",{"_index":858,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["this.usersrepository.save(newuserobj",{"_index":582,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{}}}],["this.usersservice.changeuserpassword(user",{"_index":1784,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["this.usersservice.create(createuserdto",{"_index":2089,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(userid",{"_index":2099,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(usersquery",{"_index":2091,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail",{"_index":1167,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["this.usersservice.findonebyemail(signindto.email",{"_index":1817,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.findonebyid(+userid",{"_index":1386,"title":{},"body":{"injectables/GetUserEventsProvider.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(sub",{"_index":1765,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.usersservice.findonebyid(user.sub",{"_index":524,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/CreateEventProvider.html":{}}}],["this.usersservice.finduserbyresetotpandexpirytime(hashedotp",{"_index":1779,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["this.usersservice.storetokenotpandotpexpire(user",{"_index":1180,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["this.verifypayment(data.reference",{"_index":1745,"title":{},"body":{"injectables/PaystackService.html":{}}}],["thisweekend",{"_index":1088,"title":{},"body":{"injectables/EventsService.html":{}}}],["through",{"_index":442,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["throw",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["ticket",{"_index":476,"title":{"entities/Ticket.html":{}},"body":{"injectables/BuyTicketProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateTicketDto.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/MailService.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["ticket'})@apiresponse({status",{"_index":1623,"title":{},"body":{"controllers/PaystackController.html":{}}}],["ticket.dto",{"_index":1590,"title":{},"body":{"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{}}}],["ticket.dto.ts",{"_index":1545,"title":{},"body":{"classes/PatchTicketDto.html":{},"coverage.html":{}}}],["ticket.dto.ts:18",{"_index":1548,"title":{},"body":{"classes/PatchTicketDto.html":{}}}],["ticket.entity",{"_index":507,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["ticket.event",{"_index":924,"title":{},"body":{"entities/Event.html":{}}}],["ticket.id",{"_index":1707,"title":{},"body":{"injectables/PaystackService.html":{}}}],["ticket.owner",{"_index":1971,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["ticket.price",{"_index":1729,"title":{},"body":{"injectables/PaystackService.html":{}}}],["ticket.provider",{"_index":1926,"title":{},"body":{"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["ticket.provider.ts",{"_index":474,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"coverage.html":{}}}],["ticket.provider.ts:126",{"_index":501,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["ticket.provider.ts:145",{"_index":494,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["ticket.provider.ts:15",{"_index":484,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["ticket.provider.ts:16",{"_index":1962,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["ticket.provider.ts:35",{"_index":1964,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["ticket.provider.ts:45",{"_index":489,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["ticket.ticketstatus",{"_index":541,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["ticket.type",{"_index":539,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/PaystackService.html":{}}}],["ticket.type.tolowercase",{"_index":555,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["ticket?bought=yes",{"_index":1693,"title":{},"body":{"injectables/PaystackService.html":{}}}],["ticket`.tolocaleuppercase",{"_index":1266,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["ticketbuyer",{"_index":523,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["ticketdata",{"_index":1202,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["tickethive",{"_index":1425,"title":{},"body":{"modules/MailModule.html":{}}}],["ticketid",{"_index":1194,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"entities/Payment.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["ticketids",{"_index":500,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/TicketsService.html":{}}}],["ticketid}.pdf",{"_index":2004,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["ticketpurchaser",{"_index":822,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["ticketpurchaser'})@isenum(accounttype)@isoptional",{"_index":789,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ticketrepository",{"_index":485,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["ticketresult",{"_index":735,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["tickets",{"_index":498,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/MailService.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"injectables/PaystackService.html":{},"classes/TicketTypeDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["tickets.controller",{"_index":1924,"title":{},"body":{"modules/TicketsModule.html":{}}}],["tickets.dto",{"_index":670,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/PatchTicketDto.html":{}}}],["tickets.dto.ts",{"_index":757,"title":{},"body":{"classes/CreateManyTicketsDto.html":{},"classes/CreateTicketDto.html":{},"coverage.html":{}}}],["tickets.dto.ts:12",{"_index":780,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["tickets.dto.ts:19",{"_index":778,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["tickets.dto.ts:26",{"_index":760,"title":{},"body":{"classes/CreateManyTicketsDto.html":{},"classes/CreateTicketDto.html":{}}}],["tickets.filter",{"_index":538,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["tickets.map",{"_index":1727,"title":{},"body":{"injectables/PaystackService.html":{}}}],["tickets.map((t",{"_index":1719,"title":{},"body":{"injectables/PaystackService.html":{}}}],["tickets.map((ticket",{"_index":1706,"title":{},"body":{"injectables/PaystackService.html":{}}}],["tickets/dtos/patch",{"_index":1589,"title":{},"body":{"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{}}}],["tickets/enums/ticket",{"_index":1681,"title":{},"body":{"injectables/PaystackService.html":{}}}],["tickets/ticket",{"_index":2003,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["tickets/ticket.entity",{"_index":1578,"title":{},"body":{"entities/Payment.html":{}}}],["tickets/tickets.module",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["tickets[i].id",{"_index":1732,"title":{},"body":{"injectables/PaystackService.html":{}}}],["ticketscontroller",{"_index":1912,"title":{"controllers/TicketsController.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"coverage.html":{}}}],["ticketsmodule",{"_index":157,"title":{"modules/TicketsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaystackModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["ticketsrepository",{"_index":1963,"title":{},"body":{"injectables/UpdateBoughtTicketProvider.html":{}}}],["ticketsservice",{"_index":1662,"title":{"injectables/TicketsService.html":{}},"body":{"injectables/PaystackService.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["ticketstatus",{"_index":513,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/PaystackService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"miscellaneous/enumerations.html":{}}}],["ticketstatus.locked",{"_index":1708,"title":{},"body":{"injectables/PaystackService.html":{}}}],["ticketstatus.sold",{"_index":1721,"title":{},"body":{"injectables/PaystackService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["ticketstatus.unsold",{"_index":542,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/PaystackService.html":{},"entities/Ticket.html":{}}}],["ticketstobebought",{"_index":531,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["tickettype",{"_index":521,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"controllers/PaystackController.html":{}}}],["tickettype.quantity",{"_index":535,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["tickettype.ticket.type",{"_index":536,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["tickettypedto",{"_index":1586,"title":{"classes/TicketTypeDto.html":{}},"body":{"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{},"coverage.html":{}}}],["tickettypes",{"_index":1583,"title":{},"body":{"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{}}}],["ticketurls",{"_index":1482,"title":{},"body":{"injectables/MailService.html":{}}}],["time",{"_index":628,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/UploadToAwsProvider.html":{},"index.html":{}}}],["time.provider",{"_index":2113,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["time.provider.ts",{"_index":1145,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"coverage.html":{}}}],["time.provider.ts:14",{"_index":1148,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{}}}],["time.provider.ts:32",{"_index":1150,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{}}}],["timestamp",{"_index":904,"title":{},"body":{"entities/Event.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{}}}],["title",{"_index":1264,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["tls",{"_index":1423,"title":{},"body":{"modules/MailModule.html":{}}}],["today",{"_index":1084,"title":{},"body":{"injectables/EventsService.html":{}}}],["todayend",{"_index":1074,"title":{},"body":{"injectables/EventsService.html":{}}}],["todaystart",{"_index":1073,"title":{},"body":{"injectables/EventsService.html":{}}}],["token",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/EventsController.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PaystackController.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["token.dto",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token.dto.ts",{"_index":1751,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:17",{"_index":1753,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:18",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:42",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:77",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.provider",{"_index":376,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["token.provider.ts",{"_index":1756,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["token.provider.ts:19",{"_index":1759,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts:56",{"_index":1760,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokend",{"_index":1761,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["tokens",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens'})@apiresponse({status",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":370,"title":{},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":1327,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:12",{"_index":1330,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:38",{"_index":1336,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:58",{"_index":1332,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tomorrow",{"_index":1086,"title":{},"body":{"injectables/EventsService.html":{}}}],["tomorrowend",{"_index":1076,"title":{},"body":{"injectables/EventsService.html":{}}}],["tomorrowstart",{"_index":1075,"title":{},"body":{"injectables/EventsService.html":{}}}],["total",{"_index":496,"title":{},"body":{"injectables/BuyTicketProvider.html":{}}}],["totalamount",{"_index":551,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/MailService.html":{},"injectables/PaystackService.html":{}}}],["totalitems",{"_index":1490,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":1492,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":2315,"title":{},"body":{"index.html":{}}}],["track",{"_index":1471,"title":{},"body":{"injectables/MailService.html":{}}}],["transaction",{"_index":720,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["transformer",{"_index":667,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transport",{"_index":1419,"title":{},"body":{"modules/MailModule.html":{}}}],["trim",{"_index":2011,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["true",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"modules/MailModule.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"guards/RolesGuard.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["true})@type(undefined",{"_index":646,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/PaymentDto.html":{}}}],["try",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":2321,"title":{},"body":{"index.html":{}}}],["txn",{"_index":741,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{}}}],["type",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"classes/CreateEventDto.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/DataResponseInterceptor.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"entities/Payment.html":{},"classes/PaymentDto.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"classes/TicketTypeDto.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateUserDto.html":{},"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"guards/RolesGuard.html":{},"controllers/SubscribersController.html":{},"controllers/TicketsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":2208,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":509,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/PaginationProvider.html":{},"entities/Payment.html":{},"injectables/PaystackService.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"entities/Subscriber.html":{},"injectables/SubscribersService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/PaymentsModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([event",{"_index":1049,"title":{},"body":{"modules/EventsModule.html":{}}}],["typeormmodule.forfeature([payment",{"_index":1603,"title":{},"body":{"modules/PaymentsModule.html":{}}}],["typeormmodule.forfeature([subscriber",{"_index":1876,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["typeormmodule.forfeature([ticket",{"_index":1930,"title":{},"body":{"modules/TicketsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":2116,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":422,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["typescript",{"_index":96,"title":{},"body":{"guards/AccessTokenGuard.html":{},"index.html":{}}}],["unable",{"_index":846,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["unauthorizedexception",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('incorrect",{"_index":1823,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('otp",{"_index":1155,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{}}}],["unauthorizedexception('user",{"_index":1142,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["unauthorizedexception(error",{"_index":1767,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["undefined",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/EventsController.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Payment.html":{},"entities/Ticket.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined'])@apiconsumes('multipart/form",{"_index":949,"title":{},"body":{"controllers/EventsController.html":{}}}],["undefined'])@delete('/:id",{"_index":959,"title":{},"body":{"controllers/EventsController.html":{}}}],["undefined'])@delete('/:userid",{"_index":2066,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined'])@get",{"_index":2071,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined'])@get('/:eventid",{"_index":984,"title":{},"body":{"controllers/EventsController.html":{}}}],["undefined'])@get('/:userid",{"_index":2075,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined'])@get('/:userid/events",{"_index":2081,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined'])@post('/initialize",{"_index":1624,"title":{},"body":{"controllers/PaystackController.html":{}}}],["undefined})@apibody({description",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@apiheaders(['undefined",{"_index":948,"title":{},"body":{"controllers/EventsController.html":{},"controllers/PaystackController.html":{}}}],["undefined})@httpcode(httpstatus.ok)@auth(authtype.none)@patch('/reset",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@httpcode(httpstatus.ok)@auth(authtype.none)@post('/forgot",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":645,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{}}}],["undefined})@post('/sign",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@post('/webhook')@auth(authtype.none)@httpcode(httpstatus.ok",{"_index":1617,"title":{},"body":{"controllers/PaystackController.html":{}}}],["undefined})@post('refresh",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@post()@auth(authtype.none",{"_index":1848,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["unique",{"_index":914,"title":{},"body":{"entities/Event.html":{},"controllers/EventsController.html":{},"entities/Payment.html":{},"entities/Subscriber.html":{},"controllers/SubscribersController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["unit",{"_index":2264,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTicketPdfProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/SubscribersService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":2334,"title":{},"body":{"properties.html":{}}}],["unsold",{"_index":558,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"miscellaneous/enumerations.html":{}}}],["unsubscribed",{"_index":1857,"title":{},"body":{"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["unsubscribeemail",{"_index":1878,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["unsubscribeemail(id",{"_index":1885,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["unsubscribing",{"_index":1887,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["unsuccessful",{"_index":744,"title":{},"body":{"injectables/CreateEventProvider.html":{}}}],["unsupported",{"_index":2031,"title":{},"body":{"injectables/UploadsService.html":{}}}],["unused",{"_index":98,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["update",{"_index":1703,"title":{},"body":{"injectables/PaystackService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["update(json.stringify(req.body",{"_index":1739,"title":{},"body":{"injectables/PaystackService.html":{}}}],["update(resetotp.tostring",{"_index":1177,"title":{},"body":{"injectables/ForgotPasswordProvider.html":{}}}],["update(resetpassworddto.otp.tostring",{"_index":1777,"title":{},"body":{"injectables/ResetPasswordProvider.html":{}}}],["update(ticket",{"_index":1953,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateboughtticketprovider",{"_index":1922,"title":{"injectables/UpdateBoughtTicketProvider.html":{}},"body":{"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updated",{"_index":929,"title":{},"body":{"entities/Event.html":{},"injectables/PaystackService.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["updatedat",{"_index":890,"title":{},"body":{"entities/Event.html":{},"entities/Payment.html":{},"entities/Ticket.html":{}}}],["updatedatecolumn",{"_index":927,"title":{},"body":{"entities/Event.html":{},"entities/Payment.html":{},"entities/Ticket.html":{}}}],["updates",{"_index":2298,"title":{},"body":{"index.html":{}}}],["updateticket",{"_index":1933,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["updateticket(ticketid",{"_index":1942,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["updateticketsstatus",{"_index":1934,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateticketsstatus(entitymanager",{"_index":1945,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updating",{"_index":1948,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{}}}],["upload",{"_index":725,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["uploadedfile",{"_index":988,"title":{},"body":{"controllers/EventsController.html":{}}}],["uploadfile",{"_index":2025,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadfile(file",{"_index":2028,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploading",{"_index":1976,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["uploadresult",{"_index":1995,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadresult.key",{"_index":2002,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploads",{"_index":710,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{},"injectables/UploadsService.html":{}}}],["uploads/uploads.module",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["uploadsmodule",{"_index":158,"title":{"modules/UploadsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/PaystackModule.html":{},"modules/UploadsModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadsservice",{"_index":701,"title":{"injectables/UploadsService.html":{}},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadticketfile",{"_index":1980,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["uploadticketfile(filebuffer",{"_index":1987,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["uploadtoawsprovider",{"_index":1973,"title":{"injectables/UploadToAwsProvider.html":{}},"body":{"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":726,"title":{},"body":{"injectables/CreateEventProvider.html":{},"injectables/PaystackService.html":{},"injectables/UploadsService.html":{}}}],["url(this.request.url",{"_index":1525,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["urls",{"_index":1448,"title":{},"body":{"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PaystackService.html":{}}}],["use",{"_index":415,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/MailModule.html":{},"guards/RolesGuard.html":{}}}],["useclass",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["useinterceptors",{"_index":989,"title":{},"body":{"controllers/EventsController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1022,"title":{},"body":{"controllers/EventsController.html":{}}}],["user",{"_index":35,"title":{"entities/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreaterUsersProviders.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"classes/ForgotPassswordDto.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/PaystackController.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/SubscribersController.html":{},"entities/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UpdateBoughtTicketProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.accounttype",{"_index":1825,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.decorator",{"_index":992,"title":{},"body":{"controllers/EventsController.html":{},"controllers/PaystackController.html":{},"controllers/TicketsController.html":{}}}],["user.decorator.ts",{"_index":2158,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":835,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":784,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":1392,"title":{},"body":{"classes/GetUsersBaseDto.html":{}}}],["user.dto.ts:21",{"_index":1391,"title":{},"body":{"classes/GetUsersBaseDto.html":{}}}],["user.dto.ts:30",{"_index":794,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":797,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:54",{"_index":791,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:71",{"_index":809,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:82",{"_index":790,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:93",{"_index":811,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1353,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{},"injectables/SignInProvider.html":{}}}],["user.entity",{"_index":577,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.events",{"_index":917,"title":{},"body":{"entities/Event.html":{}}}],["user.firstname",{"_index":1465,"title":{},"body":{"injectables/MailService.html":{},"injectables/SignInProvider.html":{}}}],["user.id",{"_index":1351,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["user.lastname",{"_index":1824,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.password",{"_index":1822,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.role",{"_index":1354,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{}}}],["user?.[field",{"_index":2349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user[0",{"_index":1154,"title":{},"body":{"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{}}}],["userid",{"_index":1337,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GetUserEventsProvider.html":{},"entities/Payment.html":{},"injectables/PaystackService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["userquery",{"_index":2132,"title":{},"body":{"injectables/UsersService.html":{}}}],["userquery.limit",{"_index":2146,"title":{},"body":{"injectables/UsersService.html":{}}}],["userquery.page",{"_index":2147,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BuyTicketProvider.html":{},"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":2105,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.providers",{"_index":2108,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.providers.ts",{"_index":828,"title":{},"body":{"injectables/CreaterUsersProviders.html":{},"coverage.html":{}}}],["users.providers.ts:19",{"_index":831,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["users.providers.ts:50",{"_index":833,"title":{},"body":{"injectables/CreaterUsersProviders.html":{}}}],["users/users.module",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":2056,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":159,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersquery",{"_index":2073,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersrepository",{"_index":570,"title":{},"body":{"injectables/ChangeUserPasswordProvider.html":{},"injectables/CreaterUsersProviders.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"injectables/StoreOtpAndExpireProvider.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":482,"title":{"injectables/UsersService.html":{}},"body":{"injectables/BuyTicketProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/GetUserEventsProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/ResetPasswordProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":413,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokenProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"index.html":{}}}],["utils/.../getdateranges.ts",{"_index":2239,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils/.../modifyamount.ts",{"_index":2340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils/getdateranges.ts",{"_index":2170,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["utils/modifyamount",{"_index":1211,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{},"injectables/MailService.html":{}}}],["utils/modifyamount.ts",{"_index":2171,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["uuid",{"_index":1994,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["uuid4",{"_index":1993,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uuid4()}${extension",{"_index":2016,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["v4",{"_index":1992,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["valid",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/EventsController.html":{},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["validate",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["validatenested",{"_index":663,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/PaymentDto.html":{},"classes/TicketTypeDto.html":{}}}],["validating",{"_index":1789,"title":{},"body":{"guards/RolesGuard.html":{}}}],["validation",{"_index":106,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["validationschema",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":664,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateManyTicketsDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPassswordDto.html":{},"classes/GetEventsBaseDto.html":{},"classes/GetEventsDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchTicketDto.html":{},"classes/PaymentDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/TicketTypeDto.html":{},"dependencies.html":{}}}],["value",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"classes/PaginationQueryDto.html":{},"controllers/PaystackController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":764,"title":{},"body":{"classes/CreateManyTicketsDto.html":{},"injectables/GenerateTicketPdfProvider.html":{}}}],["valuex",{"_index":1278,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["varchar",{"_index":892,"title":{},"body":{"entities/Event.html":{},"entities/Subscriber.html":{},"entities/Ticket.html":{},"entities/User.html":{}}}],["variable",{"_index":2153,"title":{},"body":{"coverage.html":{}}}],["variablefont_wdth,wght.ttf",{"_index":1228,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["variables",{"_index":2335,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1487,"title":{},"body":{"interfaces/Paginated.html":{}}}],["vars",{"_index":99,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["venue",{"_index":599,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"controllers/EventsController.html":{}}}],["verification",{"_index":1750,"title":{},"body":{"injectables/PaystackService.html":{}}}],["verified",{"_index":1748,"title":{},"body":{"injectables/PaystackService.html":{}}}],["verify",{"_index":548,"title":{},"body":{"injectables/BuyTicketProvider.html":{},"injectables/PaystackService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["verifying",{"_index":1675,"title":{},"body":{"injectables/PaystackService.html":{}}}],["verifypayment",{"_index":1660,"title":{},"body":{"injectables/PaystackService.html":{}}}],["verifypayment(reference",{"_index":1673,"title":{},"body":{"injectables/PaystackService.html":{}}}],["version",{"_index":2332,"title":{},"body":{"properties.html":{}}}],["video",{"_index":2285,"title":{},"body":{"index.html":{}}}],["virtual",{"_index":651,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["virtuallink",{"_index":600,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["visit",{"_index":2274,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":2287,"title":{},"body":{"index.html":{}}}],["want",{"_index":975,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":2259,"title":{},"body":{"index.html":{}}}],["webhook",{"_index":1619,"title":{},"body":{"controllers/PaystackController.html":{}}}],["webhook/callback",{"_index":1640,"title":{},"body":{"controllers/PaystackController.html":{}}}],["website",{"_index":2319,"title":{},"body":{"index.html":{}}}],["weekendend",{"_index":1078,"title":{},"body":{"injectables/EventsService.html":{}}}],["weekendstart",{"_index":1077,"title":{},"body":{"injectables/EventsService.html":{}}}],["wehook",{"_index":1612,"title":{},"body":{"controllers/PaystackController.html":{}}}],["welcome",{"_index":1460,"title":{},"body":{"injectables/MailService.html":{}}}],["where('id",{"_index":1955,"title":{},"body":{"injectables/TicketsService.html":{}}}],["whereoptions",{"_index":1072,"title":{},"body":{"injectables/EventsService.html":{}}}],["whereoptions.length",{"_index":1101,"title":{},"body":{"injectables/EventsService.html":{}}}],["whereoptions.map((item",{"_index":1111,"title":{},"body":{"injectables/EventsService.html":{}}}],["whether",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateEventProvider.html":{},"injectables/EventsService.html":{},"injectables/ForgotPasswordProvider.html":{},"injectables/PaystackService.html":{},"injectables/ResetPasswordProvider.html":{},"guards/RolesGuard.html":{}}}],["white",{"_index":2008,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["width",{"_index":1253,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["without",{"_index":417,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["working",{"_index":2273,"title":{},"body":{"index.html":{}}}],["world",{"_index":241,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1017,"title":{},"body":{"controllers/EventsController.html":{},"injectables/GenerateTicketPdfProvider.html":{},"controllers/PaystackController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["y",{"_index":1251,"title":{},"body":{"injectables/GenerateTicketPdfProvider.html":{}}}],["yes",{"_index":1338,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/TicketsService.html":{}}}],["you'd",{"_index":2313,"title":{},"body":{"index.html":{}}}],["z])(?=.*\\d)(?=.*[\\w_]).{8",{"_index":800,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":799,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PaymentsModule.html":{},"modules/PaystackModule.html":{},"modules/SubscribersModule.html":{},"modules/TicketsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    guard for access token\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:18\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:42\n                        \n                    \n\n\n            \n                \n                        function for checking if user has access token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                true or false depending on whether user is signed in or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:77\n                        \n                    \n\n\n            \n                \n                        function for extracting the access token from the request headers\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                access token\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constant';\n\n/**\n * guard for access token\n */\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  /**\n   * constructor\n   * @param jwtService\n   * @param jwtConfiguration\n   */\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * inject jwt config\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * function for checking if user has access token\n   * @param context\n   * @returns true or false depending on whether user is signed in or not\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    // we can grab the request from the excetion context\n    const request = context.switchToHttp().getRequest();\n\n    // extract the token from the header\n    const token = this.extractRequestFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    // validate the token\n    try {\n      // if the token is valid, jwt returns the payload which contains info for indetifying the user\n      const payload = await this.jwtService.verify(\n        token,\n        this.jwtConfiguration,\n      );\n\n      // setting the request.user = payload\n      request[REQUEST_USER_KEY] = payload;\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (_) {\n      throw new UnauthorizedException();\n    }\n\n    // accept or deny req based on validation\n    return true;\n  }\n\n  /**\n   * function for extracting the access token from the request headers\n   * @param request\n   * @returns access token\n   */\n  private extractRequestFromHeader(request: Request): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface for a user that has logged in (payload)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    user email\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    user role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    id for user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n  /**\n   * id for user\n   */\n  sub: number;\n\n  /**\n   * user email\n   */\n  email: string;\n\n  /**\n   * user role\n   */\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                controller for the app route\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        get route for the app\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                hello\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * controller for the app route\n */\n@Controller()\nexport class AppController {\n  /**\n   *constructor\n   * @param appService\n   */\n  constructor(\n    /**\n     * injecting the app service\n     */\n    private readonly appService: AppService,\n  ) {}\n\n  /**\n   * get route for the app\n   * @returns hello\n   */\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaymentsModule\n\nPaymentsModule\n\nAppModule -->\n\nPaymentsModule->AppModule\n\n\n\n\n\nPaystackModule\n\nPaystackModule\n\nAppModule -->\n\nPaystackModule->AppModule\n\n\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PaymentsModule\n                        \n                        \n                            PaystackModule\n                        \n                        \n                            SubscribersModule\n                        \n                        \n                            TicketsModule\n                        \n                        \n                            UploadsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport enviromentValidation from './config/enviroment.validation';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { EventsModule } from './events/events.module';\nimport { TicketsModule } from './tickets/tickets.module';\nimport jwtConfig from './auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport { RolesGuard } from './auth/guards/roles/roles.guard';\nimport { MailModule } from './mail/mail.module';\nimport { UploadsModule } from './uploads/uploads.module';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport { SubscribersModule } from './subscribers/subscribers.module';\nimport { PaystackModule } from './paystack/paystack.module';\nimport { PaymentsModule } from './payments/payments.module';\n\n/**\n * app environment\n */\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: enviromentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: 'postgres',\n          autoLoadEntities: configService.get('database.autoLoadEntities'),\n          synchronize: configService.get('database.synchronize'),\n          port: +configService.get('database.port'),\n          username: configService.get('database.user'),\n          password: configService.get('database.password'),\n          host: configService.get('database.host'),\n          database: configService.get('database.name'),\n        };\n      },\n    }),\n    UsersModule,\n    AuthModule,\n    EventsModule,\n    TicketsModule,\n    // Importing an enviroment config specific for this module\n    ConfigModule.forFeature(jwtConfig),\n    // for asynchrousnously registering the jwt module and passing the config to the module\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    MailModule,\n    UploadsModule,\n    PaginationModule,\n    SubscribersModule,\n    PaystackModule,\n    PaymentsModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                app service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:12\n                        \n                    \n\n\n            \n                \n                        dummy function for the app service\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                hello world\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * app service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * dummy function for the app service\n   * @returns hello world\n   */\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                controller for the auth route\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                resetPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(forgotPasswordDto: ForgotPassswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It sends a reset otp to the users mail'})@ApiResponse({status: 200, description: 'Message sent successfully', example: undefined})@ApiBody({description: 'Sends reset otp to the users mail', required: true, type: ForgotPassswordDto, examples: undefined})@HttpCode(HttpStatus.OK)@Auth(AuthType.None)@Post('/forgot-password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:117\n                        \n                    \n\n\n            \n                \n                        route for forgot password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                forgotPasswordDto\n                                            \n                                                            ForgotPassswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It creates  new access and refresh tokens'})@ApiResponse({status: 200, description: 'Access and refresh tokens are created successfully', example: undefined})@ApiBody({description: 'Contains the refresh token', required: true, type: RefreshTokenDto, examples: undefined})@Post('refresh-tokens')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:199\n                        \n                    \n\n\n            \n                \n                        route for refresh tokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(resetPasswordDto: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It resets users password'})@ApiResponse({status: 200, description: 'Password reset successfully', example: undefined})@ApiBody({description: 'Contains the new password and otp', required: true, type: ResetPasswordDto, examples: undefined})@HttpCode(HttpStatus.OK)@Auth(AuthType.None)@Patch('/reset-password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:159\n                        \n                    \n\n\n            \n                \n                        route for reset password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resetPasswordDto\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It signs in a user with valid email and password'})@ApiResponse({status: 200, description: 'User is signed in successfully', example: undefined})@ApiBody({description: 'Signs in a user', required: true, type: SignInDto, examples: undefined})@Post('/sign-in')@Auth(AuthType.None)@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        route for sign in\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                access token and refresh token\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { SignInDto } from './dtos/sign-in.dto';\nimport { AuthService } from './providers/auth/auth.service';\nimport { Auth } from './decorator/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { ForgotPassswordDto } from './dtos/forgot-password.dto';\nimport { ResetPasswordDto } from './dtos/reset-password.dto';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n/**\n * controller for the auth route\n */\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  /**\n   * constructor\n   * @param authService\n   */\n  constructor(\n    /**\n     * injecting the auth service\n     */\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * route for sign in\n   * @param signInDto\n   * @returns access token and refresh token\n   */\n  @ApiOperation({\n    summary: 'It signs in a user with valid email and password',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User is signed in successfully',\n    example: {\n      summary: 'Access and refresh token',\n      value: {\n        accessToken: 'jsbfiwhvfquobdfj',\n        refreshToken: 'jsbfiwhvfquobdfj',\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Signs in a user',\n    required: true,\n    type: SignInDto,\n    examples: {\n      example1: {\n        summary: 'Valid request example',\n        value: {\n          email: 'iloghaluagneskc@gmail.com',\n          password: '@Password1',\n        },\n      },\n      example2: {\n        summary: 'Invalid request example (missing password)',\n        value: {\n          email: 'iloghaluagneskc@gmail.com',\n        },\n      },\n    },\n  })\n  @Post('/sign-in')\n  @Auth(AuthType.None)\n  @HttpCode(HttpStatus.OK)\n  public signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n\n  /**\n   * route for forgot password\n   *\n   */\n  @ApiOperation({\n    summary: 'It sends a reset otp to the users mail',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Message sent successfully',\n    example: {\n      value: {\n        message: 'Email sent successfully',\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Sends reset otp to the users mail',\n    required: true,\n    type: ForgotPassswordDto,\n    examples: {\n      example1: {\n        summary: 'Valid request example',\n        value: {\n          email: 'iloghaluagneskc@gmail.com',\n        },\n      },\n      example2: {\n        summary: 'Invalid request example (missing email)',\n        value: {},\n      },\n    },\n  })\n  @HttpCode(HttpStatus.OK)\n  @Auth(AuthType.None)\n  @Post('/forgot-password')\n  public forgotPassword(@Body() forgotPasswordDto: ForgotPassswordDto) {\n    return this.authService.forgotPassword(forgotPasswordDto);\n  }\n\n  /**\n   * route for reset password\n   */\n  @ApiOperation({\n    summary: 'It resets users password',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Password reset successfully',\n    example: {\n      value: {\n        message: 'Password reset successfully',\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Contains the new password and otp',\n    required: true,\n    type: ResetPasswordDto,\n    examples: {\n      example1: {\n        summary: 'Valid request example',\n        value: {\n          otp: 2354,\n          password: '@Psswrbnnind123',\n        },\n      },\n      example2: {\n        summary: 'Invalid request example (missing password)',\n        value: {\n          otp: 2342,\n        },\n      },\n    },\n  })\n  @HttpCode(HttpStatus.OK)\n  @Auth(AuthType.None)\n  @Patch('/reset-password')\n  public resetPassword(@Body() resetPasswordDto: ResetPasswordDto) {\n    return this.authService.resetPassword(resetPasswordDto);\n  }\n\n  /**\n   * route for refresh tokens\n   */\n  @ApiOperation({\n    summary: 'It creates  new access and refresh tokens',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Access and refresh tokens are created successfully',\n    example: {\n      value: {\n        accessToken: 'jsbfiwhvfquobdfj',\n        refreshToken: 'jsbfiwhvfquobdfj',\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Contains the refresh token',\n    required: true,\n    type: RefreshTokenDto,\n    examples: {\n      example1: {\n        summary: 'Valid request example',\n        value: {\n          refreshToken: 'jbfwihfubfjkebiejhfbw',\n        },\n      },\n      example2: {\n        summary: 'Invalid request example (missing refresh token)',\n        value: {},\n      },\n    },\n  })\n  @Post('refresh-tokens')\n  @HttpCode(HttpStatus.OK)\n  @Auth(AuthType.None)\n  public async refreshTokens(@Body() refreshTokenDto: RefreshTokenDto) {\n    // console.log('re', refreshTokenDto);\n    return await this.authService.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nForgotPasswordProvider\n\nForgotPasswordProvider\n\nAuthModule -->\n\nForgotPasswordProvider->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nRefreshTokenProvider\n\nRefreshTokenProvider\n\nAuthModule -->\n\nRefreshTokenProvider->AuthModule\n\n\n\n\n\nResetPasswordProvider\n\nResetPasswordProvider\n\nAuthModule -->\n\nResetPasswordProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            ForgotPasswordProvider\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            RefreshTokenProvider\n                        \n                        \n                            ResetPasswordProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './providers/auth/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ForgotPasswordProvider } from './providers/forgot-password.provider';\nimport { ResetPasswordProvider } from './providers/reset-password.provider';\nimport { RefreshTokenProvider } from './providers/refresh-token.provider';\n\n@Module({\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    SignInProvider,\n    GenerateTokensProvider,\n    ForgotPasswordProvider,\n    ResetPasswordProvider,\n    RefreshTokenProvider,\n  ],\n  controllers: [AuthController],\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    // for asynchrousnously registering the jwt module and passing the config to the module\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  exports: [HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                auth service for the auth module\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                resetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(signInProvider: SignInProvider, forgotPasswordProvider: ForgotPasswordProvider, resetPasswordProvider: ResetPasswordProvider, refreshTokenProvider: RefreshTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        forgotPasswordProvider\n                                                  \n                                                        \n                                                                        ForgotPasswordProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        resetPasswordProvider\n                                                  \n                                                        \n                                                                        ResetPasswordProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenProvider\n                                                  \n                                                        \n                                                                        RefreshTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(forgotPasswordDto: ForgotPassswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth/auth.service.ts:59\n                        \n                    \n\n\n            \n                \n                        function for getting the otp email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                forgotPasswordDto\n                                            \n                                                            ForgotPassswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                null\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth/auth.service.ts:77\n                        \n                    \n\n\n            \n                \n                        function for refreshing access token after it expires\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(resetPasswordDto: ResetPasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth/auth.service.ts:68\n                        \n                    \n\n\n            \n                \n                        function for resetting password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resetPasswordDto\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth/auth.service.ts:50\n                        \n                    \n\n\n            \n                \n                        function for signing in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SignInDto } from 'src/auth/dtos/sign-in.dto';\nimport { SignInProvider } from '../sign-in.provider';\nimport { ForgotPassswordDto } from 'src/auth/dtos/forgot-password.dto';\nimport { ForgotPasswordProvider } from '../forgot-password.provider';\nimport { ResetPasswordProvider } from '../reset-password.provider';\nimport { ResetPasswordDto } from 'src/auth/dtos/reset-password.dto';\nimport { RefreshTokenDto } from 'src/auth/dtos/refresh-token.dto';\nimport { RefreshTokenProvider } from '../refresh-token.provider';\n\n/**\n * auth service for the auth module\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * constructor\n   * @param signInProvider\n   * @param forgotPasswordProvider\n   * @param resetPasswordProvider\n   * @param refreshTokenProvider\n   */\n  constructor(\n    /**\n     * injecting the sign in provider\n     */\n    private readonly signInProvider: SignInProvider,\n\n    /**\n     * injecting the forgotPasswordProvider\n     */\n    private readonly forgotPasswordProvider: ForgotPasswordProvider,\n\n    /**\n     * injecting the resetPasswordProvider\n     */\n    private readonly resetPasswordProvider: ResetPasswordProvider,\n\n    /**\n     * injecting the refresh token provider\n     */\n    private readonly refreshTokenProvider: RefreshTokenProvider,\n  ) {}\n\n  /**\n   * function for signing in a user\n   * @param signInDto\n   * @returns access and refresh tokens\n   */\n  public async signIn(signInDto: SignInDto) {\n    return await this.signInProvider.signIn(signInDto);\n  }\n\n  /**\n   * function for getting the otp email\n   * @param forgotPasswordDto\n   * @returns null\n   */\n  public async forgotPassword(forgotPasswordDto: ForgotPassswordDto) {\n    return await this.forgotPasswordProvider.forgotPassword(forgotPasswordDto);\n  }\n\n  /**\n   * function for resetting password\n   * @param resetPasswordDto\n   * @returns user\n   */\n  public async resetPassword(resetPasswordDto: ResetPasswordDto) {\n    return await this.resetPasswordProvider.resetPassword(resetPasswordDto);\n  }\n\n  /**\n   * function for refreshing access token after it expires\n   * @param refreshTokenDto\n   * @returns access and refresh tokens\n   */\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    return await this.refreshTokenProvider.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    guard for authentication\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:33\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:59\n                        \n                    \n\n\n            \n                \n                        function for authenticating a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                true or false based on whether user is logged in or not\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n// import { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constant';\n\n/**\n * guard for authentication\n */\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  // using static means you can use the name of the property of the class without the \"this\" keyword\n  /**\n   * default auth type\n   */\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  /**\n   * map for auth types and guards they use\n   */\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  /**\n   * constructor\n   * @param reflector\n   * @param accessTokenGuard\n   */\n  constructor(\n    /**\n     * injecting the reflector class\n     * The reflector class makes you access diff metadata from the execution context\n     */\n    private readonly reflector: Reflector,\n\n    /**\n     * Injecting the access token guard\n     *\n     */\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  /**\n   * function for authenticating a user\n   * @param context\n   * @returns true or false based on whether user is logged in or not\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    // Get all the auth types from reflector\n    // This returns an array of the auth types for a specific class or method in a class\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]) ?? [AuthenticationGuard.defaultAuthType];\n\n    // create an array of the guards\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    // Default error\n    const error = new UnauthorizedException();\n\n    // loop through the guards and fire the canActivate\n    for (const instance of guards) {\n      let canActivate;\n\n      try {\n        canActivate = await Promise.resolve(instance.canActivate(context));\n      } catch (err) {\n        throw err;\n      }\n\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for bcrypt\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:27\n                        \n                    \n\n\n            \n                \n                        function for comparing input password against password in db\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                true or false based whether the entered password is same with the password in the database\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n                        function for hashing the password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                hashed password\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * provider for bcrypt\n */\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * function for hashing the password\n   * @param data\n   * @returns hashed password\n   */\n  public async hashPassword(data: string | Buffer): Promise {\n    // generate salt\n    const salt = await bcrypt.genSalt();\n    return bcrypt.hash(data, salt);\n  }\n\n  /**\n   * function for comparing input password against password in db\n   * @param data\n   * @param encrypted\n   * @returns true or false based whether the entered password is same with the password in the database\n   */\n  public async comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise {\n    return await bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BuyTicketProvider.html":{"url":"injectables/BuyTicketProvider.html","title":"injectable - BuyTicketProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BuyTicketProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/providers/buy-ticket.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider class for buying ticket\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                buyTicket\n                            \n                            \n                                    Private\n                                calculateTotal\n                            \n                            \n                                    Private\n                                    Async\n                                lockTickets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ticketRepository: Repository, usersService: UsersService, eventsService: EventsService)\n                    \n                \n                        \n                            \n                                Defined in src/tickets/providers/buy-ticket.provider.ts:15\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ticketRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventsService\n                                                  \n                                                        \n                                                                        EventsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        buyTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    buyTicket(queryRunner: QueryRunner, paymentDto: PaymentDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tickets/providers/buy-ticket.provider.ts:45\n                        \n                    \n\n\n            \n                \n                        function for modying the ticket when it bought\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                paymentDto\n                                            \n                                                            PaymentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                modified ticket\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        calculateTotal\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculateTotal(tickets: Ticket[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tickets/providers/buy-ticket.provider.ts:145\n                        \n                    \n\n\n            \n                \n                        function  for calculating the total price of the tickets\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tickets\n                                            \n                                                            Ticket[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                total price of the tickets\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        lockTickets\n                        \n                    \n                \n            \n            \n                \n                        \n                    lockTickets(queryRunner: QueryRunner, ticketIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tickets/providers/buy-ticket.provider.ts:126\n                        \n                    \n\n\n            \n                \n                        function for locking tickets\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ticketIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                locked tickets\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, Scope } from '@nestjs/common';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\nimport { Ticket } from '../ticket.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { QueryRunner, Repository } from 'typeorm';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { EventsService } from 'src/events/providers/events.service';\nimport { PaymentDto } from '@/paystack/dtos/payment.dto';\nimport { TicketStatus } from '../enums/ticket-status.enum';\n\n/**\n * provider class for buying ticket\n */\n@Injectable({ scope: Scope.DEFAULT })\nexport class BuyTicketProvider {\n  /**\n   * constructor\n   * @param ticketRepository\n   * @param usersService\n   */\n  constructor(\n    /**\n     * injecting the ticket repository\n     */\n    @InjectRepository(Ticket)\n    private readonly ticketRepository: Repository,\n\n    /**\n     * injecting the users service\n     */\n    private readonly usersService: UsersService,\n\n    /**\n     * injecting the events service\n     */\n    private readonly eventsService: EventsService,\n  ) {}\n\n  /**\n   * function for modying the ticket when it bought\n   * @param patchTicketDto\n   * @param user\n   * @returns modified ticket\n   */\n  public async buyTicket(\n    queryRunner: QueryRunner,\n    paymentDto: PaymentDto,\n    user: ActiveUserData,\n  ) {\n    // body -  eventId, ticketType\n\n    // find the user\n    const ticketBuyer = await this.usersService.findOneById(user.sub);\n\n    // find the event\n    const event = await this.eventsService.findEventById(\n      String(paymentDto.eventId),\n    );\n\n    // find how many tickets are left of the particular type\n    const { tickets } = event;\n\n    const ticketsToBeBought: any[] = paymentDto.ticketTypes\n      .map((ticketType) => ({\n        quamtity: ticketType.quantity,\n        type: ticketType.ticket.type,\n      }))\n      .map((item) => {\n        return tickets.filter(\n          (ticket) =>\n            ticket.type === item.type &&\n            ticket.ticketStatus === TicketStatus.UNSOLD,\n        );\n      })\n      .map((item, i) => {\n        if (item.length  item.id);\n\n    // lock tickets\n\n    // Step 1: Lock and verify tickets\n    const lockedTickets = await this.lockTickets(\n      queryRunner,\n      ticketsToBeBought,\n    );\n\n    const totalAmount = this.calculateTotal(lockedTickets);\n\n    // const allUnsoldTicketsWithTicketType = tickets\n    //   .filter(\n    //     (ticket) => ticket.type.toLowerCase() === body.ticketTypes.toLowerCase(),\n    //   )\n    //   .filter((ticket) => ticket.ticketStatus === 'unsold');\n\n    // if (allUnsoldTicketsWithTicketType.length  sum + Number(ticket.price), 0);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChangeUserPasswordProvider.html":{"url":"injectables/ChangeUserPasswordProvider.html","title":"injectable - ChangeUserPasswordProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChangeUserPasswordProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/change-user-password.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider class for the change user password\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                changeUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/change-user-password.provider.ts:10\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        changeUserPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeUserPassword(user: User, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/change-user-password.provider.ts:29\n                        \n                    \n\n\n            \n                \n                        fuunction for changing the user password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n/**\n * provider class for the change user password\n */\n@Injectable()\nexport class ChangeUserPasswordProvider {\n  /**\n   * constructor\n   * @param usersRepository\n   */\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  /**\n   * fuunction for changing the user password\n   * @param user\n   * @param newPassword\n   * @returns user\n   */\n  public async changeUserPassword(user: User, newPassword: string) {\n    const newUserObj = {\n      ...user,\n      password: newPassword,\n      resetOtp: null,\n      resetOtpExpire: null,\n    };\n\n    try {\n      return await this.usersRepository.save(newUserObj);\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventDto.html":{"url":"classes/CreateEventDto.html","title":"class - CreateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dtos/create-event.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for creating events\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                attendanceMode\n                            \n                            \n                                    \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                eventEndDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                eventEndTime\n                            \n                            \n                                    \n                                    \n                                    \n                                eventStartDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                eventStartTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                priceType\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                tickets\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                venue\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                virtualLink\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the address of the event', example: 'Lagos Island, Nigeria'})@IsOptional()@IsString()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:116\n                        \n                    \n\n            \n                \n                    address of event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        attendanceMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         eventAttendanceMode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: eventAttendanceMode, description: 'This is the event attendance mode', example: 'ongoing'})@IsEnum(eventAttendanceMode)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:69\n                        \n                    \n\n            \n                \n                    event attendance mode\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         eventCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: eventCategory, description: 'This is the category of the event', example: 'Music'})@IsEnum(eventCategory)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:45\n                        \n                    \n\n            \n                \n                    category of event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the description of the event', example: 'Be the free person in star boys show'})@IsString()@MaxLength(2560)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:80\n                        \n                    \n\n            \n                \n                    description of event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        eventEndDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the end date of the event', example: '24th April, 2024'})@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:150\n                        \n                    \n\n            \n                \n                    end date of event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        eventEndTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the end time of the event', example: '13:00'})@IsString()@IsNotEmpty()@MaxLength(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:174\n                        \n                    \n\n            \n                \n                    end time of event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        eventStartDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the start date of the event', example: '16th April, 2024'})@IsDate()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:139\n                        \n                    \n\n            \n                \n                    start date of event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        eventStartTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the start time of the event', example: '08:00'})@IsString()@IsNotEmpty()@MaxLength(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:162\n                        \n                    \n\n            \n                \n                    start time of event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the image of the event', example: 'https://aws-image.png'})@IsUrl()@IsOptional()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:92\n                        \n                    \n\n            \n                \n                    image of event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the name of the event', example: 'Star boys show'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:33\n                        \n                    \n\n            \n                \n                    name of event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        priceType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         eventPriceType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: eventPriceType, description: 'This is the event price type.', example: 'free'})@IsEnum(eventPriceType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:57\n                        \n                    \n\n            \n                \n                    category of event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        tickets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ticket[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'These are the tickets of the event', example: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:191\n                        \n                    \n\n            \n                \n                    event tickets\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        venue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the venue of the event', example: 'Eko Hotels'})@IsOptional()@IsString()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:104\n                        \n                    \n\n            \n                \n                    venue of event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        virtualLink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the virtual link of the event', example: 'https://www.starboy.com'})@IsOptional()@IsString()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/create-event.dto.ts:128\n                        \n                    \n\n            \n                \n                    virtual link of event\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  MaxLength,\n  ValidateNested,\n} from 'class-validator';\nimport { eventCategory } from '../enums/eventCategory.enum';\nimport { Ticket } from 'src/tickets/ticket.entity';\nimport { Type } from 'class-transformer';\nimport { CreateTicketDto } from 'src/tickets/dtos/create-tickets.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { eventPriceType } from '../enums/eventPricetype.enum';\nimport { eventAttendanceMode } from '../enums/attendanceMode.enum';\n\n/**\n * dto for creating events\n */\nexport class CreateEventDto {\n  /**\n   * name of event\n   */\n  @ApiProperty({\n    description: 'This is the name of the event',\n    example: 'Star boys show',\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * category of event\n   */\n  @ApiProperty({\n    enum: eventCategory,\n    description: 'This is the category of the event',\n    example: 'Music',\n  })\n  @IsEnum(eventCategory)\n  @IsNotEmpty()\n  category: eventCategory;\n\n  /**\n   * category of event\n   */\n  @ApiProperty({\n    enum: eventPriceType,\n    description: 'This is the event price type.',\n    example: 'free',\n  })\n  @IsEnum(eventPriceType)\n  @IsNotEmpty()\n  priceType: eventPriceType;\n\n  /**\n   * event attendance mode\n   */\n  @ApiProperty({\n    enum: eventAttendanceMode,\n    description: 'This is the event attendance mode',\n    example: 'ongoing',\n  })\n  @IsEnum(eventAttendanceMode)\n  @IsNotEmpty()\n  attendanceMode: eventAttendanceMode;\n\n  /**\n   * description of event\n   */\n  @ApiProperty({\n    description: 'This is the description of the event',\n    example: 'Be the free person in star boys show',\n  })\n  @IsString()\n  @MaxLength(2560)\n  description: string;\n\n  /**\n   * image of event\n   */\n  @ApiProperty({\n    description: 'This is the image of the event',\n    example: 'https://aws-image.png',\n  })\n  @IsUrl()\n  @IsOptional()\n  @MaxLength(1024)\n  image: string;\n\n  /**\n   * venue of event\n   */\n  @ApiPropertyOptional({\n    description: 'This is the venue of the event',\n    example: 'Eko Hotels',\n  })\n  @IsOptional()\n  @IsString()\n  @MaxLength(1024)\n  venue?: string;\n\n  /**\n   * address of event\n   */\n  @ApiPropertyOptional({\n    description: 'This is the address of the event',\n    example: 'Lagos Island, Nigeria',\n  })\n  @IsOptional()\n  @IsString()\n  @MaxLength(1024)\n  address?: string;\n\n  /**\n   * virtual link of event\n   */\n  @ApiPropertyOptional({\n    description: 'This is the virtual link of the event',\n    example: 'https://www.starboy.com',\n  })\n  @IsOptional()\n  @IsString()\n  @MaxLength(1024)\n  virtualLink?: string;\n\n  /**\n   * start date of event\n   */\n  @ApiProperty({\n    description: 'This is the start date of the event',\n    example: '16th April, 2024',\n  })\n  @IsDate()\n  @IsNotEmpty()\n  eventStartDate: Date;\n\n  /**\n   * end date of event\n   */\n  @ApiPropertyOptional({\n    description: 'This is the end date of the event',\n    example: '24th April, 2024',\n  })\n  @IsOptional()\n  @IsDate()\n  eventEndDate?: string;\n\n  /**\n   * start time of event\n   */\n  @ApiProperty({\n    description: 'This is the start time of the event',\n    example: '08:00',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(5)\n  eventStartTime: string;\n\n  /**\n   * end time of event\n   */\n  @ApiProperty({\n    description: 'This is the end time of the event',\n    example: '13:00',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(5)\n  eventEndTime: string;\n\n  /**\n   * event tickets\n   */\n  @ApiProperty({\n    description: 'These are the tickets of the event',\n    example: {\n      type: 'general',\n      price: 3000,\n      summary: 'This is the general ticket',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateTicketDto)\n  tickets: Ticket[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateEventProvider.html":{"url":"injectables/CreateEventProvider.html","title":"injectable - CreateEventProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateEventProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/providers/create-event.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for creating an event\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, dataSource: DataSource, uploadsService: UploadsService)\n                    \n                \n                        \n                            \n                                Defined in src/events/providers/create-event.provider.ts:18\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadsService\n                                                  \n                                                        \n                                                                        UploadsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEvent(createEventDto: CreateEventDto, user: ActiveUserData, file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/providers/create-event.provider.ts:49\n                        \n                    \n\n\n            \n                \n                        function for creating an event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the created event\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateEventDto } from '../dtos/create-event.dto';\nimport { DataSource } from 'typeorm';\nimport { Event } from '../event.entity';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\nimport { Ticket } from 'src/tickets/ticket.entity';\nimport { UploadsService } from 'src/uploads/providers/uploads.service';\n\n/**\n * provider for creating an event\n */\n@Injectable()\nexport class CreateEventProvider {\n  /**\n   * constructor\n   * @param usersService\n   * @param dataSource\n   * @param uploadsService\n   */\n  constructor(\n    /**\n     * injecting users service\n     */\n    private readonly usersService: UsersService,\n\n    /**\n     * Injecting datasource\n     */\n    private readonly dataSource: DataSource,\n\n    /**\n     * injecting the uploads service\n     */\n    private readonly uploadsService: UploadsService,\n  ) {}\n\n  /**\n   * function for creating an event\n   * @param createEventDto\n   * @param user\n   * @param file\n   * @returns the created event\n   */\n  public async createEvent(\n    createEventDto: CreateEventDto,\n    user: ActiveUserData,\n    file: Express.Multer.File,\n  ) {\n    // find the creator (owner of the event)\n    let owner;\n    const newTickets: Ticket[] = [];\n    try {\n      owner = await this.usersService.findOneById(user.sub);\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n    // create Query Runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n    try {\n      // connect query runner to datasource\n      await queryRunner.connect();\n      // start transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not connect to datasource');\n    }\n    const imageUrl = await this.uploadsService.uploadFile(file);\n    // upload the event image url to the db\n    try {\n      // create event\n      const event = queryRunner.manager.create(Event, {\n        ...createEventDto,\n        owner,\n        image: imageUrl,\n      });\n      // saving event\n      const eventResult = await queryRunner.manager.save(event);\n      for (const ticket of createEventDto.tickets) {\n        /**\n         * param\n         * entity\n         * dto\n         */\n        const newTicket = queryRunner.manager.create(Ticket, {\n          ...ticket,\n          event: eventResult,\n        });\n        const ticketResult = await queryRunner.manager.save(newTicket);\n        newTickets.push(ticketResult);\n      }\n      // if successful commit\n      // ensures the txn is committed to the db\n      await queryRunner.commitTransaction();\n      return { event: eventResult };\n    } catch (error) {\n      // if unsuccessful rollback\n      // we rollback the txn here if it is not successful\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      // relsease the connection\n      // release connection whether it was successful or not\n      try {\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyTicketsDto.html":{"url":"classes/CreateManyTicketsDto.html","title":"class - CreateManyTicketsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyTicketsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dtos/create-many-tickets.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto class for create many tickets\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                tickets\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        tickets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateTicketDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/dtos/create-many-tickets.dto.ts:26\n                        \n                    \n\n            \n                \n                    tickets list\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateTicketDto } from './create-tickets.dto';\n\n/**\n * dto class for create many tickets\n */\nexport class CreateManyTicketsDto {\n  /**\n   * tickets list\n   */\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      // the type of entity we expect for each of the items\n      type: 'User',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  //   this tells the type of values we are expecting in each nested obj\n  @Type(() => CreateTicketDto)\n  tickets: CreateTicketDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSubscriberDto.html":{"url":"classes/CreateSubscriberDto.html","title":"class - CreateSubscriberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSubscriberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/dtos/create-subscriber.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for creating a subscriber\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the email of the subscriber', example: 'Favour@gmail.com'})@IsEmail()@MaxLength(96)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dtos/create-subscriber.dto.ts:18\n                        \n                    \n\n            \n                \n                    email address\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, MaxLength } from 'class-validator';\n\n/**\n * dto for creating a subscriber\n */\nexport class CreateSubscriberDto {\n  /**\n   * email address\n   */\n  @ApiProperty({\n    description: 'This is the email of the subscriber',\n    example: 'Favour@gmail.com',\n  })\n  @IsEmail()\n  @MaxLength(96)\n  @IsNotEmpty()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTicketDto.html":{"url":"classes/CreateTicketDto.html","title":"class - CreateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dtos/create-tickets.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto class for creating a ticket\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                summary\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/dtos/create-tickets.dto.ts:19\n                        \n                    \n\n            \n                \n                    ticket price\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        summary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/dtos/create-tickets.dto.ts:26\n                        \n                    \n\n            \n                \n                    ticket summary\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/dtos/create-tickets.dto.ts:12\n                        \n                    \n\n            \n                \n                    ticket type\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * dto class for creating a ticket\n */\nexport class CreateTicketDto {\n  /**\n   * ticket type\n   */\n  @IsString()\n  @IsNotEmpty()\n  type: string;\n\n  /**\n   * ticket price\n   */\n  @IsInt()\n  @IsNotEmpty()\n  price: number;\n\n  /**\n   * ticket summary\n   */\n  @IsString()\n  @IsNotEmpty()\n  summary: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto class for creating user dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                accountType\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        accountType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         accountType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the account type of the user', example: 'TicketPurchaser'})@IsEnum(accountType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:82\n                        \n                    \n\n            \n                \n                    user account type\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the email of the user', example: 'Favour@gmail.com'})@IsEmail()@MaxLength(96)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:54\n                        \n                    \n\n            \n                \n                    user email address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the first name of the user', example: 'Favour'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:30\n                        \n                    \n\n            \n                \n                    user firstname\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the last name of the user', example: 'Ejim'})@IsString()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:42\n                        \n                    \n\n            \n                \n                    user lastname\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the password of the user', example: '@Favour233'})@IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/, {message: 'Minimum eight characters, atleast one letter, number and special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:71\n                        \n                    \n\n            \n                \n                    user password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the role of the user', example: 'Admin'})@IsEnum(Role)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:93\n                        \n                    \n\n            \n                \n                    user role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { accountType } from '../enums/account-type.enum';\nimport { Role } from 'src/auth/enums/role-type.enum';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * dto class for creating user dto\n */\nexport class CreateUserDto {\n  /**\n   * user firstname\n   */\n  @ApiProperty({\n    description: 'This is the first name of the user',\n    example: 'Favour',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  /**\n   * user lastname\n   */\n  @ApiProperty({\n    description: 'This is the last name of the user',\n    example: 'Ejim',\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName: string;\n\n  /**\n   * user email address\n   */\n  @ApiProperty({\n    description: 'This is the email of the user',\n    example: 'Favour@gmail.com',\n  })\n  @IsEmail()\n  @MaxLength(96)\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * user password\n   */\n  @ApiProperty({\n    description: 'This is the password of the user',\n    example: '@Favour233',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/, {\n    message:\n      'Minimum eight characters, atleast one letter, number and special character',\n  })\n  password: string;\n\n  /**\n   * user account type\n   */\n  @ApiProperty({\n    description: 'This is the account type of the user',\n    example: 'TicketPurchaser',\n  })\n  @IsEnum(accountType)\n  @IsOptional()\n  accountType?: accountType;\n\n  /**\n   * user role\n   */\n  @ApiProperty({\n    description: 'This is the role of the user',\n    example: 'Admin',\n  })\n  @IsEnum(Role)\n  @IsNotEmpty()\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreaterUsersProviders.html":{"url":"injectables/CreaterUsersProviders.html","title":"injectable - CreaterUsersProviders","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreaterUsersProviders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/creater-users.providers.ts\n        \n\n\n            \n                Description\n            \n            \n                provider class for creating user\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/creater-users.providers.ts:19\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/creater-users.providers.ts:50\n                        \n                    \n\n\n            \n                \n                        function for creating user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                created user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { MailService } from 'src/mail/providers/mail.service';\n\n/**\n * provider class for creating user\n */\n@Injectable()\nexport class CreaterUsersProviders {\n  /**\n   * constructor\n   * @param usersRepository\n   * @param hashingProvider\n   * @param mailService\n   */\n  constructor(\n    /**\n     * inhjecting the user repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n\n    /**\n     * injecting the hashing provider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * injecting the mail service\n     */\n    private readonly mailService: MailService,\n  ) {}\n\n  /**\n   * function for creating user\n   * @param createUserDto\n   * @returns created user\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser;\n\n    try {\n      // check if user already exists with same email\n      existingUser = await this.usersRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error: any) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    // handle exception\n    if (existingUser) {\n      throw new BadRequestException(\n        'The user already exists, please check your email',\n        {},\n      );\n    }\n\n    // create a new user\n    let newUser = this.usersRepository.create({\n      ...createUserDto,\n      password: await this.hashingProvider.hashPassword(createUserDto.password),\n    });\n\n    // save the user to the db\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    try {\n      await this.mailService.sendUserWelcome(newUser);\n    } catch (error) {\n      console.log(error);\n      throw new RequestTimeoutException(error);\n    }\n\n    return {\n      id: newUser.id,\n      firstName: newUser.firstName,\n      lastName: newUser.lastName,\n      email: newUser.email,\n      role: newUser.role,\n      accountType: newUser.accountType,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for the data response interceptor\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:32\n                        \n                    \n\n\n            \n                \n                        function for formatting the response data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                the response in {apiVersion: \"1.0.0\", data: ...} format\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { map, Observable } from 'rxjs';\n\n/**\n * provider for the data response interceptor\n */\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  /**\n   * constructor\n   * @param configService\n   */\n  constructor(\n    /**\n     * injecting config service\n     */\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * function for formatting the response data\n   * @param context\n   * @param next\n   * @returns the response in {apiVersion: \"1.0.0\", data: ...} format\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    // console.log('Before ...');\n    // before method execution\n    return next.handle().pipe(\n      map((data) => ({\n        apiVersion: this.configService.get('appConfig.apiVersion'),\n        data: data,\n      })),\n    );\n    // After method execution\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Event.html":{"url":"entities/Event.html","title":"entity - Event","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Event\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/event.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                event entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                attendanceMode\n                            \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    Optional\n                                eventEndDate\n                            \n                            \n                                    \n                                eventEndTime\n                            \n                            \n                                    \n                                eventStartDate\n                            \n                            \n                                    \n                                eventStartTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                owner\n                            \n                            \n                                    \n                                priceType\n                            \n                            \n                                    \n                                tickets\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                venue\n                            \n                            \n                                    \n                                    Optional\n                                virtualLink\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:105\n                        \n                    \n\n            \n                \n                    event address column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        attendanceMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         eventAttendanceMode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: eventAttendanceMode, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:65\n                        \n                    \n\n            \n                \n                    event attendance mode\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         eventCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: eventCategory, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:45\n                        \n                    \n\n            \n                \n                    event category column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:81\n                        \n                    \n\n            \n                \n                    date event was created column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 2560, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:75\n                        \n                    \n\n            \n                \n                    event description column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        eventEndDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:135\n                        \n                    \n\n            \n                \n                    event end date column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        eventEndTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false, length: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:129\n                        \n                    \n\n            \n                \n                    event end time column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        eventStartDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:117\n                        \n                    \n\n            \n                \n                    event start date column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        eventStartTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false, length: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:123\n                        \n                    \n\n            \n                \n                    event start time column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:24\n                        \n                    \n\n            \n                \n                    event id column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:93\n                        \n                    \n\n            \n                \n                    event image column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:35\n                        \n                    \n\n            \n                \n                    event id column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.events, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:141\n                        \n                    \n\n            \n                \n                    event and owner relationship\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priceType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         eventPriceType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: eventPriceType, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:55\n                        \n                    \n\n            \n                \n                    event price type\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tickets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ticket[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, ticket => ticket.event, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:147\n                        \n                    \n\n            \n                \n                    event and tickets relationship\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:87\n                        \n                    \n\n            \n                \n                    date event was updated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        venue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:99\n                        \n                    \n\n            \n                \n                    event venue column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        virtualLink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/event.entity.ts:111\n                        \n                    \n\n            \n                \n                    event virtual link column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { User } from 'src/users/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { eventCategory } from './enums/eventCategory.enum';\nimport { Ticket } from 'src/tickets/ticket.entity';\nimport { eventPriceType } from './enums/eventPricetype.enum';\nimport { eventAttendanceMode } from './enums/attendanceMode.enum';\n/**\n * event entity\n */\n@Entity()\nexport class Event {\n  /**\n   * event id column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * event id column\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n    unique: true,\n  })\n  name: string;\n\n  /**\n   * event category column\n   */\n  @Column({\n    type: 'enum',\n    enum: eventCategory,\n    nullable: false,\n  })\n  category: eventCategory;\n\n  /**\n   * event price type\n   */\n  @Column({\n    type: 'enum',\n    enum: eventPriceType,\n    nullable: false,\n  })\n  priceType: eventPriceType;\n\n  /**\n   * event attendance mode\n   */\n  @Column({\n    type: 'enum',\n    enum: eventAttendanceMode,\n    nullable: false,\n  })\n  attendanceMode: eventAttendanceMode;\n\n  /**\n   * event description column\n   */\n  @Column({\n    type: 'varchar',\n    length: 2560,\n    nullable: false,\n  })\n  description: string;\n\n  /**\n   * date event was created column\n   */\n  @CreateDateColumn()\n  createdAt: Date;\n\n  /**\n   * date event was updated column\n   */\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  /**\n   * event image column\n   */\n  @Column({ type: 'varchar', nullable: true, length: 1024 })\n  image?: string;\n\n  /**\n   * event venue column\n   */\n  @Column({ type: 'varchar', nullable: true, length: 1024 })\n  venue?: string;\n\n  /**\n   * event address column\n   */\n  @Column({ type: 'varchar', nullable: true, length: 1024 })\n  address?: string;\n\n  /**\n   * event virtual link column\n   */\n  @Column({ type: 'varchar', nullable: true, length: 1024 })\n  virtualLink?: string;\n\n  /**\n   * event start date column\n   */\n  @Column({ type: 'timestamp', nullable: false })\n  eventStartDate: Date;\n\n  /**\n   * event start time column\n   */\n  @Column({ type: 'varchar', nullable: false, length: 5 })\n  eventStartTime: string;\n\n  /**\n   * event end time column\n   */\n  @Column({ type: 'varchar', nullable: false, length: 5 })\n  eventEndTime: string;\n\n  /**\n   * event end date column\n   */\n  @Column({ type: 'timestamp', nullable: true })\n  eventEndDate?: Date;\n\n  /**\n   * event and owner relationship\n   */\n  @ManyToOne(() => User, (user) => user.events, { onDelete: 'CASCADE' })\n  owner: User;\n\n  /**\n   * event and tickets relationship\n   */\n  @OneToMany(() => Ticket, (ticket) => ticket.event, { eager: true })\n  tickets: Ticket[];\n\n  // @OneToMany(() => Payment, (payment) => payment.event)\n  // payments: Payment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventsController.html":{"url":"controllers/EventsController.html","title":"controller - EventsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                events\n            \n\n\n            \n                Description\n            \n            \n                controller for events route\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createEvent\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                deleteEvent\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                findAllEvents\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                findEventById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEvent(createEventDto: CreateEventDto, user: ActiveUserData, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'This api endpoint creates a new event'})@ApiResponse({status: 201, description: 'You get a 201 response if your event is created successfully'})@ApiBody({description: 'Create a new event', required: true, type: CreateEventDto, examples: undefined})@ApiHeaders(['undefined', 'undefined', 'undefined'])@ApiConsumes('multipart/form-data')@UseInterceptors(undefined)@Roles(Role.EVENTORGANISER)@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:125\n                        \n                    \n\n\n            \n                \n                        Function for creating events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                newly created event\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteEvent(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It deletes an event'})@ApiResponse({status: 204, description: 'Event deleted successfully'})@ApiParam({name: 'id', type: 'number', required: true, description: 'The unique id of the event', example: 10})@ApiHeaders(['undefined', 'undefined'])@Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:165\n                        \n                    \n\n\n            \n                \n                        route for deleting an event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        findAllEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllEvents(eventQuery: GetEventsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It finds all events '})@ApiResponse({status: 200, description: 'All events are fetched and paginated'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the api to return', example: 1})@Auth(AuthType.None)@Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:198\n                        \n                    \n\n\n            \n                \n                        route for getting all events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventQuery\n                                            \n                                                            GetEventsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                all events\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        findEventById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEventById(eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It finds a event based on its id'})@ApiResponse({status: 200, description: 'Event is fetched successfully based on its id'})@ApiParam({name: 'eventId', required: true, type: String, description: 'The unique identifier of the event', example: '12345'})@ApiHeaders(['undefined', 'undefined'])@Get('/:eventId')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:234\n                        \n                    \n\n\n            \n                \n                        route for getting an event by event id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                a particular event\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Query,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { CreateEventDto } from './dtos/create-event.dto';\nimport { ActiveUser } from 'src/auth/decorator/active-user.decorator';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\nimport {\n  ApiBody,\n  ApiConsumes,\n  ApiHeaders,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { EventsService } from './providers/events.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { GetEventsDto } from './dtos/get-events.dto';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Roles } from '@/auth/decorator/role.decorator';\nimport { Role } from '@/auth/enums/role-type.enum';\n\n/**\n * controller for events route\n */\n@ApiTags('Events')\n@Controller('events')\nexport class EventsController {\n  constructor(\n    /**\n     * injecting the event service\n     */\n    private readonly eventsService: EventsService,\n  ) {}\n\n  /**\n   * Function for creating events\n   * @param createEventDto\n   * @param user\n   * @returns newly created event\n   */\n  @ApiOperation({\n    summary: 'This api endpoint creates a new event',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your event is created successfully',\n  })\n  @ApiBody({\n    description: 'Create a new event',\n    required: true,\n    type: CreateEventDto,\n    examples: {\n      example1: {\n        summary: 'Valid request example',\n        value: {\n          name: 'Burna show',\n          category: 'music',\n          description: 'This is starboys show',\n          venue: 'Eko Hotel',\n          address: 'Lagos Island',\n          image: 'https:aws-image.png',\n          eventStartDateAndTime: 'Oct 14, 2024',\n          tickets: [\n            {\n              type: 'general',\n              price: 3000,\n              summary: 'This is the general ticket',\n            },\n          ],\n        },\n      },\n      example2: {\n        summary: 'Invalid request example (missing name)',\n        value: {\n          category: 'music',\n          description: 'This is starboys show',\n          venue: 'Eko Hotel',\n          address: 'Lagos Island',\n          image: 'https:aws-image.png',\n          eventStartDateAndTime: 'Oct 14, 2024',\n          tickets: [\n            {\n              type: 'general',\n              price: 3000,\n              summary: 'This is the general ticket',\n            },\n          ],\n        },\n      },\n    },\n  })\n  @ApiHeaders([\n    {\n      name: 'Authorization',\n      required: true,\n      description: 'Bearer token for authorization',\n    },\n    {\n      name: 'X-Custom-Header',\n      required: false,\n      description: 'A custom optional header',\n    },\n    {\n      name: 'Content-Type',\n      description: 'Must be multipart/form-data',\n      example: 'multipart/form-data',\n    },\n  ])\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(FileInterceptor('file'))\n  @Roles(Role.EVENTORGANISER)\n  @Post('')\n  public createEvent(\n    @Body() createEventDto: CreateEventDto,\n    @ActiveUser() user: ActiveUserData,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.eventsService.createEvent(createEventDto, user, file);\n  }\n\n  /**\n   * route for deleting an event\n   * @param id\n   *\n   */\n  @ApiOperation({\n    summary: 'It deletes an event',\n  })\n  @ApiResponse({\n    status: 204,\n    description: 'Event deleted successfully',\n  })\n  @ApiParam({\n    name: 'id',\n    type: 'number',\n    required: true,\n    description: 'The unique id of the event',\n    example: 10,\n  })\n  @ApiHeaders([\n    {\n      name: 'Authorization',\n      required: true,\n      description: 'Bearer token for authorization',\n    },\n    {\n      name: 'X-Custom-Header',\n      required: false,\n      description: 'A custom optional header',\n    },\n  ])\n  @Delete('/:id')\n  public deleteEvent(@Param('id', ParseIntPipe) id: number) {\n    return this.eventsService.deleteEvent(id);\n  }\n\n  /**\n   * route for getting all events\n   * @param eventQuery\n   * @returns all events\n   */\n  @ApiOperation({\n    summary: 'It finds all events ',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All events are fetched and paginated',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the api to return',\n    example: 1,\n  })\n  @Auth(AuthType.None)\n  @Get('')\n  public findAllEvents(@Query() eventQuery: GetEventsDto) {\n    return this.eventsService.findAll(eventQuery);\n  }\n\n  /**\n   * route for getting an event by event id\n   * @param eventId\n   * @returns a particular event\n   */\n  @ApiOperation({\n    summary: 'It finds a event based on its id',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Event is fetched successfully based on its id',\n  })\n  @ApiParam({\n    name: 'eventId',\n    required: true,\n    type: String,\n    description: 'The unique identifier of the event',\n    example: '12345',\n  })\n  @ApiHeaders([\n    {\n      name: 'Authorization',\n      required: true,\n      description: 'Bearer token for authorization',\n    },\n    {\n      name: 'X-Custom-Header',\n      required: false,\n      description: 'A custom optional header',\n    },\n  ])\n  @Get('/:eventId')\n  public findEventById(@Param('eventId') eventId: string) {\n    return this.eventsService.findEventById(eventId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_imports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nEventsModule\n\nEventsModule\n\nEventsModule -->\n\nPaginationModule->EventsModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nEventsModule -->\n\nUploadsModule->EventsModule\n\n\n\n\n\nEventsService \n\nEventsService \n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\n\n\nGetUserEventsProvider \n\nGetUserEventsProvider \n\nGetUserEventsProvider  -->\n\nEventsModule->GetUserEventsProvider \n\n\n\n\n\nCreateEventProvider\n\nCreateEventProvider\n\nEventsModule -->\n\nCreateEventProvider->EventsModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nGetUserEventsProvider\n\nGetUserEventsProvider\n\nEventsModule -->\n\nGetUserEventsProvider->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/events/events.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateEventProvider\n                        \n                        \n                            EventsService\n                        \n                        \n                            GetUserEventsProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            UploadsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventsService\n                        \n                        \n                            GetUserEventsProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Event } from './event.entity';\nimport { EventsService } from './providers/events.service';\nimport { CreateEventProvider } from './providers/create-event.provider';\nimport { EventsController } from './events.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { UploadsModule } from 'src/uploads/uploads.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { GetUserEventsProvider } from './providers/get-user-events.provider';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Event]),\n    forwardRef(() => UsersModule),\n    UploadsModule,\n    PaginationModule,\n  ],\n  providers: [EventsService, CreateEventProvider, GetUserEventsProvider],\n  controllers: [EventsController],\n  exports: [GetUserEventsProvider, EventsService],\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventsService.html":{"url":"injectables/EventsService.html","title":"injectable - EventsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/providers/events.service.ts\n        \n\n\n            \n                Description\n            \n            \n                service provider for the event module\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createEvent\n                            \n                            \n                                    Public\n                                    Async\n                                deleteEvent\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findEventById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createEventsProvider: CreateEventProvider, eventsRepository: Repository, paginationprovider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/events/providers/events.service.ts:21\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createEventsProvider\n                                                  \n                                                        \n                                                                        CreateEventProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationprovider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEvent(createEventDto: CreateEventDto, user: ActiveUserData, file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/providers/events.service.ts:53\n                        \n                    \n\n\n            \n                \n                        function for creating events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the created event\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteEvent(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/providers/events.service.ts:70\n                        \n                    \n\n\n            \n                \n                        function for deleting events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                message on whether delete was successful\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(eventQuery: GetEventsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/providers/events.service.ts:87\n                        \n                    \n\n\n            \n                \n                        function for getting all events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventQuery\n                                            \n                                                            GetEventsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                all events\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findEventById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEventById(eventId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/providers/events.service.ts:200\n                        \n                    \n\n\n            \n                \n                        function to get event by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                event by id\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateEventProvider } from './create-event.provider';\nimport { CreateEventDto } from '../dtos/create-event.dto';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\nimport { In, Repository, Between } from 'typeorm';\nimport { Event } from '../event.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetEventsDto } from '../dtos/get-events.dto';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { getDateRanges } from '@root/utils/getDateRanges';\n\n/**\n * service provider for the event module\n */\n@Injectable()\nexport class EventsService {\n  /**\n   * constructor\n   * @param createEventsProvider\n   * @param eventsRepository\n   * @param paginationprovider\n   */\n  constructor(\n    /**\n     * injecting the create event provider\n     */\n    private readonly createEventsProvider: CreateEventProvider,\n\n    /**\n     * injecting the events repository\n     */\n    @InjectRepository(Event)\n    private readonly eventsRepository: Repository,\n\n    /**\n     * injecting the pagination provider\n     */\n    private readonly paginationprovider: PaginationProvider,\n  ) {}\n\n  /**\n   * function for creating events\n   * @param createEventDto\n   * @param user\n   * @param file\n   * @returns the created event\n   */\n  public async createEvent(\n    createEventDto: CreateEventDto,\n    user: ActiveUserData,\n    file: Express.Multer.File,\n  ) {\n    return await this.createEventsProvider.createEvent(\n      createEventDto,\n      user,\n      file,\n    );\n  }\n\n  /**\n   * function for deleting events\n   * @param id\n   * @returns message on whether delete was successful\n   */\n  public async deleteEvent(id: number) {\n    try {\n      await this.eventsRepository.delete(id);\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n\n    return {\n      message: 'Event deleted successfully',\n    };\n  }\n\n  /**\n   * function for getting all events\n   * @param eventQuery\n   * @returns all events\n   */\n  public async findAll(eventQuery: GetEventsDto): Promise> {\n    const { limit, page } = eventQuery;\n\n    let whereOptions = [];\n\n    const {\n      todayStart,\n      todayEnd,\n      tomorrowStart,\n      tomorrowEnd,\n      weekendStart,\n      weekendEnd,\n      next7DaysStart,\n      next7DaysEnd,\n      next30DaysStart,\n      next30DaysEnd,\n    }: any = getDateRanges();\n\n    const dateMaps = {\n      today: Between(todayStart, todayEnd),\n      tomorrow: Between(tomorrowStart, tomorrowEnd),\n      thisweekend: Between(weekendStart, weekendEnd),\n      next7days: Between(next7DaysStart, next7DaysEnd),\n      next30days: Between(next30DaysStart, next30DaysEnd),\n    };\n\n    Object.keys(eventQuery).forEach((key) => {\n      if (key === 'limit' || key === 'page' || !eventQuery[key]) {\n        return;\n      }\n\n      if (key === 'date') {\n        const dateQueries = eventQuery['date'].split(',');\n\n        whereOptions = dateQueries.map((item: string) => {\n          return {\n            eventStartDate: dateMaps[item],\n          };\n        });\n      }\n\n      if (whereOptions.length === 0) {\n        whereOptions = [\n          {\n            category: eventQuery['category']\n              ? In(eventQuery['category'].slice().split(','))\n              : null,\n            priceType: eventQuery['price']\n              ? In(eventQuery['price'].slice().split(','))\n              : null,\n            attendanceMode: eventQuery['attendance']\n              ? In(eventQuery['attendance'].slice().split(','))\n              : null,\n            name: eventQuery['name']\n              ? eventQuery['name'].slice().split('-').join(' ')\n              : null,\n          },\n        ];\n      } else {\n        whereOptions = whereOptions.map((item) => ({\n          ...item,\n          category: eventQuery['category']\n            ? In(eventQuery['category'].slice().split(','))\n            : null,\n          priceType: eventQuery['price']\n            ? In(eventQuery['price'].slice().split(','))\n            : null,\n          attendanceMode: eventQuery['attendance']\n            ? In(eventQuery['attendance'].slice().split(','))\n            : null,\n          name: eventQuery['name']\n            ? eventQuery['name'].slice().split('-').join(' ')\n            : null,\n        }));\n      }\n    });\n\n    const checkWhereOptions = Object.keys(whereOptions).length;\n\n    const options = {\n      relations: ['owner'],\n      select: {\n        owner: {\n          firstName: true,\n          lastName: true,\n          email: true,\n        },\n      },\n      where: checkWhereOptions ? whereOptions : null,\n    };\n\n    try {\n      const events = await this.paginationprovider.paginationQuery(\n        {\n          limit: limit,\n          page: page,\n        },\n        this.eventsRepository,\n        options,\n      );\n\n      return events;\n    } catch (error) {\n      throw new NotFoundException(error);\n    }\n    return;\n  }\n\n  /**\n   * function to get event by id\n   * @param eventId\n   * @returns event by id\n   */\n  public async findEventById(eventId: string): Promise {\n    try {\n      const event = await this.eventsRepository.findOneBy({\n        id: +eventId,\n      });\n\n      if (!event) {\n        throw new NotFoundException(`Event with ${eventId}  not found`);\n      }\n\n      return event;\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByIdProvider.html":{"url":"injectables/FindOneByIdProvider.html","title":"injectable - FindOneByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-id.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider class for finding one user by id\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-id.provider.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-id.provider.ts:32\n                        \n                    \n\n\n            \n                \n                        function for finding user based on id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n/**\n * provider class for finding one user by id\n */\n@Injectable()\nexport class FindOneByIdProvider {\n  /**\n   * constructor\n   * @param usersRepository\n   */\n  constructor(\n    /**\n     * injecting user repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  /**\n   * function for finding user based on id\n   * @param id\n   * @returns user\n   */\n  public async findById(id: number) {\n    let user;\n    try {\n      user = await this.usersRepository.findOneBy({\n        id,\n      });\n    } catch (err: any) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    /**\n     * Handle the user does not exist\n     */\n    if (!user) {\n      throw new BadRequestException('The user does not exist');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for finding user based on email\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:32\n                        \n                    \n\n\n            \n                \n                        function for finding user based on email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n/**\n * provider for finding user based on email\n */\n@Injectable()\nexport class FindOneUserByEmailProvider {\n  /**\n   * constructor\n   * @param usersRepository\n   */\n  constructor(\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  /**\n   * function for finding user based on email\n   * @param email\n   * @returns user\n   */\n  public async findOneByEmail(email: string) {\n    let user: User | undefined = undefined;\n\n    try {\n      user = await this.usersRepository.findOne({\n        where: { email: email },\n        select: [\n          'id',\n          'password',\n          'email',\n          'role',\n          'accountType',\n          'firstName',\n          'lastName',\n        ],\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Could not fetch the user',\n      });\n    }\n\n    if (!user) {\n      throw new UnauthorizedException('User does not exist');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindUserByResetOtpAndExpiryTimeProvider.html":{"url":"injectables/FindUserByResetOtpAndExpiryTimeProvider.html","title":"injectable - FindUserByResetOtpAndExpiryTimeProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindUserByResetOtpAndExpiryTimeProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-user-by-reset-otp-and-expiry-time.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider class for finding user based on stored reset token and expiry time\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findUserByResetOtpAndExpiryTime\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-user-by-reset-otp-and-expiry-time.provider.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByResetOtpAndExpiryTime\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByResetOtpAndExpiryTime(otp: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-user-by-reset-otp-and-expiry-time.provider.ts:32\n                        \n                    \n\n\n            \n                \n                        function for finding a user based on the stored reset token and expiry time\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { MoreThan, Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n/**\n * provider class for finding user based on stored reset token and expiry time\n */\n@Injectable()\nexport class FindUserByResetOtpAndExpiryTimeProvider {\n  /**\n   * constructor\n   * @param usersRepository\n   */\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  /**\n   * function for finding a user based on the stored reset token and expiry time\n   * @param otp\n   * @returns user\n   */\n  public async findUserByResetOtpAndExpiryTime(otp: string) {\n    let user;\n\n    try {\n      user = await this.usersRepository.find({\n        where: {\n          resetOtp: otp,\n          resetOtpExpire: MoreThan(new Date()),\n        },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Could not fetch the user',\n      });\n    }\n\n    if (!user[0]) {\n      throw new UnauthorizedException('Otp is no longer valid');\n    }\n\n    return user[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPassswordDto.html":{"url":"classes/ForgotPassswordDto.html","title":"class - ForgotPassswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPassswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/forgot-password.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for forgot password\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the email of the user', example: 'Favour@gmail.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/forgot-password.dto.ts:17\n                        \n                    \n\n            \n                \n                    email address\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty } from 'class-validator';\n\n/**\n * dto for forgot password\n */\nexport class ForgotPassswordDto {\n  /**\n   * email address\n   */\n  @ApiProperty({\n    description: 'This is the email of the user',\n    example: 'Favour@gmail.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ForgotPasswordProvider.html":{"url":"injectables/ForgotPasswordProvider.html","title":"injectable - ForgotPasswordProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ForgotPasswordProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/forgot-password.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for forgot password\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                forgotPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/forgot-password.provider.ts:18\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(forgotPasswordDto: ForgotPassswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/forgot-password.provider.ts:48\n                        \n                    \n\n\n            \n                \n                        function for sending otp email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                forgotPasswordDto\n                                            \n                                                            ForgotPassswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a message whether the email for otp was sent\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { ForgotPassswordDto } from '../dtos/forgot-password.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { randomInt } from 'crypto';\nimport { HashingProvider } from './hashing.provider';\nimport { MailService } from 'src/mail/providers/mail.service';\nimport * as crypto from 'crypto';\n\n/**\n * provider for forgot password\n */\n@Injectable()\nexport class ForgotPasswordProvider {\n  /**\n   * constructor\n   * @param usersService\n   * @param hashingProvider\n   * @param mailService\n   */\n  constructor(\n    /**\n     * injecting the users service\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * injecting the hashProvider\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * injecting the mail service\n     */\n    private readonly mailService: MailService,\n  ) {}\n\n  /**\n   * function for sending otp email\n   * @param forgotPasswordDto\n   * @returns a message whether the email for otp was sent\n   */\n  public async forgotPassword(forgotPasswordDto: ForgotPassswordDto) {\n    // get the email and check whether the user exists\n    const user = await this.usersService.findOneByEmail(\n      forgotPasswordDto.email,\n    );\n\n    // if user exist the generate the reset token\n    // Generate a random integer between 1000 and 9999\n    const resetOtp = randomInt(1000, 10000);\n\n    const hashedOtp = crypto\n      .createHash('sha256')\n      .update(resetOtp.toString())\n      .digest('hex');\n\n    // store in the db\n    await this.usersService.storeTokenOtpAndOtpExpire(user, hashedOtp);\n\n    // send to the user email\n    try {\n      await this.mailService.sendResetOtp(user, resetOtp.toString());\n    } catch (error) {\n      console.log(error);\n      throw new RequestTimeoutException(error);\n    }\n    return {\n      message: 'Token sent to email successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTicketPdfProvider.html":{"url":"injectables/GenerateTicketPdfProvider.html","title":"injectable - GenerateTicketPdfProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTicketPdfProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/providers/generate-ticket-pdf.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                generate ticket provider class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                generateQRCode\n                            \n                            \n                                    Public\n                                    Async\n                                generateTicketPDF\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateQRCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateQRCode(ticketId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tickets/providers/generate-ticket-pdf.provider.ts:176\n                        \n                    \n\n\n            \n                \n                        function for generating QR code for the ticket\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ticketId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                qrcode\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTicketPDF\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTicketPDF(ticketData: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tickets/providers/generate-ticket-pdf.provider.ts:18\n                        \n                    \n\n\n            \n                \n                        Generates a PDF ticket with a barcode\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ticketData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PDFDocument, rgb } from 'pdf-lib';\nimport * as QRCode from 'qrcode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as fontkit from '@pdf-lib/fontkit';\nimport modifyNum from 'utils/modifyAmount';\nimport { ROOT_PATH } from 'src/config/paths.config';\n\n/**\n * generate ticket provider class\n */\n@Injectable()\nexport class GenerateTicketPdfProvider {\n  /**\n   * Generates a PDF ticket with a barcode\n   */\n  public async generateTicketPDF(ticketData: {\n    id: string;\n    type: string;\n    eventName: string;\n    amount: number;\n  }) {\n    const { id, type, eventName, amount } = ticketData;\n\n    const pdfDoc = await PDFDocument.create();\n\n    // Register fontkit\n    pdfDoc.registerFontkit(fontkit);\n\n    const page = pdfDoc.addPage([600, 800]);\n\n    // Load the custom font (OpenSans-Regular.ttf)\n    const fontPath = path.join(\n      ROOT_PATH,\n      '/assets/fonts/OpenSans-VariableFont_wdth,wght.ttf',\n    );\n    const fontBytes = fs.readFileSync(fontPath);\n    const customFont = await pdfDoc.embedFont(fontBytes);\n\n    page.setFont(customFont);\n    // Colors\n    const primaryColor = rgb(0.5137, 0.2588, 1.0);\n    const secondaryColor = rgb(0.2, 0.2, 0.2);\n    // const accentColor = rgb(0.8, 0.3, 0.1);\n\n    // Draw background and border\n    page.drawRectangle({\n      x: 50,\n      y: 150,\n      width: 500,\n      height: 500,\n      borderColor: primaryColor,\n      borderWidth: 2,\n      color: rgb(0.95, 0.95, 0.95),\n    });\n\n    // Draw header strip\n    page.drawRectangle({\n      x: 50,\n      y: 600,\n      width: 500,\n      height: 50,\n      color: primaryColor,\n    });\n\n    // Draw title\n    page.drawText(`${eventName} Ticket`.toLocaleUpperCase(), {\n      x: 100,\n      y: 615,\n      size: 25,\n      color: rgb(1, 1, 1),\n    });\n\n    // Event Details Section\n    const startY = 550;\n    const labelX = 80;\n    const valueX = 200;\n    const lineSpacing = 40;\n\n    // Labels\n    page.drawText('Event:', {\n      x: labelX,\n      y: startY,\n      size: 16,\n      color: secondaryColor,\n    });\n\n    page.drawText('Type:', {\n      x: labelX,\n      y: startY - lineSpacing,\n      size: 16,\n      color: secondaryColor,\n    });\n\n    page.drawText('Amount:', {\n      x: labelX,\n      y: startY - lineSpacing * 2,\n      size: 16,\n      color: secondaryColor,\n    });\n\n    page.drawText('Ticket ID:', {\n      x: labelX,\n      y: startY - lineSpacing * 3,\n      size: 16,\n      color: secondaryColor,\n    });\n\n    // Values\n    page.drawText(eventName, {\n      x: valueX,\n      y: startY,\n      size: 16,\n      color: primaryColor,\n    });\n\n    page.drawText(type, {\n      x: valueX,\n      y: startY - lineSpacing,\n      size: 16,\n      color: primaryColor,\n    });\n\n    page.drawText(`N ${modifyNum(String(amount))}`, {\n      x: valueX,\n      y: startY - lineSpacing * 2,\n      size: 16,\n      color: primaryColor,\n    });\n\n    page.drawText(id, {\n      x: valueX,\n      y: startY - lineSpacing * 3,\n      size: 16,\n      color: primaryColor,\n    });\n\n    // Add dotted line separator\n    const dots = '• '.repeat(40);\n    page.drawText(dots, {\n      x: 70,\n      y: 380,\n      size: 10,\n      color: rgb(0.7, 0.7, 0.7),\n    });\n\n    // QR Code\n    const qrCodeImage = await this.generateQRCode(id);\n    const qrCodeImageEmbed = await pdfDoc.embedPng(qrCodeImage);\n    page.drawImage(qrCodeImageEmbed, {\n      x: 200,\n      y: 180,\n      width: 150,\n      height: 150,\n    });\n\n    // Footer\n    const currentDate = new Date().toLocaleDateString();\n    page.drawText(`Generated on ${currentDate}`, {\n      x: 70,\n      y: 170,\n      size: 12,\n      color: rgb(0.5, 0.5, 0.5),\n    });\n\n    const pdfBytes = await pdfDoc.save();\n    return pdfBytes;\n  }\n\n  /**\n   * function for generating QR code for the ticket\n   * @param ticketId\n   * @returns qrcode\n   */\n  private async generateQRCode(ticketId: string): Promise {\n    return new Promise((resolve, reject) => {\n      QRCode.toBuffer(\n        `http://localhost:3000/api/v1/tickets?${ticketId}`,\n        { type: 'png' },\n        (err, buffer) => {\n          if (err) reject(err);\n          else resolve(buffer);\n        },\n      );\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for generating tokens\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:12\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:58\n                        \n                    \n\n\n            \n                \n                        function for generating tokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:38\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        function for using jwt to sign the user info\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the object containing payload when a user signs in\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\nimport { User } from 'src/users/user.entity';\n\n/**\n * provider for generating tokens\n */\n@Injectable()\nexport class GenerateTokensProvider {\n  /**\n   * constructor\n   * @param jwtService\n   * @param jwtConfiguration\n   */\n  constructor(\n    /**\n     * Injecting the jwt service\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Injecting the jwt config\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * function for using jwt to sign the user info\n   * @param userId\n   * @param expiresIn\n   * @param payload\n   * @returns the object containing payload when a user signs in\n   */\n  public async signToken(userId: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n\n  /**\n   * function for generating tokens\n   * @param user\n   * @returns access and refresh tokens\n   */\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      // Generate the access token\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        {\n          email: user.email,\n          role: user.role,\n        },\n      ),\n      // Generate the refresh token\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetEventsBaseDto.html":{"url":"classes/GetEventsBaseDto.html","title":"class - GetEventsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetEventsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dtos/get-events.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                base dto fot events\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                attendance\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                date\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        attendance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/get-events.dto.ts:56\n                        \n                    \n\n            \n                \n                    event attendance mode\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/get-events.dto.ts:35\n                        \n                    \n\n            \n                \n                    event category\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/get-events.dto.ts:42\n                        \n                    \n\n            \n                \n                    event category\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/get-events.dto.ts:21\n                        \n                    \n\n            \n                \n                    end date\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/get-events.dto.ts:28\n                        \n                    \n\n            \n                \n                    event name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/get-events.dto.ts:49\n                        \n                    \n\n            \n                \n                    event price type\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dtos/get-events.dto.ts:14\n                        \n                    \n\n            \n                \n                    start date\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional, IsString } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * base dto fot events\n */\nclass GetEventsBaseDto {\n  /**\n   * start date\n   */\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  /**\n   * end date\n   */\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n\n  /**\n   * event name\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * event category\n   */\n  @IsString()\n  @IsOptional()\n  category?: string;\n\n  /**\n   * event category\n   */\n  @IsString()\n  @IsOptional()\n  date?: string;\n\n  /**\n   * event price type\n   */\n  @IsString()\n  @IsOptional()\n  price?: string;\n\n  /**\n   * event attendance mode\n   */\n  @IsString()\n  @IsOptional()\n  attendance?: string;\n}\n\n/**\n * dto for get events\n */\nexport class GetEventsDto extends IntersectionType(\n  GetEventsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetEventsDto.html":{"url":"classes/GetEventsDto.html","title":"class - GetEventsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetEventsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dtos/get-events.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for get events\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetEventsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional, IsString } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * base dto fot events\n */\nclass GetEventsBaseDto {\n  /**\n   * start date\n   */\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  /**\n   * end date\n   */\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n\n  /**\n   * event name\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * event category\n   */\n  @IsString()\n  @IsOptional()\n  category?: string;\n\n  /**\n   * event category\n   */\n  @IsString()\n  @IsOptional()\n  date?: string;\n\n  /**\n   * event price type\n   */\n  @IsString()\n  @IsOptional()\n  price?: string;\n\n  /**\n   * event attendance mode\n   */\n  @IsString()\n  @IsOptional()\n  attendance?: string;\n}\n\n/**\n * dto for get events\n */\nexport class GetEventsDto extends IntersectionType(\n  GetEventsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetUserEventsProvider.html":{"url":"injectables/GetUserEventsProvider.html","title":"injectable - GetUserEventsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetUserEventsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/providers/get-user-events.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider class for the the get user events\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getUserEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventsRepository: Repository, paginationProvider: PaginationProvider, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/events/providers/get-user-events.provider.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getUserEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserEvents(userId: string, eventQuery: GetEventsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/providers/get-user-events.provider.ts:45\n                        \n                    \n\n\n            \n                \n                        function for getting events from a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                eventQuery\n                                            \n                                                            GetEventsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                events created by  a user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Event } from '../event.entity';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { GetEventsDto } from '../dtos/get-events.dto';\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * provider class for the the get user events\n */\n@Injectable()\nexport class GetUserEventsProvider {\n  /**\n   * constructor\n   * @param eventsRepository\n   * @param paginationProvider\n   * @param usersService\n   */\n  constructor(\n    /**\n     * injecting the events repository\n     */\n    @InjectRepository(Event)\n    private readonly eventsRepository: Repository,\n\n    /**\n     * injecting the paginationation provider\n     */\n    private readonly paginationProvider: PaginationProvider,\n\n    /**\n     * injecting the users service\n     */\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * function for getting events from a user\n   * @param userId\n   * @param eventQuery\n   * @returns events created by  a user\n   */\n  public async getUserEvents(\n    userId: string,\n    eventQuery: GetEventsDto,\n  ): Promise> {\n    await this.usersService.findOneById(+userId);\n\n    const options = {\n      where: {\n        owner: {\n          id: userId,\n        },\n      },\n    };\n\n    try {\n      const events = await this.paginationProvider.paginationQuery(\n        {\n          limit: eventQuery.limit,\n          page: eventQuery.page,\n        },\n        this.eventsRepository,\n        options,\n      );\n\n      return events;\n    } catch (error) {\n      console.log(error);\n      throw new RequestTimeoutException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersBaseDto.html":{"url":"classes/GetUsersBaseDto.html","title":"class - GetUsersBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto class for get user base\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user.dto.ts:21\n                        \n                    \n\n            \n                \n                    end date\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user.dto.ts:14\n                        \n                    \n\n            \n                \n                    start date\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { IsDate, IsOptional } from 'class-validator';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * dto class for get user base\n */\nexport class GetUsersBaseDto {\n  /**\n   * start date\n   */\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  /**\n   * end date\n   */\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\n/**\n * dto class for get user\n */\nexport class GetUsersDto extends IntersectionType(\n  GetUsersBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersDto.html":{"url":"classes/GetUsersDto.html","title":"class - GetUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto class for get user\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetUsersBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { IsDate, IsOptional } from 'class-validator';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * dto class for get user base\n */\nexport class GetUsersBaseDto {\n  /**\n   * start date\n   */\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  /**\n   * end date\n   */\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\n/**\n * dto class for get user\n */\nexport class GetUsersDto extends IntersectionType(\n  GetUsersBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                abstract class for the hashing provider\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        abstract for comparing passwords\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:12\n                        \n                    \n\n\n            \n                \n                        abstract for hashing passwords\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * abstract class for the hashing provider\n */\n@Injectable()\nexport abstract class HashingProvider {\n  /**\n   * abstract for hashing passwords\n   * @param data\n   */\n  abstract hashPassword(data: string | Buffer): Promise;\n\n  /**\n   * abstract for comparing passwords\n   * @param data\n   * @param encrypted\n   */\n  abstract comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailService } from './providers/mail.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'path';\nimport { EjsAdapter } from '@nestjs-modules/mailer/dist/adapters/ejs.adapter';\n\n// makes importation of mail module to any module\n@Global()\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      // we need the config service to configure the mailer module\n      inject: [ConfigService],\n      // we use the useFactory to inject the mailer module\n      useFactory: async (config: ConfigService) => {\n        // console.log(\n        //   config.get('appConfig.mailHost'),\n        //   config.get('appConfig.smtpUsername'),\n        //   config.get('appConfig.smtpPassword'),\n        // );\n        return {\n          transport: {\n            host: config.get('appConfig.mailHost'),\n            secure: true,\n            port: 465,\n            auth: {\n              user: config.get('appConfig.smtpUsername'),\n              pass: config.get('appConfig.smtpPassword'),\n            },\n            // tls: { rejectUnauthorized: false },\n          },\n          default: {\n            from: `TicketHive `,\n          },\n          template: {\n            dir: join(__dirname, 'templates'),\n            adapter: new EjsAdapter({\n              inlineCssEnabled: true,\n            }),\n            options: {\n              strict: false,\n            },\n          },\n        };\n      },\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.service.ts\n        \n\n\n            \n                Description\n            \n            \n                service for the mail module\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendResetOtp\n                            \n                            \n                                    Public\n                                    Async\n                                sendSubscriberMail\n                            \n                            \n                                    Public\n                                    Async\n                                sendTicketBuyerMail\n                            \n                            \n                                    Public\n                                    Async\n                                sendUserWelcome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.service.ts:13\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendResetOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendResetOtp(user: User, otp: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:48\n                        \n                    \n\n\n            \n                \n                        function for sending reset otp mail to user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendSubscriberMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendSubscriberMail(subscriber: Subscriber)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:66\n                        \n                    \n\n\n            \n                \n                        function for sending mail to user when they subscribe to the newsletter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                subscriber\n                                            \n                                                            Subscriber\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendTicketBuyerMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendTicketBuyerMail(user: User, totalAmount: any, eventName: string, tickets: any, urls: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:85\n                        \n                    \n\n\n            \n                \n                        function for sending mail to ticket buyer\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                totalAmount\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                eventName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tickets\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                urls\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendUserWelcome\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendUserWelcome(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:29\n                        \n                    \n\n\n            \n                \n                        function for sending mail to user when they sign in\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ROOT_PATH } from '@/config/paths.config';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport * as path from 'path';\nimport { Subscriber } from 'src/subscribers/subscriber.entity';\nimport { User } from 'src/users/user.entity';\nimport modifyNum from 'utils/modifyAmount';\n\n/**\n * service for the mail module\n */\n@Injectable()\nexport class MailService {\n  /**\n   * constructor\n   * @param mailerService\n   */\n  constructor(\n    /**\n     * injecting mailer service\n     */\n    private mailerService: MailerService,\n  ) {}\n\n  /**\n   * function for sending mail to user when they sign in\n   * @param user\n   */\n  public async sendUserWelcome(user: User): Promise {\n    await this.mailerService.sendMail({\n      to: user.email,\n      from: `Ticket Hive - Onboarding Team  `,\n      subject: `🎉 Welcome to Ticket Hive – Your Gateway to Amazing Events!`,\n      template: path.join(ROOT_PATH, '/src/mail/templates/welcome.ejs'),\n      context: {\n        name: user.firstName,\n        email: user.email,\n        loginUrl: 'http://localhost:3001',\n      },\n    });\n  }\n\n  /**\n   * function for sending reset otp mail to user\n   * @param user\n   * @param otp\n   */\n  public async sendResetOtp(user: User, otp: string): Promise {\n    await this.mailerService.sendMail({\n      to: user.email,\n      from: `Ticket Hive - Support Team  `,\n      subject: `🔐 Reset Your Password – Let's Get You Back on Track!`,\n      template: path.join(ROOT_PATH, '/src/mail/templates/resetOtp.ejs'),\n      context: {\n        name: user.firstName,\n        email: user.email,\n        otp: otp,\n      },\n    });\n  }\n\n  /**\n   * function for sending mail to user when they subscribe to the newsletter\n   * @param subscriber\n   */\n  public async sendSubscriberMail(subscriber: Subscriber): Promise {\n    await this.mailerService.sendMail({\n      to: subscriber.email,\n      from: `Ticket Hive -Team  `,\n      subject: `Welcome to Ticket Hive's Newsletter! 🎉`,\n      template: path.join(ROOT_PATH, '/src/mail/templates/subscription.ejs'),\n      context: {\n        email: subscriber.email,\n        id: subscriber.id,\n      },\n    });\n  }\n\n  /**\n   * function for sending mail to ticket buyer\n   * @param user\n   * @param ticket\n   * @param eventName\n   */\n  public async sendTicketBuyerMail(\n    user: User,\n    totalAmount: any,\n    eventName: string,\n    tickets: any,\n    urls: string[],\n  ): Promise {\n    await this.mailerService.sendMail({\n      to: user.email,\n      from: `Ticket Hive -Team  `,\n      subject: `🎟️ Your Ticket Purchase Confirmation – Ticket Hive`,\n      template: path.join(ROOT_PATH, '/src/mail/templates/ticketBought.ejs'),\n      context: {\n        firstName: user.firstName,\n        event: eventName,\n        amount: modifyNum(String(totalAmount)),\n        dateOfPurchase: new Date().toLocaleDateString(),\n        ticketUrls: urls,\n        tickets: tickets,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface for the response on paginated queries\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the data to be returned\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    various links for the pages of the data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the metadata for the data\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  /**\n   * the data to be returned\n   */\n  data: T[];\n\n  /**\n   * the metadata for the data\n   */\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n\n  /**\n   * various links for the pages of the data\n   */\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for pagination\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginationQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginationQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginationQuery(paginationQuery: PaginationQueryDto, repository: Repository, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:34\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        function for paginating find all queries\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                data, metadata and links for the findAll queries\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\n\n// inorder to inject a request to a provider\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n/**\n * provider for pagination\n */\n@Injectable()\nexport class PaginationProvider {\n  /**\n   * constructor\n   * @param request\n   */\n  constructor(\n    /**\n     * Injecting request\n     */\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  /**\n   * function for paginating find all queries\n   * @param paginationQuery\n   * @param repository\n   * @param options\n   * @returns data, metadata and links for the findAll queries\n   */\n  public async paginationQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n    options?: any,\n  ): Promise> {\n    const results = await repository.find({\n      // no of posts to skip in one query\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      // the no of posts to take in one query\n      take: paginationQuery.limit,\n      relations: options.relations,\n      select: options.select,\n      where: options.where,\n    });\n\n    /**\n     * Create the request URLS\n     */\n    const baseURL =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseURL);\n\n    // console.log(newUrl);\n\n    const totalItems = await repository.count();\n    const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n    const nextPage =\n      paginationQuery.page === totalPages\n        ? paginationQuery.page\n        : paginationQuery.page + 1;\n    const prevPage =\n      paginationQuery.page === 1\n        ? paginationQuery.page\n        : paginationQuery.page - 1;\n\n    const finalResponse: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPage: paginationQuery.limit,\n        totalItems: totalItems,\n        currentPage: paginationQuery.page,\n        totalPages: totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=1`,\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${totalPages}`,\n        current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${paginationQuery.page}`,\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${nextPage}`,\n        previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${prevPage}`,\n      },\n    };\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for the pagination query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:13\n                        \n                    \n\n            \n                \n                    limit for the number of items in the get all requests\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:20\n                        \n                    \n\n            \n                \n                    page number for the get all requests\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\n/**\n * dto for the pagination query\n */\nexport class PaginationQueryDto {\n  /**\n   * limit for the number of items in the get all requests\n   */\n  @IsOptional()\n  @IsPositive()\n  limit?: number = 20;\n\n  /**\n   * page number for the get all requests\n   */\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchTicketDto.html":{"url":"classes/PatchTicketDto.html","title":"class - PatchTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dtos/patch-ticket.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto class for patch ticket\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateTicketDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the ticket that is bought', example: 77})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/dtos/patch-ticket.dto.ts:18\n                        \n                    \n\n            \n                \n                    ticket id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreateTicketDto } from './create-tickets.dto';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\n/**\n * dto class for patch ticket\n */\nexport class PatchTicketDto extends PartialType(CreateTicketDto) {\n  /**\n   * ticket id\n   */\n  @ApiProperty({\n    description: 'The ID of the ticket that is bought',\n    example: 77,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Payment.html":{"url":"entities/Payment.html","title":"entity - Payment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Payment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payments/payment.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                payment entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                    Optional\n                                authorizationUrl\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                eventId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                provider\n                            \n                            \n                                    \n                                providerReference\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                tickets\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payments/payment.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorizationUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payments/payment.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payments/payment.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payments/payment.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payments/payment.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payments/payment.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        providerReference\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payments/payment.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         paymentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: paymentStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payments/payment.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tickets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ticket[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'payment_tickets', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payments/payment.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payments/payment.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payments/payment.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { paymentStatus } from './enums/paymentStatus.enum';\nimport { Ticket } from '@/tickets/ticket.entity';\n\n/**\n * payment entity\n */\n@Entity()\nexport class Payment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'enum',\n    enum: paymentStatus,\n    default: paymentStatus.PENDING,\n  })\n  status: paymentStatus;\n\n  @Column()\n  provider: string;\n\n  @Column({ unique: true })\n  providerReference: string;\n\n  @Column({ nullable: true })\n  authorizationUrl?: string;\n\n  @Column('decimal', { precision: 10, scale: 2 })\n  amount: number;\n\n  @Column({ nullable: false })\n  eventId: number;\n\n  @Column({ nullable: false })\n  userId: number;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @ManyToMany(() => Ticket)\n  @JoinTable({\n    name: 'payment_tickets',\n    joinColumn: { name: 'paymentId', referencedColumnName: 'id' },\n    inverseJoinColumn: { name: 'ticketId', referencedColumnName: 'id' },\n  })\n  tickets: Ticket[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaymentDto.html":{"url":"classes/PaymentDto.html","title":"class - PaymentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaymentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paystack/dtos/payment.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                payment dto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                eventId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                ticketTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the id of the event', example: 34})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paystack/dtos/payment.dto.ts:55\n                        \n                    \n\n            \n                \n                    event id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        ticketTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TicketTypeDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the type of ticket', example: 'general'})@IsArray()@IsNotEmpty()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paystack/dtos/payment.dto.ts:68\n                        \n                    \n\n            \n                \n                    type of ticket\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PatchTicketDto } from '@/tickets/dtos/patch-ticket.dto';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsInt,\n  IsNotEmpty,\n  Max,\n  Min,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * ticket type dto class\n */\nclass TicketTypeDto {\n  /**\n   * type of ticket\n   */\n  @ApiProperty({\n    description: 'This is the quantity of tickets',\n    example: 10,\n  })\n  @IsInt()\n  @Min(1)\n  @Max(10)\n  @IsNotEmpty()\n  quantity: number;\n\n  /**\n   * type of ticket\n   */\n  @ApiProperty({\n    description: 'patch ticket dto',\n    example: 'general',\n  })\n  @IsNotEmpty()\n  @Type(() => PatchTicketDto)\n  ticket: PatchTicketDto;\n}\n\n/**\n * payment dto class\n */\nexport class PaymentDto {\n  /**\n   * event id\n   */\n  @ApiProperty({\n    description: 'This is the id of the event',\n    example: 34,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  eventId: number;\n\n  /**\n   * type of ticket\n   */\n  @ApiProperty({\n    description: 'This is the type of ticket',\n    example: 'general',\n  })\n  @IsArray()\n  @IsNotEmpty()\n  @ValidateNested({ each: true })\n  @Type(() => TicketTypeDto)\n  ticketTypes: TicketTypeDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentsModule.html":{"url":"modules/PaymentsModule.html","title":"module - PaymentsModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaymentsModule\n\n\n\ncluster_PaymentsModule_providers\n\n\n\n\nPaymentsService\n\nPaymentsService\n\n\n\nPaymentsModule\n\nPaymentsModule\n\nPaymentsModule -->\n\nPaymentsService->PaymentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/payments/payments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaymentsService } from './providers/payments.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Payment } from './payment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Payment])],\n  providers: [PaymentsService],\n})\nexport class PaymentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentsService.html":{"url":"injectables/PaymentsService.html","title":"injectable - PaymentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payments/providers/payments.service.ts\n        \n\n\n            \n                Description\n            \n            \n                payment service\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * payment service\n */\n@Injectable()\nexport class PaymentsService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaystackController.html":{"url":"controllers/PaystackController.html","title":"controller - PaystackController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaystackController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paystack/paystack.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                paystack\n            \n\n\n            \n                Description\n            \n            \n                paystack controller route\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                handlePaymentWebhook\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                payForTicket\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        handlePaymentWebhook\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlePaymentWebhook(body: any, signature: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Wehook called when user pays for the ticket successfully'})@ApiResponse({status: 200, description: 'User buys ticket successfully'})@ApiBody({description: 'Contains id for ticket', required: true, examples: undefined})@Post('/webhook')@Auth(AuthType.None)@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/paystack/paystack.controller.ts:132\n                        \n                    \n\n\n            \n                \n                        Webhook route to handle Paystack's webhook\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                modified ticket\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        payForTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    payForTicket(paymentDto: PaymentDto, user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Initializes payment for ticket'})@ApiResponse({status: 200, description: 'User buys ticket successfully'})@ApiBody({description: 'Contains id for event and the ticket type', required: true, type: PaymentDto, examples: undefined})@ApiHeaders(['undefined', 'undefined'])@Post('/initialize-payment')@Roles(Role.EVENTPURCHASER)\n                \n            \n\n                    \n                        \n                            Defined in src/paystack/paystack.controller.ts:87\n                        \n                    \n\n\n            \n                \n                        function for generating link to paystack service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paymentDto\n                                            \n                                                            PaymentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                link to paystack service\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Headers,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { PaystackService } from './providers/paystack.service';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\nimport { ActiveUser } from 'src/auth/decorator/active-user.decorator';\nimport { Roles } from 'src/auth/decorator/role.decorator';\nimport { Role } from 'src/auth/enums/role-type.enum';\nimport {\n  ApiBody,\n  ApiHeaders,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { PaymentDto } from './dtos/payment.dto';\n\n/**\n * paystack controller route\n */\n@ApiTags('Paystack')\n@Controller('paystack')\nexport class PaystackController {\n  constructor(\n    /**\n     * injecting the paystack service\n     */\n    private readonly paystackService: PaystackService,\n  ) {}\n\n  /**\n   * function for generating link to paystack service\n   * @param paymentDto\n   * @param user\n   * @returns link to paystack service\n   */\n  @ApiOperation({\n    summary: 'Initializes payment for ticket',\n  })\n  // documentation for responses\n  @ApiResponse({\n    status: 200,\n    description: 'User buys ticket successfully',\n  })\n  @ApiBody({\n    description: 'Contains id for event and the ticket type',\n    required: true,\n    type: PaymentDto,\n    examples: {\n      example1: {\n        summary: 'Valid request example',\n        value: {\n          eventId: 43,\n          ticketType: 'general',\n        },\n      },\n      example2: {\n        summary: 'Invalid request example (missing event id)',\n        value: {\n          ticketType: 'general',\n        },\n      },\n    },\n  })\n  @ApiHeaders([\n    {\n      name: 'Authorization',\n      required: true,\n      description: 'Bearer token for authorization',\n    },\n    {\n      name: 'X-Custom-Header',\n      required: false,\n      description: 'A custom optional header',\n    },\n  ])\n  @Post('/initialize-payment')\n  @Roles(Role.EVENTPURCHASER)\n  public payForTicket(\n    @Body() paymentDto: PaymentDto,\n    @ActiveUser() user: ActiveUserData,\n  ) {\n    return this.paystackService.initializePayment(paymentDto, user);\n  }\n\n  // Callback route to handle Paystack's webhook/callback\n  /**\n   * Webhook route to handle Paystack's webhook\n   * @param body\n   * @param signature\n   * @param req\n   * @returns modified ticket\n   */\n  @ApiOperation({\n    summary: 'Wehook called when user pays for the ticket successfully',\n  })\n  // documentation for responses\n  @ApiResponse({\n    status: 200,\n    description: 'User buys ticket successfully',\n  })\n  @ApiBody({\n    description: 'Contains id for ticket',\n    required: true,\n    examples: {\n      example1: {\n        summary: 'Valid request example',\n        value: {\n          reference: 'ibewfib9',\n          event: { status: 'success' },\n        },\n      },\n      example2: {\n        summary: 'Invalid request example (missing event id)',\n        value: {\n          ticketType: 'general',\n        },\n      },\n    },\n  })\n  @Post('/webhook')\n  @Auth(AuthType.None)\n  @HttpCode(HttpStatus.OK)\n  async handlePaymentWebhook(\n    @Body() body: any,\n    @Headers('x-paystack-signature') signature: string,\n    @Req() req: any,\n  ) {\n    return this.paystackService.paymentWebhook(body, signature, req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaystackModule.html":{"url":"modules/PaystackModule.html","title":"module - PaystackModule","body":"\n                   \n\n\n\n\n    Modules\n    PaystackModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaystackModule\n\n\n\ncluster_PaystackModule_providers\n\n\n\ncluster_PaystackModule_imports\n\n\n\n\nTicketsModule\n\nTicketsModule\n\n\n\nPaystackModule\n\nPaystackModule\n\nPaystackModule -->\n\nTicketsModule->PaystackModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nPaystackModule -->\n\nUploadsModule->PaystackModule\n\n\n\n\n\nPaystackService\n\nPaystackService\n\nPaystackModule -->\n\nPaystackService->PaystackModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/paystack/paystack.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaystackService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaystackController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TicketsModule\n                        \n                        \n                            UploadsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaystackController } from './paystack.controller';\nimport { PaystackService } from './providers/paystack.service';\nimport { ConfigModule } from '@nestjs/config';\nimport paystackConfig from './config/paystack.config';\nimport { TicketsModule } from 'src/tickets/tickets.module';\nimport { UploadsModule } from 'src/uploads/uploads.module';\n\n@Module({\n  controllers: [PaystackController],\n  providers: [PaystackService],\n  imports: [\n    TicketsModule,\n    UploadsModule,\n    ConfigModule.forFeature(paystackConfig),\n  ],\n})\nexport class PaystackModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaystackService.html":{"url":"injectables/PaystackService.html","title":"injectable - PaystackService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaystackService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paystack/providers/paystack.service.ts\n        \n\n\n            \n                Description\n            \n            \n                service for the paystack module\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getAuthHeader\n                            \n                            \n                                    Public\n                                    Async\n                                initializePayment\n                            \n                            \n                                    Public\n                                    Async\n                                paymentWebhook\n                            \n                            \n                                    Public\n                                    Async\n                                verifyPayment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paystackConfiguration: ConfigType<>, configService: ConfigService, ticketsService: TicketsService, mailService: MailService, uploadsService: UploadsService, dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/paystack/providers/paystack.service.ts:27\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paystackConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ticketsService\n                                                  \n                                                        \n                                                                        TicketsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadsService\n                                                  \n                                                        \n                                                                        UploadsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getAuthHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuthHeader()\n                \n            \n\n\n                    \n                        \n                            Defined in src/paystack/providers/paystack.service.ts:73\n                        \n                    \n\n\n            \n                \n                        function for getting the auth header\n\n\n                        \n                            Returns :         { Authorization: string; }\n\n                        \n                            \n                                authorization header for paystack\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        initializePayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializePayment(paymentDto: any, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/paystack/providers/paystack.service.ts:83\n                        \n                    \n\n\n            \n                \n                        function for initializing the payment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paymentDto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                paylink url and access code\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paymentWebhook\n                        \n                    \n                \n            \n            \n                \n                        \n                    paymentWebhook(body: any, signature: string, req: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/paystack/providers/paystack.service.ts:286\n                        \n                    \n\n\n            \n                \n                        function called by paystack server after user pays\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                reference for payment\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        verifyPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyPayment(reference: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/paystack/providers/paystack.service.ts:169\n                        \n                    \n\n\n            \n                \n                        function for verifying the payment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reference\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                data after payment\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport paystackConfig from '../config/paystack.config';\nimport axios from 'axios';\nimport * as crypto from 'crypto';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\nimport { TicketsService } from 'src/tickets/providers/tickets.service';\nimport { PaymentDto } from '../dtos/payment.dto';\nimport { MailService } from 'src/mail/providers/mail.service';\nimport { UploadsService } from 'src/uploads/providers/uploads.service';\nimport { DataSource } from 'typeorm';\nimport { Payment } from '@/payments/payment.entity';\nimport { paymentStatus } from '@/payments/enums/paymentStatus.enum';\nimport { TicketStatus } from '@/tickets/enums/ticket-status.enum';\n\n/**\n * service for the paystack module\n */\n@Injectable()\nexport class PaystackService {\n  /**\n   * constructor\n   * @param paystackConfiguration\n   * @param configService\n   * @param ticketsService\n   * @param mailService\n   * @param uploadsService\n   */\n  constructor(\n    /**\n     * injecting the paystack config\n     */\n    @Inject(paystackConfig.KEY)\n    private readonly paystackConfiguration: ConfigType,\n\n    /**\n     * injecting config service\n     */\n    private readonly configService: ConfigService,\n\n    /**\n     * injecting the ticket service\n     */\n    private readonly ticketsService: TicketsService,\n\n    /**\n     * injecting the mail service\n     */\n    private readonly mailService: MailService,\n\n    /**\n     * injecting the uploads service\n     */\n    private readonly uploadsService: UploadsService,\n\n    /**\n     * Injecting datasource\n     */\n    private readonly dataSource: DataSource,\n  ) {}\n\n  /**\n   * function for getting the auth header\n   * @returns authorization header for paystack\n   */\n  private getAuthHeader() {\n    return { Authorization: `Bearer ${this.paystackConfiguration.secret}` };\n  }\n\n  /**\n   * function for initializing the payment\n   * @param paymentDto\n   * @param user\n   * @returns paylink url and access code\n   */\n  public async initializePayment(paymentDto: any, user: ActiveUserData) {\n    // the payment dto is an array\n    // start transaction\n    // create Query Runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n    try {\n      // connect query runner to datasource\n      await queryRunner.connect();\n      // start transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not connect to datasource');\n    }\n    // modify tickets\n    // start payment\n    // verify payment\n    // revert if their is failure in payment\n\n    try {\n      const { buyer, tickets, totalAmount, eventName } =\n        await this.ticketsService.getTickets(queryRunner, paymentDto, user);\n\n      const response = await axios.post(\n        `${this.paystackConfiguration.baseUrl}/transaction/initialize`,\n        {\n          email: buyer.email,\n          metadata: {\n            tickets: tickets,\n            user: buyer,\n            eventName,\n            totalAmount,\n          },\n          amount: totalAmount * 100,\n          callback_url: `http://localhost:3000/events/${paymentDto.eventId}/get-ticket?bought=yes`,\n        }, // Paystack accepts amounts in kobo\n        { headers: this.getAuthHeader() },\n      );\n\n      // Create payment record\n      await queryRunner.manager.save(Payment, {\n        userId: buyer.id,\n        eventId: paymentDto.eventId,\n        amount: totalAmount,\n        provider: 'paystack',\n        providerReference: response.data.data.reference,\n        status: paymentStatus.PENDING,\n        authorizationUrl: response.data.data.authorization_url,\n        tickets,\n      });\n\n      // Update tickets status to locked\n      await this.ticketsService.updateTicketsStatus(\n        queryRunner.manager,\n        tickets.map((ticket) => ticket.id),\n        TicketStatus.LOCKED,\n      );\n\n      // if successful commit\n      // ensures the txn is committed to the db\n      await queryRunner.commitTransaction();\n\n      return response.data;\n    } catch (error) {\n      // we rollback the txn here if it is not successful\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      // relsease the connection\n      // release connection whether it was successful or not\n      try {\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n  }\n\n  /**\n   * function for verifying the payment\n   * @param reference\n   * @returns data after payment\n   */\n  public async verifyPayment(reference: string) {\n    // create Query Runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n    try {\n      // connect query runner to datasource\n      await queryRunner.connect();\n      // start transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not connect to datasource');\n    }\n    try {\n      const response = await axios.get(\n        `${this.paystackConfiguration.baseUrl}/transaction/verify/${reference}`,\n        { headers: this.getAuthHeader() },\n      );\n      const { tickets, user, eventName, totalAmount } =\n        response.data.data.metadata;\n\n      // Get purchase by payment reference\n      const payment = await queryRunner.manager.findOne(Payment, {\n        where: { providerReference: reference },\n      });\n\n      if (!payment) {\n        throw new Error('Purchase not found');\n      }\n\n      if (response.data.data.status === 'success') {\n        // Update payment status\n        payment.status = paymentStatus.SUCCESS;\n\n        // Update tickets to sold\n        await this.ticketsService.updateTicketsStatus(\n          queryRunner.manager,\n          tickets.map((t) => t.id),\n          TicketStatus.SOLD,\n          user,\n        );\n      } else {\n        // Payment failed\n        payment.status = paymentStatus.FAILED;\n\n        // Release tickets back to available\n        await this.ticketsService.updateTicketsStatus(\n          queryRunner.manager,\n          tickets.map((t) => t.id),\n          TicketStatus.UNSOLD,\n        );\n      }\n\n      console.log('creating pdfs...');\n\n      const pdfs = await Promise.all(\n        tickets.map(\n          async (ticket) =>\n            await this.ticketsService.generateTicketPdf(\n              ticket.id,\n              ticket.type,\n              eventName,\n              ticket.price,\n            ),\n        ),\n      );\n\n      const urls = await Promise.all(\n        pdfs.map(\n          async (pdf, i: number) =>\n            await this.uploadsService.uploadTicketFile(pdf, tickets[i].id),\n        ),\n      );\n\n      console.log('urls: ', urls);\n\n      // Save updated paymet\n      await queryRunner.manager.save(Payment, payment);\n\n      await queryRunner.commitTransaction();\n\n      try {\n        await this.mailService.sendTicketBuyerMail(\n          user,\n          totalAmount,\n          eventName,\n          tickets,\n          urls,\n        );\n      } catch (err) {\n        throw new ConflictException(err);\n      }\n\n      return response.data;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      // relsease the connection\n      // release connection whether it was successful or not\n      try {\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n  }\n\n  /**\n   * function called by paystack server after user pays\n   * @param body\n   * @param signature\n   * @param req\n   * @returns reference for payment\n   */\n  public async paymentWebhook(body: any, signature: string, req: any) {\n    const hash = crypto\n      .createHmac('sha512', this.paystackConfiguration.secret)\n      .update(JSON.stringify(req.body))\n      .digest('hex');\n\n    if (hash !== signature) {\n      throw new HttpException('Invalid signature', HttpStatus.FORBIDDEN);\n    }\n\n    const { data, event } = body;\n\n    if (event !== 'charge.success') {\n      throw new HttpException('Invalid event type', HttpStatus.BAD_REQUEST);\n    }\n\n    const paymentData = await this.verifyPayment(data.reference);\n    console.log('Payment successful:', paymentData);\n    if (paymentData.data.status === 'success') {\n      return { message: 'Payment verified and processed successfully' };\n    } else {\n      throw new HttpException(\n        'Payment verification failed',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                refresh token dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the refresh token', example: 'hdfbwojefbnqpkfbjoqfehfewfeqwf234jr'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:17\n                        \n                    \n\n            \n                \n                    refresh token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * refresh token dto\n */\nexport class RefreshTokenDto {\n  /**\n   * refresh token\n   */\n  @ApiProperty({\n    description: 'This is the refresh token',\n    example: 'hdfbwojefbnqpkfbjoqfehfewfeqwf234jr',\n  })\n  @IsNotEmpty()\n  @IsString()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenProvider.html":{"url":"injectables/RefreshTokenProvider.html","title":"injectable - RefreshTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-token.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for resfresh token\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokensProvider, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-token.provider.ts:19\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-token.provider.ts:56\n                        \n                    \n\n\n            \n                \n                        function for using the refresh token to generate a new access and refresh token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokend\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n/**\n * provider for resfresh token\n */\n@Injectable()\nexport class RefreshTokenProvider {\n  /**\n   * constructor\n   * @param jwtService\n   * @param jwtConfiguration\n   * @param generateTokenProvider\n   * @param usersService\n   */\n  constructor(\n    /**\n     * Injecting the jwt service\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Injecting the jwt config\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    /**\n     * injecting the generate token provider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider,\n\n    /**\n     * Injecting the usersService\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * function for using the refresh token to generate a new access and refresh token\n   * @param refreshTokenDto\n   * @returns access and refresh tokend\n   */\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    try {\n      // verify the refresh token using the jwtService\n      const { sub } = await this.jwtService.verifyAsync\n      >(refreshTokenDto.refreshToken, {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n      });\n\n      // based on the id gotten, fetch the user from the db\n      const user = await this.usersService.findOneById(sub);\n\n      // generate the tokens\n      return await this.generateTokenProvider.generateTokens(user);\n    } catch (error) {\n      throw new UnauthorizedException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/reset-password.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                reset password dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                otp\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the reset otp', example: 2343})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/reset-password.dto.ts:17\n                        \n                    \n\n            \n                \n                    otp for reset password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the new password of the user', example: '@Favour233'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/reset-password.dto.ts:28\n                        \n                    \n\n            \n                \n                    new password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * reset password dto\n */\nexport class ResetPasswordDto {\n  /**\n   * otp for reset password\n   */\n  @ApiProperty({\n    description: 'This is the reset otp',\n    example: 2343,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  otp: number;\n\n  /**\n   * new password\n   */\n  @ApiProperty({\n    description: 'This is the new password of the user',\n    example: '@Favour233',\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResetPasswordProvider.html":{"url":"injectables/ResetPasswordProvider.html","title":"injectable - ResetPasswordProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResetPasswordProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/reset-password.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for reset password\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashingProvider: HashingProvider, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/reset-password.provider.ts:11\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(resetPasswordDto: ResetPasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/reset-password.provider.ts:34\n                        \n                    \n\n\n            \n                \n                        function for resetting password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resetPasswordDto\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                message with regards to whether the password has been reset successfully\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ResetPasswordDto } from '../dtos/reset-password.dto';\nimport { HashingProvider } from './hashing.provider';\nimport { UsersService } from 'src/users/providers/users.service';\nimport * as crypto from 'crypto';\n\n/**\n * provider for reset password\n */\n@Injectable()\nexport class ResetPasswordProvider {\n  /**\n   * constructor\n   * @param hashingProvider\n   * @param usersService\n   */\n  constructor(\n    /**\n     * injecting the hashProvider\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * injecting users service\n     */\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * function for resetting password\n   * @param resetPasswordDto\n   * @returns message with regards to whether the password has been reset successfully\n   */\n  public async resetPassword(resetPasswordDto: ResetPasswordDto) {\n    // get the otp and hash it\n    const hashedOtp = crypto\n      .createHash('sha256')\n      .update(resetPasswordDto.otp.toString())\n      .digest('hex');\n\n    // find the user based on the hased otp and timestamp\n    const user =\n      await this.usersService.findUserByResetOtpAndExpiryTime(hashedOtp);\n\n    const hashedPassword = await this.hashingProvider.hashPassword(\n      resetPasswordDto.password,\n    );\n\n    // if user exists then change the password and clear the reset token and timestamp\n    await this.usersService.changeUserPassword(user, hashedPassword);\n\n    return {\n      message: 'Password changed successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    role guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles/roles.guard.ts:16\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles/roles.guard.ts:31\n                        \n                    \n\n\n            \n                \n                        function for validating role of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true or false depending whether the users role meets the role requirements in the role decorator\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from 'src/auth/constants/role.constant';\nimport { Role } from 'src/auth/enums/role-type.enum';\n\n/**\n * role guard\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  // using static means you can use the name of the property of the class without the \"this\" keyword\n  //   private static readonly defaultRoleType: Role = Role.ADMIN;\n\n  /**\n   * constructor\n   * @param reflector\n   */\n  constructor(private reflector: Reflector) {}\n\n  /**\n   * function for validating role of user\n   * @param context\n   * @returns true or false depending whether the users role meets the role requirements in the role decorator\n   */\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!requiredRoles) {\n      return true; //  allow access.\n    }\n\n    const { user } = context.switchToHttp().getRequest();\n\n    if (!user) {\n      throw new ForbiddenException('User not found.');\n    }\n\n    const hasRole = requiredRoles.some((role) => user.role === role);\n\n    if (!hasRole) {\n      throw new ForbiddenException(\n        'You do not have permission to access this resource.',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/sign-in.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                sign in dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the email of the user', example: 'Favour@gmail.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:17\n                        \n                    \n\n            \n                \n                    email address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the password of the user', example: '@Favour233'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:28\n                        \n                    \n\n            \n                \n                    password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * sign in dto\n */\nexport class SignInDto {\n  /**\n   * email address\n   */\n  @ApiProperty({\n    description: 'This is the email of the user',\n    example: 'Favour@gmail.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * password\n   */\n  @ApiProperty({\n    description: 'This is the password of the user',\n    example: '@Favour233',\n  })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for sigining in users\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:17\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:47\n                        \n                    \n\n\n            \n                \n                        function for signing in users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { SignInDto } from '../dtos/sign-in.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { HashingProvider } from './hashing.provider';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n/**\n * provider for sigining in users\n */\n@Injectable()\nexport class SignInProvider {\n  /**\n   * constructor\n   * @param usersService\n   * @param hashingProvider\n   * @param generateTokenProvider\n   */\n  constructor(\n    /**\n     * injecting the user service\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Injecting the hashing provider\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * injecting the generate token provider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider,\n  ) {}\n\n  /**\n   * function for signing in users\n   * @param signInDto\n   * @returns access and refresh tokens\n   */\n  public async signIn(signInDto: SignInDto) {\n    // find  the user using the email ID\n    // throw an exception if the user does not exist\n    const user: any = await this.usersService.findOneByEmail(signInDto.email);\n\n    // compare the password to the hash\n    let isEqual: boolean = false;\n\n    try {\n      isEqual = await this.hashingProvider.comparePassword(\n        signInDto.password,\n        user.password,\n      );\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Could not compare passwords',\n      });\n    }\n\n    if (!isEqual) {\n      throw new UnauthorizedException('Incorrect email or password');\n    }\n\n    // generate an access token\n    const { accessToken, refreshToken } =\n      await this.generateTokenProvider.generateTokens(user);\n\n    return {\n      accessToken,\n      refreshToken,\n      user: {\n        id: user.id,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        accountType: user.accountType,\n        role: user.role,\n        email: user.email,\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoreOtpAndExpireProvider.html":{"url":"injectables/StoreOtpAndExpireProvider.html","title":"injectable - StoreOtpAndExpireProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoreOtpAndExpireProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/store-otp-and-expire.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider class for storing otp and expiry date\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                storeOtpAndExpire\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/store-otp-and-expire.provider.ts:10\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        storeOtpAndExpire\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeOtpAndExpire(user: User, otp: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/store-otp-and-expire.provider.ts:29\n                        \n                    \n\n\n            \n                \n                        function for storing otp and expiry date\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\n\n/**\n * provider class for storing otp and expiry date\n */\n@Injectable()\nexport class StoreOtpAndExpireProvider {\n  /**\n   * constructor\n   * @param usersRepository\n   */\n  constructor(\n    /**\n     * Injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  /**\n   * function for storing otp and expiry date\n   * @param user\n   * @param otp\n   * @returns user\n   */\n  public async storeOtpAndExpire(user: User, otp: string) {\n    const resetExpires = new Date(Date.now() + 10 * 60 * 1000);\n    const newUserObj = { ...user, resetOtp: otp, resetOtpExpire: resetExpires };\n    try {\n      return await this.usersRepository.save(newUserObj);\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Subscriber.html":{"url":"entities/Subscriber.html","title":"entity - Subscriber","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Subscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscriber.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                subscriber entity for the table in the database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/subscriber.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/subscriber.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * subscriber entity for the table in the database\n */\n@Entity()\nexport class Subscriber {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscribersController.html":{"url":"controllers/SubscribersController.html","title":"controller - SubscribersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubscribersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscribers.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                subscribers\n            \n\n\n            \n                Description\n            \n            \n                controller class for subscribers route\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createSubscriber\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                deleteSubscriber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createSubscriber\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSubscriber(createSubscriberDto: CreateSubscriberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It creates a subscriber and sends a mail'})@ApiResponse({status: 201, description: 'Subscriber created successfully based on the query'})@ApiBody({description: 'Contains subscriber email ', required: true, type: CreateSubscriberDto, examples: undefined})@Post()@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/subscribers/subscribers.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        function for creating a subscriber\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createSubscriberDto\n                                            \n                                                            CreateSubscriberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                subscriber\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        deleteSubscriber\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSubscriber(subscriberId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It deletes a subscriber based on their id'})@ApiResponse({status: 204, description: 'subscriber is deleted successfully based on user id'})@ApiParam({name: 'subscriberId', required: true, type: String, description: 'The unique identifier of the subscriber', example: '12345'})@Get('/:subscriberId')@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/subscribers/subscribers.controller.ts:95\n                        \n                    \n\n\n            \n                \n                        function for removing a subscriber from the subscription db\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                subscriberId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                message that shows the subscriber unsubscribed\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n} from '@nestjs/common';\nimport { SubscribersService } from './providers/subscribers.service';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { CreateSubscriberDto } from './dtos/create-subscriber.dto';\nimport {\n  ApiBody,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\n\n/**\n * controller class for subscribers route\n */\n@ApiTags('Subscribers')\n@Controller('subscribers')\nexport class SubscribersController {\n  /**\n   * constructor\n   * @param subscriberService\n   */\n  constructor(\n    /**\n     * injecting the subscriber service\n     */\n    private readonly subscriberService: SubscribersService,\n  ) {}\n\n  /**\n   * function for creating a subscriber\n   * @param createSubscriberDto\n   * @returns subscriber\n   */\n  @ApiOperation({\n    summary: 'It creates a subscriber and sends a mail',\n  })\n  // documentation for responses\n  @ApiResponse({\n    status: 201,\n    description: 'Subscriber created successfully based on the query',\n  })\n  @ApiBody({\n    description: 'Contains subscriber email ',\n    required: true,\n    type: CreateSubscriberDto,\n    examples: {\n      example1: {\n        summary: 'Valid request example',\n        value: {\n          email: 'iloghaluagneskc@gmail.com',\n        },\n      },\n      example2: {\n        summary: 'Invalid request example (missing email)',\n        value: {},\n      },\n    },\n  })\n  @Post()\n  @Auth(AuthType.None)\n  public createSubscriber(@Body() createSubscriberDto: CreateSubscriberDto) {\n    return this.subscriberService.createSubscriber(createSubscriberDto);\n  }\n\n  /**\n   * function for removing a subscriber from the subscription db\n   * @param subscriberId\n   * @returns message that shows the subscriber unsubscribed\n   */\n  @ApiOperation({\n    summary: 'It deletes a subscriber based on their id',\n  })\n  @ApiResponse({\n    status: 204,\n    description: 'subscriber is deleted successfully based on user id',\n  })\n  @ApiParam({\n    name: 'subscriberId',\n    required: true,\n    type: String,\n    description: 'The unique identifier of the subscriber',\n    example: '12345',\n  })\n  @Get('/:subscriberId')\n  @Auth(AuthType.None)\n  public deleteSubscriber(\n    @Param('subscriberId', ParseIntPipe) subscriberId: number,\n  ) {\n    return this.subscriberService.unsubscribeEmail(subscriberId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubscribersModule.html":{"url":"modules/SubscribersModule.html","title":"module - SubscribersModule","body":"\n                   \n\n\n\n\n    Modules\n    SubscribersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SubscribersModule\n\n\n\ncluster_SubscribersModule_providers\n\n\n\ncluster_SubscribersModule_imports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nSubscribersModule -->\n\nMailModule->SubscribersModule\n\n\n\n\n\nSubscribersService\n\nSubscribersService\n\nSubscribersModule -->\n\nSubscribersService->SubscribersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscribers/subscribers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubscribersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SubscribersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SubscribersController } from './subscribers.controller';\nimport { SubscribersService } from './providers/subscribers.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Subscriber } from './subscriber.entity';\nimport { MailModule } from 'src/mail/mail.module';\n\n@Module({\n  controllers: [SubscribersController],\n  providers: [SubscribersService],\n  imports: [TypeOrmModule.forFeature([Subscriber]), MailModule],\n})\nexport class SubscribersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubscribersService.html":{"url":"injectables/SubscribersService.html","title":"injectable - SubscribersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubscribersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/providers/subscribers.service.ts\n        \n\n\n            \n                Description\n            \n            \n                service for the subscriber module\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createSubscriber\n                            \n                            \n                                    Public\n                                    Async\n                                unsubscribeEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriberRepository: Repository, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/subscribers/providers/subscribers.service.ts:12\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriberRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createSubscriber\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSubscriber(createSubscriberDto: CreateSubscriberDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscribers/providers/subscribers.service.ts:36\n                        \n                    \n\n\n            \n                \n                        function for creatng a subscriber\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createSubscriberDto\n                                            \n                                                            CreateSubscriberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                message that subscriber has successfully subscribed to the newsletter\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        unsubscribeEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsubscribeEmail(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscribers/providers/subscribers.service.ts:55\n                        \n                    \n\n\n            \n                \n                        function for unsubscribing from newsletter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                message that subscriber has unsubscribed from the newsletter\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { CreateSubscriberDto } from '../dtos/create-subscriber.dto';\nimport { Repository } from 'typeorm';\nimport { Subscriber } from '../subscriber.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MailService } from 'src/mail/providers/mail.service';\n\n/**\n * service for the subscriber module\n */\n@Injectable()\nexport class SubscribersService {\n  /**\n   * constructor\n   * @param subscriberRepository\n   * @param mailService\n   */\n  constructor(\n    /**\n     * injecting the subscriber repository\n     */\n    @InjectRepository(Subscriber)\n    private readonly subscriberRepository: Repository,\n\n    /**\n     * injecting the mail service\n     */\n    private readonly mailService: MailService,\n  ) {}\n\n  /**\n   * function for creatng a subscriber\n   * @param createSubscriberDto\n   * @returns message that subscriber has successfully subscribed to the newsletter\n   */\n  public async createSubscriber(createSubscriberDto: CreateSubscriberDto) {\n    const subscriber = this.subscriberRepository.create(createSubscriberDto);\n\n    try {\n      await this.subscriberRepository.save(subscriber);\n      await this.mailService.sendSubscriberMail(subscriber);\n      return {\n        message: 'Subscribed to newsletter successfully',\n      };\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n\n  /**\n   * function for unsubscribing from newsletter\n   * @param id\n   * @returns message that subscriber has unsubscribed from the newsletter\n   */\n  public async unsubscribeEmail(id: number) {\n    try {\n      await this.subscriberRepository.delete(id);\n      return {\n        message: 'Unsubscribed from newsletter successfully',\n      };\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Ticket.html":{"url":"entities/Ticket.html","title":"entity - Ticket","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Ticket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/ticket.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                ticket entity for ticket table\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                event\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lockedAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                owner\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                summary\n                            \n                            \n                                    \n                                ticketStatus\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/ticket.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, event => event.tickets, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/ticket.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/ticket.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lockedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/ticket.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/ticket.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'integer', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/ticket.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        summary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: '1024', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/ticket.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ticketStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TicketStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TicketStatus, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/ticket.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/ticket.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tickets/ticket.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Event } from 'src/events/event.entity';\nimport { User } from 'src/users/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { TicketStatus } from './enums/ticket-status.enum';\n\n/**\n * ticket entity for ticket table\n */\n@Entity()\nexport class Ticket {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    nullable: false,\n  })\n  type: string;\n\n  @Column({\n    type: 'integer',\n    nullable: false,\n  })\n  price: number;\n\n  @Column({\n    type: 'varchar',\n    length: '1024',\n    nullable: false,\n  })\n  summary: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @Column({\n    type: 'enum',\n    enum: TicketStatus,\n    default: TicketStatus.UNSOLD,\n    nullable: false,\n  })\n  ticketStatus: TicketStatus;\n\n  @Column({ nullable: true })\n  lockedAt?: Date;\n\n  @ManyToOne(() => Event, (event) => event.tickets, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  event: Event;\n\n  @ManyToOne(() => User, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  owner?: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketTypeDto.html":{"url":"classes/TicketTypeDto.html","title":"class - TicketTypeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketTypeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paystack/dtos/payment.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                ticket type dto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                quantity\n                            \n                            \n                                    \n                                    \n                                    \n                                ticket\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the quantity of tickets', example: 10})@IsInt()@Min(1)@Max(10)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paystack/dtos/payment.dto.ts:28\n                        \n                    \n\n            \n                \n                    type of ticket\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        ticket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PatchTicketDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'patch ticket dto', example: 'general'})@IsNotEmpty()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paystack/dtos/payment.dto.ts:39\n                        \n                    \n\n            \n                \n                    type of ticket\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PatchTicketDto } from '@/tickets/dtos/patch-ticket.dto';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsInt,\n  IsNotEmpty,\n  Max,\n  Min,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * ticket type dto class\n */\nclass TicketTypeDto {\n  /**\n   * type of ticket\n   */\n  @ApiProperty({\n    description: 'This is the quantity of tickets',\n    example: 10,\n  })\n  @IsInt()\n  @Min(1)\n  @Max(10)\n  @IsNotEmpty()\n  quantity: number;\n\n  /**\n   * type of ticket\n   */\n  @ApiProperty({\n    description: 'patch ticket dto',\n    example: 'general',\n  })\n  @IsNotEmpty()\n  @Type(() => PatchTicketDto)\n  ticket: PatchTicketDto;\n}\n\n/**\n * payment dto class\n */\nexport class PaymentDto {\n  /**\n   * event id\n   */\n  @ApiProperty({\n    description: 'This is the id of the event',\n    example: 34,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  eventId: number;\n\n  /**\n   * type of ticket\n   */\n  @ApiProperty({\n    description: 'This is the type of ticket',\n    example: 'general',\n  })\n  @IsArray()\n  @IsNotEmpty()\n  @ValidateNested({ each: true })\n  @Type(() => TicketTypeDto)\n  ticketTypes: TicketTypeDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TicketsController.html":{"url":"controllers/TicketsController.html","title":"controller - TicketsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TicketsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/tickets.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tickets\n            \n\n\n            \n                Description\n            \n            \n                controller class for the ticket route\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Body, Controller, Patch, Post } from '@nestjs/common';\nimport { TicketsService } from './providers/tickets.service';\nimport { ActiveUser } from 'src/auth/decorator/active-user.decorator';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\nimport { Roles } from 'src/auth/decorator/role.decorator';\nimport { Role } from 'src/auth/enums/role-type.enum';\nimport { PatchTicketDto } from './dtos/patch-ticket.dto';\nimport {\n  ApiBody,\n  ApiHeaders,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\n\n/**\n * controller class for the ticket route\n */\n@ApiTags('Tickets')\n@Controller('tickets')\nexport class TicketsController {\n  /**\n   * constructor\n   * @param ticketsService\n   */\n  constructor(\n    /**\n     * injecting the tickets service\n     */\n    private readonly ticketsService: TicketsService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicketsModule.html":{"url":"modules/TicketsModule.html","title":"module - TicketsModule","body":"\n                   \n\n\n\n\n    Modules\n    TicketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_imports\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_TicketsModule_exports\n\n\n\n\nEventsModule\n\nEventsModule\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nEventsModule->TicketsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nBuyTicketProvider\n\nBuyTicketProvider\n\nTicketsModule -->\n\nBuyTicketProvider->TicketsModule\n\n\n\n\n\nGenerateTicketPdfProvider\n\nGenerateTicketPdfProvider\n\nTicketsModule -->\n\nGenerateTicketPdfProvider->TicketsModule\n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\nUpdateBoughtTicketProvider\n\nUpdateBoughtTicketProvider\n\nTicketsModule -->\n\nUpdateBoughtTicketProvider->TicketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tickets/tickets.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BuyTicketProvider\n                        \n                        \n                            GenerateTicketPdfProvider\n                        \n                        \n                            TicketsService\n                        \n                        \n                            UpdateBoughtTicketProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TicketsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EventsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Ticket } from './ticket.entity';\nimport { TicketsService } from './providers/tickets.service';\nimport { TicketsController } from './tickets.controller';\nimport { BuyTicketProvider } from './providers/buy-ticket.provider';\nimport { UsersModule } from 'src/users/users.module';\nimport { EventsModule } from 'src/events/events.module';\nimport { UpdateBoughtTicketProvider } from './providers/update-bought-ticket.provider';\nimport { GenerateTicketPdfProvider } from './providers/generate-ticket-pdf.provider';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Ticket]), UsersModule, EventsModule],\n  providers: [\n    BuyTicketProvider,\n    TicketsService,\n    UpdateBoughtTicketProvider,\n    GenerateTicketPdfProvider,\n  ],\n  controllers: [TicketsController],\n  exports: [TicketsService],\n})\nexport class TicketsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TicketsService.html":{"url":"injectables/TicketsService.html","title":"injectable - TicketsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TicketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/providers/tickets.service.ts\n        \n\n\n            \n                Description\n            \n            \n                service class for the tickets module\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTicketPdf\n                            \n                            \n                                    Public\n                                    Async\n                                getTickets\n                            \n                            \n                                    Public\n                                    Async\n                                updateTicket\n                            \n                            \n                                    Public\n                                    Async\n                                updateTicketsStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(buyTicketProvider: BuyTicketProvider, updateBoughtTicketProvider: UpdateBoughtTicketProvider, generateTicketPdfProvider: GenerateTicketPdfProvider)\n                    \n                \n                        \n                            \n                                Defined in src/tickets/providers/tickets.service.ts:16\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        buyTicketProvider\n                                                  \n                                                        \n                                                                        BuyTicketProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateBoughtTicketProvider\n                                                  \n                                                        \n                                                                        UpdateBoughtTicketProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTicketPdfProvider\n                                                  \n                                                        \n                                                                        GenerateTicketPdfProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTicketPdf\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTicketPdf(id: string, type: string, eventName: string, amount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tickets/providers/tickets.service.ts:94\n                        \n                    \n\n\n            \n                \n                        function for generating the ticket pdf\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                eventName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                ticket pdf\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTickets\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTickets(queryRunner: QueryRunner, body: PaymentDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tickets/providers/tickets.service.ts:44\n                        \n                    \n\n\n            \n                \n                        function for buying ticket\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PaymentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                initialized payment link of ticket\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTicket(ticketId: number, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tickets/providers/tickets.service.ts:82\n                        \n                    \n\n\n            \n                \n                        function for modifying the the ticket after a purchase\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ticketId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                updated ticket info\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateTicketsStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTicketsStatus(entityManager: EntityManager, ticketIds: number[], status: TicketStatus, user?: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tickets/providers/tickets.service.ts:58\n                        \n                    \n\n\n            \n                \n                        function for updating ticket status\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entityManager\n                                            \n                                                        EntityManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ticketIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            TicketStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\nimport { BuyTicketProvider } from './buy-ticket.provider';\nimport { User } from 'src/users/user.entity';\nimport { UpdateBoughtTicketProvider } from './update-bought-ticket.provider';\nimport { GenerateTicketPdfProvider } from './generate-ticket-pdf.provider';\nimport { PaymentDto } from '@/paystack/dtos/payment.dto';\nimport { EntityManager, QueryRunner } from 'typeorm';\nimport { TicketStatus } from '../enums/ticket-status.enum';\nimport { Ticket } from '../ticket.entity';\n\n/**\n * service class for the tickets module\n */\n@Injectable()\nexport class TicketsService {\n  /**\n   * constructor\n   * @param buyTicketProvider\n   */\n  constructor(\n    /**\n     * injecting the buy ticket provider\n     */\n    private readonly buyTicketProvider: BuyTicketProvider,\n\n    /**\n     * injecting the update bought ticket provider\n     */\n    private readonly updateBoughtTicketProvider: UpdateBoughtTicketProvider,\n\n    /**\n     * injecting the generate ticket pdf\n     */\n    private readonly generateTicketPdfProvider: GenerateTicketPdfProvider,\n  ) {}\n\n  /**\n   * function for buying ticket\n   * @param patchTicketDto\n   * @param user\n   * @returns initialized payment link of ticket\n   */\n  public async getTickets(\n    queryRunner: QueryRunner,\n    body: PaymentDto,\n    user: ActiveUserData,\n  ) {\n    return this.buyTicketProvider.buyTicket(queryRunner, body, user);\n  }\n\n  /**\n   * function for updating ticket status\n   * @param entityManager\n   * @param ticketIds\n   * @param status\n   */\n  public async updateTicketsStatus(\n    entityManager: EntityManager,\n    ticketIds: number[],\n    status: TicketStatus,\n    user?: User,\n  ) {\n    const setData = user\n      ? { ticketStatus: status, owner: user }\n      : { ticketStatus: status };\n\n    await entityManager\n      .createQueryBuilder()\n      .update(Ticket)\n      .set(setData)\n      .where('id IN (:...ids)', { ids: ticketIds })\n      .execute();\n  }\n\n  /**\n   * function for modifying the the ticket after a purchase\n   * @param ticketId\n   * @param user\n   * @returns updated ticket info\n   */\n  public async updateTicket(ticketId: number, user: User) {\n    return this.updateBoughtTicketProvider.updateTicket(ticketId, user);\n  }\n\n  /**\n   * function for generating the ticket pdf\n   * @param id\n   * @param type\n   * @param eventName\n   * @param amount\n   * @returns ticket pdf\n   */\n  public async generateTicketPdf(\n    id: string,\n    type: string,\n    eventName: string,\n    amount: number,\n  ) {\n    return await this.generateTicketPdfProvider.generateTicketPDF({\n      id,\n      type,\n      eventName,\n      amount,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateBoughtTicketProvider.html":{"url":"injectables/UpdateBoughtTicketProvider.html","title":"injectable - UpdateBoughtTicketProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateBoughtTicketProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/providers/update-bought-ticket.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                update bought ticket provider class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateTicket\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ticketsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tickets/providers/update-bought-ticket.provider.ts:16\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ticketsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTicket(ticketId: number, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tickets/providers/update-bought-ticket.provider.ts:35\n                        \n                    \n\n\n            \n                \n                        function for updating ticket after user pays\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ticketId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                updated ticket\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Ticket } from '../ticket.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { TicketStatus } from '../enums/ticket-status.enum';\nimport { User } from 'src/users/user.entity';\n\n/**\n * update bought ticket provider class\n */\n@Injectable()\nexport class UpdateBoughtTicketProvider {\n  /**\n   * constructor\n   * @param ticketsRepository\n   */\n  constructor(\n    /**\n     * injecting ticket repo\n     */\n    @InjectRepository(Ticket)\n    private readonly ticketsRepository: Repository,\n  ) {}\n\n  /**\n   * function for updating ticket after user pays\n   * @param ticketId\n   * @param user\n   * @returns updated ticket\n   */\n  public async updateTicket(ticketId: number, user: User) {\n    let ticket;\n    // find the ticket\n    try {\n      ticket = await this.ticketsRepository.findOneBy({\n        id: +ticketId,\n      });\n    } catch (err) {\n      throw new RequestTimeoutException(err);\n    }\n    if (!ticket) {\n      throw new BadRequestException('Ticket id does not exist');\n    }\n    // modify the ownerId and ticketStatus fields\n    ticket.owner = user;\n    ticket.ticketStatus = TicketStatus.SOLD;\n    try {\n      await this.ticketsRepository.save(ticket);\n    } catch (error: any) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n    return ticket;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadToAwsProvider.html":{"url":"injectables/UploadToAwsProvider.html","title":"injectable - UploadToAwsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadToAwsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/upload-to-aws.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider class for uploading to aws\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                fileUpload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                            \n                                    Public\n                                    Async\n                                uploadTicketFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/upload-to-aws.provider.ts:11\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fileUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    fileUpload(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:28\n                        \n                    \n\n\n            \n                \n                        function for uploading image file to aws\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                stored file\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:78\n                        \n                    \n\n\n            \n                \n                        function for generating the image filename\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    function for generating the image file name\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                the image file name\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadTicketFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadTicketFile(fileBuffer: Buffer, ticketId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:53\n                        \n                    \n\n\n            \n                \n                        function for uploading file to AWS\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileBuffer\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ticketId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                tickets name\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { S3 } from 'aws-sdk';\nimport * as path from 'path';\nimport { v4 as uuid4 } from 'uuid';\n\n/**\n * provider class for uploading to aws\n */\n@Injectable()\nexport class UploadToAwsProvider {\n  /**\n   * constructor\n   * @param configService\n   */\n  constructor(\n    /**\n     * injecting the config service\n     */\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * function for uploading image file to aws\n   * @param file\n   * @returns stored file\n   */\n  public async fileUpload(file: Express.Multer.File) {\n    const s3 = new S3();\n\n    try {\n      const uploadResult = await s3\n        .upload({\n          Bucket: this.configService.get('appConfig.awsBucketName'),\n          Body: file.buffer,\n          Key: this.generateFileName(file),\n          ContentType: file.mimetype,\n        })\n        .promise();\n\n      return uploadResult.Key;\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n\n  /**\n   * function for uploading file to AWS\n   * @param fileBuffer\n   * @param ticketId\n   * @returns tickets name\n   */\n  public async uploadTicketFile(fileBuffer: Buffer, ticketId: string) {\n    const s3 = new S3();\n    const key = `tickets/ticket-${ticketId}.pdf`;\n\n    try {\n      const uploadResult = await s3\n        .upload({\n          Bucket: this.configService.get('appConfig.awsBucketName'),\n          Body: fileBuffer,\n          Key: key,\n          ContentType: 'application/pdf',\n        })\n        .promise();\n\n      return uploadResult.Key;\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n\n  /**\n   *function for generating the image filename\n   * @param file function for generating the image file name\n   * @returns the image file name\n   */\n  private generateFileName(file: Express.Multer.File) {\n    // extract file name\n    const name = file.originalname.split('.')[0];\n\n    // Remove white spaces\n    name.replace(/|s/g, '').trim();\n\n    // extract the extension\n    const extension = path.extname(file.originalname);\n\n    // generate time stamp\n    const timestamp = new Date().getTime().toString().trim();\n\n    // return file uuid\n    return `${name}-${timestamp}-${uuid4()}${extension}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadsModule.html":{"url":"modules/UploadsModule.html","title":"module - UploadsModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_exports\n\n\n\ncluster_UploadsModule_providers\n\n\n\n\nUploadsService \n\nUploadsService \n\n\n\nUploadsModule\n\nUploadsModule\n\nUploadsService  -->\n\nUploadsModule->UploadsService \n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/uploads/uploads.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadToAwsProvider\n                        \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UploadsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UploadsService } from './providers/uploads.service';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\n\n@Module({\n  providers: [UploadsService, UploadToAwsProvider],\n  exports: [UploadsService],\n})\nexport class UploadsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadsService.html":{"url":"injectables/UploadsService.html","title":"injectable - UploadsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/uploads.service.ts\n        \n\n\n            \n                Description\n            \n            \n                service class for uploads module\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                            \n                                    Public\n                                    Async\n                                uploadTicketFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadToAwsProvider: UploadToAwsProvider, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/uploads.service.ts:13\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadToAwsProvider\n                                                  \n                                                        \n                                                                        UploadToAwsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/uploads.service.ts:36\n                        \n                    \n\n\n            \n                \n                        function for uploading image file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                url for image file\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadTicketFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadTicketFile(fileBuffer: any, ticketId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/uploads.service.ts:58\n                        \n                    \n\n\n            \n                \n                        function for uploading ticket and getting the ticket url\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileBuffer\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ticketId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                url for ticket\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { UploadToAwsProvider } from './upload-to-aws.provider';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * service class for uploads module\n */\n@Injectable()\nexport class UploadsService {\n  /**\n   * constructor\n   * @param uploadToAwsProvider\n   * @param configService\n   */\n  constructor(\n    /**\n     * injecting the upload to aws provider\n     */\n    private readonly uploadToAwsProvider: UploadToAwsProvider,\n\n    /**\n     * injecting config service\n     */\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * function for uploading image file\n   * @param file\n   * @returns url for image file\n   */\n  public async uploadFile(file: Express.Multer.File) {\n    // throw error for unsupported mimetype\n    if (!['image/jpeg', 'image/png', 'image/jpg'].includes(file.mimetype)) {\n      throw new BadRequestException('mime type not supported');\n    }\n\n    try {\n      // upload the file to the aws s3 bucket and a url has been generated\n      const name = await this.uploadToAwsProvider.fileUpload(file);\n\n      return `${this.configService.get('appConfig.awsCloudFrontUrl')}/${name}`;\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n  }\n\n  /**\n   * function for uploading ticket and getting the ticket url\n   * @param fileBuffer\n   * @param ticketId\n   * @returns url for ticket\n   */\n  public async uploadTicketFile(fileBuffer: any, ticketId: string) {\n    try {\n      // upload the file to the aws s3 bucket and a url has been generated\n      const name = await this.uploadToAwsProvider.uploadTicketFile(\n        fileBuffer,\n        ticketId,\n      );\n\n      return `${this.configService.get('appConfig.awsCloudFrontUrl')}/${name}`;\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                user entity for user table in the database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accountType\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                events\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Optional\n                                resetOtp\n                            \n                            \n                                    \n                                    Optional\n                                resetOtpExpire\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accountType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         accountType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: accountType, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        events\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, event => event.owner, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetOtp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetOtpExpire\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Event } from 'src/events/event.entity';\nimport { accountType } from './enums/account-type.enum';\nimport { Role } from 'src/auth/enums/role-type.enum';\n\n/**\n * user entity for user table in the database\n */\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n    select: false,\n  })\n  @Exclude()\n  password?: string;\n\n  @Column({\n    type: 'enum',\n    enum: accountType,\n    nullable: false,\n  })\n  accountType: accountType;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    nullable: false,\n  })\n  role: Role;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  resetOtp?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  resetOtpExpire?: Date;\n\n  @OneToMany(() => Event, (event) => event.owner, {\n    eager: true,\n  })\n  events: Event[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                controller route for users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                findAllUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                findUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                findUserEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@Auth(AuthType.None)@ApiOperation({summary: 'It creates a user '})@ApiResponse({status: 201, description: 'User created successfully based on the query'})@ApiBody({description: 'Contains user details', required: true, type: CreateUserDto, examples: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:89\n                        \n                    \n\n\n            \n                \n                        route for creating a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                the created user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It deletes a user based on their id'})@ApiResponse({status: 204, description: 'User successfully deleted'})@ApiParam({name: 'userId', required: true, type: String, description: 'The unique identifier of the user', example: '12345'})@ApiHeaders(['undefined', 'undefined'])@Delete('/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:260\n                        \n                    \n\n\n            \n                \n                        route for deleting a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                a message indicating user was deleted\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers(usersQuery: GetUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It finds all users '})@ApiResponse({status: 200, description: 'All users are fetched and paginated'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the api to return', example: 1})@ApiHeaders(['undefined', 'undefined'])@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:133\n                        \n                    \n\n\n            \n                \n                        route for getting all users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                usersQuery\n                                            \n                                                            GetUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                all users\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It finds a user based on their id'})@ApiResponse({status: 200, description: 'User is fetched successfully based on user id'})@ApiParam({name: 'userId', required: true, type: String, description: 'The unique identifier of the user', example: '12345'})@ApiHeaders(['undefined', 'undefined'])@Get('/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:169\n                        \n                    \n\n\n            \n                \n                        route for getting a user by user id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                a user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        findUserEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserEvents(userId: string, eventsQuery: GetEventsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'It finds all events a user has created based on their id'})@ApiResponse({status: 200, description: 'All events created by user are fetched'})@ApiParam({name: 'userId', required: true, type: String, description: 'The unique identifier of the user', example: '12345'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the api to return', example: 1})@ApiHeaders(['undefined', 'undefined'])@Get('/:userId/events')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:221\n                        \n                    \n\n\n            \n                \n                        route for getting all events created by user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                eventsQuery\n                                            \n                                                            GetEventsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                all events from a user\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { UsersService } from './providers/users.service';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { GetUsersDto } from './dtos/get-user.dto';\nimport { GetUserEventsProvider } from 'src/events/providers/get-user-events.provider';\nimport { GetEventsDto } from 'src/events/dtos/get-events.dto';\nimport {\n  ApiBody,\n  ApiHeaders,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\n\n/**\n * controller route for users\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    /**\n     * injecting the  user service\n     */\n    private readonly usersService: UsersService,\n\n    /**\n     * injecting the get user events provider\n     */\n    private readonly getUserEventsProvider: GetUserEventsProvider,\n  ) {}\n\n  /**\n   * route for creating a user\n   * @param createUserDto\n   * @returns the created user\n   */\n  @Post('/')\n  @Auth(AuthType.None)\n  @ApiOperation({\n    summary: 'It creates a user ',\n  })\n  // documentation for responses\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully based on the query',\n  })\n  @ApiBody({\n    description: 'Contains user details',\n    required: true,\n    type: CreateUserDto,\n    examples: {\n      example1: {\n        summary: 'Valid request example',\n        value: {\n          firstName: 'Kelechi',\n          lastName: 'Agnes',\n          email: 'iloghaluagneskc@gmail.com',\n          password: '@Password1',\n          accountType: 'ticketPurchaser',\n          role: 'ticketPurchaser',\n        },\n      },\n      example2: {\n        summary: 'Invalid request example (missing password)',\n        value: {\n          firstName: 'Kelechi',\n          lastName: 'Agnes',\n          email: 'iloghaluagneskc@gmail.com',\n          accountType: 'ticketPurchaser',\n          role: 'ticketPurchaser',\n        },\n      },\n    },\n  })\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * route for getting all users\n   * @param usersQuery\n   * @returns all users\n   */\n  @ApiOperation({\n    summary: 'It finds all users ',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users are fetched and paginated',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the api to return',\n    example: 1,\n  })\n  @ApiHeaders([\n    {\n      name: 'Authorization',\n      required: true,\n      description: 'Bearer token for authorization',\n    },\n    {\n      name: 'X-Custom-Header',\n      required: false,\n      description: 'A custom optional header',\n    },\n  ])\n  @Get()\n  public findAllUsers(@Query() usersQuery: GetUsersDto) {\n    return this.usersService.findAll(usersQuery);\n  }\n\n  /**\n   * route for getting a user by user id\n   * @param userId\n   * @returns a user\n   */\n  @ApiOperation({\n    summary: 'It finds a user based on their id',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User is fetched successfully based on user id',\n  })\n  @ApiParam({\n    name: 'userId',\n    required: true,\n    type: String,\n    description: 'The unique identifier of the user',\n    example: '12345',\n  })\n  @ApiHeaders([\n    {\n      name: 'Authorization',\n      required: true,\n      description: 'Bearer token for authorization',\n    },\n    {\n      name: 'X-Custom-Header',\n      required: false,\n      description: 'A custom optional header',\n    },\n  ])\n  @Get('/:userId')\n  public findUser(@Param('userId') userId: string) {\n    return this.usersService.findOneById(+userId);\n  }\n\n  /**\n   * route for getting all events created by user\n   * @param userId\n   * @param eventsQuery\n   * @returns all events from a user\n   */\n  @ApiOperation({\n    summary: 'It finds all events a user has created based on their id',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All events created by user are fetched',\n  })\n  @ApiParam({\n    name: 'userId',\n    required: true,\n    type: String,\n    description: 'The unique identifier of the user',\n    example: '12345',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the api to return',\n    example: 1,\n  })\n  @ApiHeaders([\n    {\n      name: 'Authorization',\n      required: true,\n      description: 'Bearer token for authorization',\n    },\n    {\n      name: 'X-Custom-Header',\n      required: false,\n      description: 'A custom optional header',\n    },\n  ])\n  @Get('/:userId/events')\n  public findUserEvents(\n    @Param('userId') userId: string,\n    @Query() eventsQuery: GetEventsDto,\n  ) {\n    return this.getUserEventsProvider.getUserEvents(userId, eventsQuery);\n  }\n\n  /**\n   * route for deleting a user\n   * @param userId\n   * @returns a message indicating user was deleted\n   */\n  @ApiOperation({\n    summary: 'It deletes a user based on their id',\n  })\n  @ApiResponse({\n    status: 204,\n    description: 'User successfully deleted',\n  })\n  @ApiParam({\n    name: 'userId',\n    required: true,\n    type: String,\n    description: 'The unique identifier of the user',\n    example: '12345',\n  })\n  @ApiHeaders([\n    {\n      name: 'Authorization',\n      required: true,\n      description: 'Bearer token for authorization',\n    },\n    {\n      name: 'X-Custom-Header',\n      required: false,\n      description: 'A custom optional header',\n    },\n  ])\n  @Delete('/:userId')\n  public deleteUser(@Param('userId', ParseIntPipe) userId: number) {\n    return this.usersService.deleteUser(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPaginationModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nChangeUserPasswordProvider\n\nChangeUserPasswordProvider\n\nUsersModule -->\n\nChangeUserPasswordProvider->UsersModule\n\n\n\n\n\nCreaterUsersProviders\n\nCreaterUsersProviders\n\nUsersModule -->\n\nCreaterUsersProviders->UsersModule\n\n\n\n\n\nFindOneByIdProvider\n\nFindOneByIdProvider\n\nUsersModule -->\n\nFindOneByIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nFindUserByResetOtpAndExpiryTimeProvider\n\nFindUserByResetOtpAndExpiryTimeProvider\n\nUsersModule -->\n\nFindUserByResetOtpAndExpiryTimeProvider->UsersModule\n\n\n\n\n\nStoreOtpAndExpireProvider\n\nStoreOtpAndExpireProvider\n\nUsersModule -->\n\nStoreOtpAndExpireProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChangeUserPasswordProvider\n                        \n                        \n                            CreaterUsersProviders\n                        \n                        \n                            FindOneByIdProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            FindUserByResetOtpAndExpiryTimeProvider\n                        \n                        \n                            StoreOtpAndExpireProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersService } from './providers/users.service';\nimport { UsersController } from './users.controller';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { CreaterUsersProviders } from './providers/creater-users.providers';\nimport { User } from './user.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport { StoreOtpAndExpireProvider } from './providers/store-otp-and-expire.provider';\nimport { FindUserByResetOtpAndExpiryTimeProvider } from './providers/find-user-by-reset-otp-and-expiry-time.provider';\nimport { ChangeUserPasswordProvider } from './providers/change-user-password.provider';\nimport { FindOneByIdProvider } from './providers/find-one-by-id.provider';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { EventsModule } from 'src/events/events.module';\n\n@Module({\n  providers: [\n    UsersService,\n    CreaterUsersProviders,\n    FindOneUserByEmailProvider,\n    StoreOtpAndExpireProvider,\n    FindUserByResetOtpAndExpiryTimeProvider,\n    ChangeUserPasswordProvider,\n    FindOneByIdProvider,\n  ],\n  controllers: [UsersController],\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    PaginationModule,\n    forwardRef(() => EventsModule),\n  ],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                service provider for the user module\ninjectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                changeUserPassword\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByResetOtpAndExpiryTime\n                            \n                            \n                                    Public\n                                    Async\n                                storeTokenOtpAndOtpExpire\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createUserProvider: CreaterUsersProviders, findOneUserByEmailProvider: FindOneUserByEmailProvider, storeOtpAndExpiresProvider: StoreOtpAndExpireProvider, findUserByResetOtpAndExpiresProvider: FindUserByResetOtpAndExpiryTimeProvider, changeUserPasswordProvider: ChangeUserPasswordProvider, findOneByIdProvider: FindOneByIdProvider, paginationprovider: PaginationProvider, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreaterUsersProviders\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        storeOtpAndExpiresProvider\n                                                  \n                                                        \n                                                                        StoreOtpAndExpireProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findUserByResetOtpAndExpiresProvider\n                                                  \n                                                        \n                                                                        FindUserByResetOtpAndExpiryTimeProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        changeUserPasswordProvider\n                                                  \n                                                        \n                                                                        ChangeUserPasswordProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByIdProvider\n                                                  \n                                                        \n                                                                        FindOneByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationprovider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        changeUserPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeUserPassword(user: User, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:121\n                        \n                    \n\n\n            \n                \n                        function for changing user password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the user with changed password\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:81\n                        \n                    \n\n\n            \n                \n                        function for creating a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the create user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:166\n                        \n                    \n\n\n            \n                \n                        a function for deleting a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a message on successful deletion\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userQuery: GetUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:142\n                        \n                    \n\n\n            \n                \n                        function for getting all users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userQuery\n                                            \n                                                            GetUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                all users\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:90\n                        \n                    \n\n\n            \n                \n                        function for getting the user based on the email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a user based on the email\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:133\n                        \n                    \n\n\n            \n                \n                        function for getting the user based on id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                user based on the user id\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByResetOtpAndExpiryTime\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByResetOtpAndExpiryTime(otp: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:109\n                        \n                    \n\n\n            \n                \n                        function for getting the user based on the stored reset token and expiry date\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the user based on the stored reset token and expiry date\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        storeTokenOtpAndOtpExpire\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeTokenOtpAndOtpExpire(user: User, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:100\n                        \n                    \n\n\n            \n                \n                        function for storing the reset token and expiry date of the token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a user with stored reset token and expiry date\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { CreaterUsersProviders } from './creater-users.providers';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { FindOneUserByEmailProvider } from './find-one-user-by-email.provider';\nimport { StoreOtpAndExpireProvider } from './store-otp-and-expire.provider';\nimport { User } from '../user.entity';\nimport { FindUserByResetOtpAndExpiryTimeProvider } from './find-user-by-reset-otp-and-expiry-time.provider';\nimport { ChangeUserPasswordProvider } from './change-user-password.provider';\nimport { FindOneByIdProvider } from './find-one-by-id.provider';\nimport { GetUsersDto } from '../dtos/get-user.dto';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n/**\n * service provider for the user module\n * injectable\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * constructor\n   * @param createUserProvider\n   * @param findOneUserByEmailProvider\n   * @param storeOtpAndExpiresProvider\n   * @param findUserByResetOtpAndExpiresProvider\n   * @param changeUserPasswordProvider\n   * @param findOneByIdProvider\n   * @param paginationprovider\n   * @param usersRepository\n   */\n  constructor(\n    /**\n     * injecting the create user provider\n     */\n    private readonly createUserProvider: CreaterUsersProviders,\n\n    /**\n     * Injecting the findOneUserByEmailProvider\n     */\n    private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider,\n\n    /**\n     * injecting the store otp and expires provider\n     */\n    private readonly storeOtpAndExpiresProvider: StoreOtpAndExpireProvider,\n\n    /**\n     * injecting the find user by reset otp and expires provider\n     */\n    private readonly findUserByResetOtpAndExpiresProvider: FindUserByResetOtpAndExpiryTimeProvider,\n\n    /**\n     * injecting the change user password provider\n     */\n    private readonly changeUserPasswordProvider: ChangeUserPasswordProvider,\n\n    /**\n     * injecting the find one by id provider\n     */\n    private readonly findOneByIdProvider: FindOneByIdProvider,\n\n    /**\n     * injecting the pagination provider\n     */\n    private readonly paginationprovider: PaginationProvider,\n\n    /**\n     * injecting the user repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  /**\n   * function for creating a new user\n   * @param createUserDto\n   * @returns the create user\n   */\n  public async create(createUserDto: CreateUserDto) {\n    return await this.createUserProvider.createUser(createUserDto);\n  }\n\n  /**\n   * function for getting the user based on the email\n   * @param email\n   * @returns a user based on the email\n   */\n  public async findOneByEmail(email: string) {\n    return this.findOneUserByEmailProvider.findOneByEmail(email);\n  }\n\n  /**\n   * function for storing the reset token and expiry date of the token\n   * @param user\n   * @param token\n   * @returns a user with stored reset token and expiry date\n   */\n  public async storeTokenOtpAndOtpExpire(user: User, token: string) {\n    return await this.storeOtpAndExpiresProvider.storeOtpAndExpire(user, token);\n  }\n\n  /**\n   * function for getting the user based on the stored reset token and expiry date\n   * @param otp\n   * @returns the user based on the stored reset token and expiry date\n   */\n  public async findUserByResetOtpAndExpiryTime(otp: string) {\n    return await this.findUserByResetOtpAndExpiresProvider.findUserByResetOtpAndExpiryTime(\n      otp,\n    );\n  }\n\n  /**\n   * function for changing user password\n   * @param user\n   * @param newPassword\n   * @returns the user with changed password\n   */\n  public async changeUserPassword(user: User, newPassword: string) {\n    return await this.changeUserPasswordProvider.changeUserPassword(\n      user,\n      newPassword,\n    );\n  }\n\n  /**\n   * function for getting the user based on id\n   * @param id\n   * @returns user based on the user id\n   */\n  public async findOneById(id: number) {\n    return await this.findOneByIdProvider.findById(id);\n  }\n\n  /**\n   * function for getting all users\n   * @param userQuery\n   * @returns all users\n   */\n  public async findAll(userQuery: GetUsersDto): Promise> {\n    try {\n      const user = this.paginationprovider.paginationQuery(\n        {\n          limit: userQuery.limit,\n          page: userQuery.page,\n        },\n        this.usersRepository,\n        {\n          relations: null,\n        },\n      );\n\n      return user;\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n\n  /**\n   * a function for deleting a user\n   * @param userId\n   * @returns a message on successful deletion\n   */\n  public async deleteUser(userId: number) {\n    try {\n      await this.usersRepository.delete(userId);\n      return {\n        message: `User ${userId}, was successfully deleted`,\n      };\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constant.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/constants/role.constant.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorator/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorator/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorator/role.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/forgot-password.dto.ts\n            \n            class\n            ForgotPassswordDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dtos/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/guards/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/providers/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/forgot-password.provider.ts\n            \n            injectable\n            ForgotPasswordProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-token.provider.ts\n            \n            injectable\n            RefreshTokenProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/reset-password.provider.ts\n            \n            injectable\n            ResetPasswordProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/config/paths.config.ts\n            \n            variable\n            ROOT_PATH\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/events/dtos/create-event.dto.ts\n            \n            class\n            CreateEventDto\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/events/dtos/get-events.dto.ts\n            \n            class\n            GetEventsBaseDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/events/dtos/get-events.dto.ts\n            \n            class\n            GetEventsDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/events/event.entity.ts\n            \n            entity\n            Event\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/events/events.controller.ts\n            \n            controller\n            EventsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/events/providers/create-event.provider.ts\n            \n            injectable\n            CreateEventProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/events/providers/events.service.ts\n            \n            injectable\n            EventsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/events/providers/get-user-events.provider.ts\n            \n            injectable\n            GetUserEventsProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.service.ts\n            \n            injectable\n            MailService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/payments/payment.entity.ts\n            \n            entity\n            Payment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/payments/providers/payments.service.ts\n            \n            injectable\n            PaymentsService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/paystack/dtos/payment.dto.ts\n            \n            class\n            PaymentDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/paystack/dtos/payment.dto.ts\n            \n            class\n            TicketTypeDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/paystack/paystack.controller.ts\n            \n            controller\n            PaystackController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/paystack/providers/paystack.service.ts\n            \n            injectable\n            PaystackService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/subscribers/dtos/create-subscriber.dto.ts\n            \n            class\n            CreateSubscriberDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/subscribers/providers/subscribers.service.ts\n            \n            injectable\n            SubscribersService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/subscribers/subscriber.entity.ts\n            \n            entity\n            Subscriber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/subscribers/subscribers.controller.ts\n            \n            controller\n            SubscribersController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/tickets/dtos/create-many-tickets.dto.ts\n            \n            class\n            CreateManyTicketsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/tickets/dtos/create-tickets.dto.ts\n            \n            class\n            CreateTicketDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/tickets/dtos/patch-ticket.dto.ts\n            \n            class\n            PatchTicketDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/tickets/providers/buy-ticket.provider.ts\n            \n            injectable\n            BuyTicketProvider\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/tickets/providers/generate-ticket-pdf.provider.ts\n            \n            injectable\n            GenerateTicketPdfProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/tickets/providers/tickets.service.ts\n            \n            injectable\n            TicketsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tickets/providers/update-bought-ticket.provider.ts\n            \n            injectable\n            UpdateBoughtTicketProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/tickets/ticket.entity.ts\n            \n            entity\n            Ticket\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tickets/tickets.controller.ts\n            \n            controller\n            TicketsController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/uploads/providers/upload-to-aws.provider.ts\n            \n            injectable\n            UploadToAwsProvider\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/uploads/providers/uploads.service.ts\n            \n            injectable\n            UploadsService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user.dto.ts\n            \n            class\n            GetUsersBaseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user.dto.ts\n            \n            class\n            GetUsersDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/providers/change-user-password.provider.ts\n            \n            injectable\n            ChangeUserPasswordProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/providers/creater-users.providers.ts\n            \n            injectable\n            CreaterUsersProviders\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-id.provider.ts\n            \n            injectable\n            FindOneByIdProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-user-by-reset-otp-and-expiry-time.provider.ts\n            \n            injectable\n            FindUserByResetOtpAndExpiryTimeProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/providers/store-otp-and-expire.provider.ts\n            \n            injectable\n            StoreOtpAndExpireProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                utils/getDateRanges.ts\n            \n            function\n            getDateRanges\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                utils/modifyAmount.ts\n            \n            variable\n            modifyNum\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @pdf-lib/fontkit : ^1.1.1\n        \n            aws-sdk : ^2.1691.0\n        \n            axios : ^1.7.7\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            fontkit : ^2.0.4\n        \n            joi : ^17.13.3\n        \n            jsbarcode : ^3.11.6\n        \n            nodemailer : ^6.9.15\n        \n            pdf-lib : ^1.17.1\n        \n            pg : ^8.13.0\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^10.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accountType   (src/.../account-type.enum.ts)\n                        \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            eventAttendanceMode   (src/.../attendanceMode.enum.ts)\n                        \n                        \n                            eventCategory   (src/.../eventCategory.enum.ts)\n                        \n                        \n                            eventPriceType   (src/.../eventPricetype.enum.ts)\n                        \n                        \n                            paymentStatus   (src/.../paymentStatus.enum.ts)\n                        \n                        \n                            Role   (src/.../role-type.enum.ts)\n                        \n                        \n                            TicketStatus   (src/.../ticket-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/enums/account-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        accountType\n                    \n                \n                        \n                            \n                                 EVENTORGANISER\n                            \n                        \n                        \n                            \n                                Value : eventOrganiser\n                            \n                        \n                        \n                            \n                                 TICKETPURCHASER\n                            \n                        \n                        \n                            \n                                Value : ticketPurchaser\n                            \n                        \n            \n        \n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/events/enums/attendanceMode.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        eventAttendanceMode\n                    \n                \n                    \n                        \n                            event price type enum\n\n                        \n                    \n                        \n                            \n                                 InPerson\n                            \n                        \n                        \n                            \n                                Value : in-person\n                            \n                        \n                        \n                            \n                                 Online\n                            \n                        \n                        \n                            \n                                Value : online\n                            \n                        \n            \n        \n\n    src/events/enums/eventCategory.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        eventCategory\n                    \n                \n                        \n                            \n                                 MUSIC\n                            \n                        \n                        \n                            \n                                Value : music\n                            \n                        \n                        \n                            \n                                 CONFERENCE\n                            \n                        \n                        \n                            \n                                Value : conference\n                            \n                        \n                        \n                            \n                                 FESTIVALS\n                            \n                        \n                        \n                            \n                                Value : festivals\n                            \n                        \n                        \n                            \n                                 PARTIES\n                            \n                        \n                        \n                            \n                                Value : parties\n                            \n                        \n                        \n                            \n                                 EXHIBITIONS\n                            \n                        \n                        \n                            \n                                Value : echibitions\n                            \n                        \n                        \n                            \n                                 THEATER\n                            \n                        \n                        \n                            \n                                Value : theater\n                            \n                        \n                        \n                            \n                                 CLASSES\n                            \n                        \n                        \n                            \n                                Value : classes\n                            \n                        \n                        \n                            \n                                 SPORTS\n                            \n                        \n                        \n                            \n                                Value : sports\n                            \n                        \n            \n        \n\n    src/events/enums/eventPricetype.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        eventPriceType\n                    \n                \n                    \n                        \n                            event price type enum\n\n                        \n                    \n                        \n                            \n                                 FREE\n                            \n                        \n                        \n                            \n                                Value : free\n                            \n                        \n                        \n                            \n                                 PAID\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n            \n        \n\n    src/payments/enums/paymentStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        paymentStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SUCCESS\n                            \n                        \n                        \n                            \n                                Value : success\n                            \n                        \n                        \n                            \n                                 FAILED\n                            \n                        \n                        \n                            \n                                Value : failed\n                            \n                        \n            \n        \n\n    src/auth/enums/role-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 EVENTORGANISER\n                            \n                        \n                        \n                            \n                                Value : eventOrganiser\n                            \n                        \n                        \n                            \n                                 EVENTPURCHASER\n                            \n                        \n                        \n                            \n                                Value : ticketPurchaser\n                            \n                        \n            \n        \n\n    src/tickets/enums/ticket-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TicketStatus\n                    \n                \n                        \n                            \n                                 SOLD\n                            \n                        \n                        \n                            \n                                Value : sold\n                            \n                        \n                        \n                            \n                                 LOCKED\n                            \n                        \n                        \n                            \n                                Value : locked\n                            \n                        \n                        \n                            \n                                 UNSOLD\n                            \n                        \n                        \n                            \n                                Value : unsold\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getDateRanges   (utils/.../getDateRanges.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        the boostrap nest function\n\n\n                \n            \n        \n    \n    utils/getDateRanges.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getDateRanges\n                        \n                    \n                \n            \n            \n                \ngetDateRanges()\n                \n            \n\n\n\n\n            \n                \n                        function fot getting date ranges\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaystackModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscribersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaymentsModule\n\n\n\ncluster_PaymentsModule_providers\n\n\n\ncluster_PaystackModule\n\n\n\ncluster_PaystackModule_providers\n\n\n\ncluster_SubscribersModule\n\n\n\ncluster_SubscribersModule_providers\n\n\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_exports\n\n\n\ncluster_UploadsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nEventsModule\n\nEventsModule\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nEventsModule->TicketsModule\n\n\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nEventsService \n\nEventsService \n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\n\n\nGetUserEventsProvider \n\nGetUserEventsProvider \n\nGetUserEventsProvider  -->\n\nEventsModule->GetUserEventsProvider \n\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nSubscribersModule -->\n\nMailModule->SubscribersModule\n\n\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nEventsModule -->\n\nPaginationModule->EventsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPaginationModule->UsersModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaymentsModule\n\nPaymentsModule\n\nAppModule -->\n\nPaymentsModule->AppModule\n\n\n\n\n\nPaystackModule\n\nPaystackModule\n\nAppModule -->\n\nPaystackModule->AppModule\n\n\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\nPaystackModule -->\n\nTicketsModule->PaystackModule\n\n\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nEventsModule -->\n\nUploadsModule->EventsModule\n\n\n\nPaystackModule -->\n\nUploadsModule->PaystackModule\n\n\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUploadsService \n\nUploadsService \n\nUploadsService  -->\n\nUploadsModule->UploadsService \n\n\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nForgotPasswordProvider\n\nForgotPasswordProvider\n\nAuthModule -->\n\nForgotPasswordProvider->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nRefreshTokenProvider\n\nRefreshTokenProvider\n\nAuthModule -->\n\nRefreshTokenProvider->AuthModule\n\n\n\n\n\nResetPasswordProvider\n\nResetPasswordProvider\n\nAuthModule -->\n\nResetPasswordProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nCreateEventProvider\n\nCreateEventProvider\n\nEventsModule -->\n\nCreateEventProvider->EventsModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nGetUserEventsProvider\n\nGetUserEventsProvider\n\nEventsModule -->\n\nGetUserEventsProvider->EventsModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nPaymentsService\n\nPaymentsService\n\nPaymentsModule -->\n\nPaymentsService->PaymentsModule\n\n\n\n\n\nPaystackService\n\nPaystackService\n\nPaystackModule -->\n\nPaystackService->PaystackModule\n\n\n\n\n\nSubscribersService\n\nSubscribersService\n\nSubscribersModule -->\n\nSubscribersService->SubscribersModule\n\n\n\n\n\nBuyTicketProvider\n\nBuyTicketProvider\n\nTicketsModule -->\n\nBuyTicketProvider->TicketsModule\n\n\n\n\n\nGenerateTicketPdfProvider\n\nGenerateTicketPdfProvider\n\nTicketsModule -->\n\nGenerateTicketPdfProvider->TicketsModule\n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\nUpdateBoughtTicketProvider\n\nUpdateBoughtTicketProvider\n\nTicketsModule -->\n\nUpdateBoughtTicketProvider->TicketsModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\nChangeUserPasswordProvider\n\nChangeUserPasswordProvider\n\nUsersModule -->\n\nChangeUserPasswordProvider->UsersModule\n\n\n\n\n\nCreaterUsersProviders\n\nCreaterUsersProviders\n\nUsersModule -->\n\nCreaterUsersProviders->UsersModule\n\n\n\n\n\nFindOneByIdProvider\n\nFindOneByIdProvider\n\nUsersModule -->\n\nFindOneByIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nFindUserByResetOtpAndExpiryTimeProvider\n\nFindUserByResetOtpAndExpiryTimeProvider\n\nUsersModule -->\n\nFindUserByResetOtpAndExpiryTimeProvider->UsersModule\n\n\n\n\n\nStoreOtpAndExpireProvider\n\nStoreOtpAndExpireProvider\n\nUsersModule -->\n\nStoreOtpAndExpireProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    31 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            modifyNum   (utils/.../modifyAmount.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            Roles   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../role.constant.ts)\n                        \n                        \n                            ROOT_PATH   (src/.../paths.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorator/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n            \n                \n                    Custom param decorator for the active user\n\n                \n            \n\n        \n    \n\n    src/auth/decorator/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n            \n                \n                    decorator for guarding user authentication\n\n                \n            \n\n        \n    \n\n    src/auth/constants/auth.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n            \n                \n                    constant for auth type\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n            \n                \n                    constant for request user\n\n                \n            \n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n            \n                \n                    app environment\n\n                \n            \n\n        \n    \n\n    utils/modifyAmount.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modifyNum\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (num: string) => {\n  if (num.length \n                    \n                \n\n            \n                \n                    function for formatting amounts to have commas\n\n                \n            \n\n        \n    \n\n    src/auth/decorator/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    decoraror for gaurding the user roles\n\n                \n            \n\n        \n    \n\n    src/auth/constants/role.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    constant for the roles\n\n                \n            \n\n        \n    \n\n    src/config/paths.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROOT_PATH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.cwd()\n                    \n                \n\n            \n                \n                    setting the default root\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
